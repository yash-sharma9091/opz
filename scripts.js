'use strict';

angular
	.module("quickSignupMain", ['gm'])
	.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {
	$routeProvider
		.when("/signup", {
			templateUrl: "quickSignup/quickSignup.html",
			controller: "quickSignupCtrl",
			access: {
				goToLandingPageIfLoggedIn: true,
				requiresLogin: false,
				clientSide: 'USER',
				page: 'USR_NOTLOG'
			},
			classes: {
				bodyClassName: 'grey',
			},
		})
		.when("/verify/:hash", {
			templateUrl: "quickSignup/verify.html",
			controller: "quickSignupVerifyCtrl",
			access: {
				requiresLogin: false,
				clientSide: 'USER',
				page: 'USR_NOTLOG'
			},

		});
		$locationProvider.html5Mode(true);
}]);

'use strict';
/* quickSignupController */

angular
	.module('quickSignupMain')
	.controller('quickSignupCtrl', [
		'$scope',
		'$routeParams',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$timeout',
		'$route',
		'quickSignup',
		'myProfile',
		function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $route, quickSignup, myProfile){

			$scope.qsData          = {};
			$scope.year            = myProfile.getYears();
			$scope.signupStatus    = false;
			$scope.formBtnDisabled = false;
			// set current geo location
			quickSignup.getLocation(function(position){

				$scope.qsData.autocompleteData = '';
				$timeout(function(){
					try{
						$scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+position.coords.latitude+","+position.coords.longitude+"&z=14&output=embed";
					}catch(e){
						console.log('Error : unable to set location');
						console.log(e);
					}
				},1000);
			});

			console.log('quickSignupCtrl========');
			$scope.resetUsernameFlags = function () {
				$scope.usernameExists = false;
				$scope.validUsername  = false;
			}
			$scope.resetEmailFlags = function () {
				$scope.emailExists = false;
				$scope.validEmail  = false;
			}

			var vm = this;
			// Show Signup Form if hidden
            $scope.showSignupForm = function(){
				if($scope.signupStatus){
					$scope.qsForm.$setPristine();
					$scope.qsForm.$setUntouched();
					$route.reload();
				}
				$scope.signupStatus = false;
			}
			// Check username exist or not
            $scope.checkUsername = function(username,CB){
				// CB =  callback function, optional
				quickSignup.checkUsername(username)
					.then(function (response) {
						if (response.status === 1 && response.message === 'username_exists') {

							$scope.usernameExists = true;
						} else {
							$scope.validUsername = true;
						}
						if(CB){
							CB();
						}
					});
			}

			// Check email id exist or not
            $scope.checkEmail = function(email){
				//quickSignup.checkEmail(email)
				quickSignup.checkEmailExist(email)
					.then(function (response) {
						console.log(response);

						if (response.status === 1 && response.action === 'msgbox') {

							$scope.emailExists = true;
							$rootScope.addAlert(response);
						} else {
							$rootScope.closeAlert(0);
							$scope.validEmail = true;
						}
					});
			}

			$scope.$on('gmPlacesAutocomplete::placeChanged', function(){

				console.log($scope.qsData.autocompleteData);
				var location = $scope.qsData.autocompleteData.getPlace().geometry.location;
				$scope.lat = location.lat();
				$scope.lng = location.lng();

				$scope.formattedAddress = $scope.qsData.autocompleteData.getPlace().formatted_address;
				var add= $scope.formattedAddress;
				var place=   $scope.qsData.autocompleteData.getPlace().address_components;
				var placeLength=place.length;
				console.log("This will be the addresse");
				console.log(place);

				$scope.qsData.country='';
				$scope.qsData.state='';
				$scope.qsData.city='';

				for (var i = 0; i < placeLength; i++)
				{

					if(place[i].types[0]=='country')
					{
						$scope.qsData.country=place[i].long_name;
					}
					else if(place[i].types[0]=='administrative_area_level_1')
					{
						$scope.qsData.state=place[i].long_name;
					}
					else if(place[i].types[0]=='locality')
					{
						$scope.qsData.city=place[i].long_name;
					}
				}
				$scope.isValidLocation();

				$scope.qsData.latitude =location.lat();
				$scope.qsData.longitude = location.lng();
				$scope.qsData.autocompleteData='';

				$scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+location.lat()+","+location.lng()+"&z=14&output=embed";
				$scope.$apply();
			});

			$scope.isValidLocation = function () {
				console.log('isValid');
				console.log($scope.qsData);
				console.log($scope.qsData.state);
				$timeout(function(){

					if(!$scope.qsData.state || $scope.qsData.state == ''){
						console.log('invalid_location = false');
						$scope.qsForm.autocompleteData.$setValidity("invalid_location", false);
					}else{
						console.log('invalid_location = true');
						$scope.qsForm.autocompleteData.$setValidity("invalid_location", true);
					}
					console.log($scope.qsForm);
				},1);
			}

			$scope.qsFormSubmit = function (isValid, qsData, qsForm) {

				// Data modifications before submission
				qsData.dobOne = qsData.yearOne+'-'+qsData.monthOne+'-'+qsData.dayOne;
				qsData.ageOne = quickSignup.getAge(qsData.dobOne);
				if(qsData.personOneMassageType_both){
					qsData.therapeuticMassageOne = 'therapeutic';
					qsData.sensualMassageOne = 'sensual';
				}
				if(qsData.seeking_both){
					qsData.seeking_male   = 'male';
					qsData.seeking_female = 'female';
				}

				// Modifications End

				$scope.formBtnDisabled = true;
				$scope.checkUsername(qsData.username, function(){
					var focusForm = function(){
						// Focus to top of the form
						$timeout(function () {
							console.log(qsForm.$name);
							angular.element("[name='" + qsForm.$name + "']").find('.ng-invalid:visible:first').focus();
							return false;
						}, 10);
					}
					console.log(isValid);
					console.log(qsData);
					console.log($scope.validUsername);
					if (isValid === true && $scope.validUsername) {

						$rootScope.showloader = true;
						quickSignup.signUp( qsData, function(response){

							$rootScope.showloader = false;
							$scope.formBtnDisabled = false;
							if(response){
								$rootScope.addAlert(response);
								focusForm();
								if (response.status === 1) {
									$rootScope.addAlert(response);
									$scope.qsData = {}; // To clear form values
									$scope.signupStatus = true;


								} else {

									$scope.errorMessage = "Error in signup.";
									focusForm();
								}
							}
						});

					} else {
						$scope.formBtnDisabled = false;
						focusForm();
					}
				});
			}
			$scope.uncheckGender = function () {
				if($scope.qsData.seeking_both)
				{
					$scope.qsData.seeking_both = false;
					$scope.qsData.seeking_male = 'male';
					$scope.qsData.seeking_female = 'female';
				}
			};
			$scope.seekingBoth = function () {

				if($scope.qsData.seeking_male == 'male')
				{
					$scope.qsData.seeking_male = '';
				}
				if($scope.qsData.seeking_female == 'female')
				{
					$scope.qsData.seeking_female = false;
				}
			};

			$scope.uncheckMassageType = function () {
				if($scope.qsData.personOneMassageType_both)
				{
					$scope.qsData.personOneMassageType_both=false;
					$scope.qsData.therapeuticMassageOne = 'therapeutic';
					$scope.qsData.sensualMassageOne = 'sensual';
				}
			};
			$scope.massageTypeBoth = function () {

				if($scope.qsData.therapeuticMassageOne == 'therapeutic')
				{
					$scope.qsData.therapeuticMassageOne = '';
				}
				if($scope.qsData.sensualMassageOne == 'sensual')
				{
					$scope.qsData.sensualMassageOne = '';
				}
			};
		}
	])
	.controller('quickSignupVerifyCtrl', [
		'$scope',
		'$routeParams',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$timeout',
		'quickSignup',
		function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, quickSignup){

			console.log('In quickSignupVerifyCtrl.....');
			var hashKey = $routeParams.hash;
			quickSignup.verify( { emailVerificationKey: hashKey }, function(response){

				$rootScope.showloader = false;
				if(response){
					$rootScope.addAlert(response);
					if (response.status === 1) {
						$scope.showLoginLink = true;

					} else {

						$scope.errorMessage = "Error in signup.";
					}
				}
			});
		}
	]);

(function () {
    'use strict';

    angular
        .module('quickSignupMain')
        .factory('quickSignup', quickSignup);

	//quickSignup
    quickSignup.$inject =
    ['$routeParams', '$rootScope', '$http', '$location', '$window'];

	function quickSignup($routeParams, $rootScope, $http, $location, $window){

		var service = {};

		service.checkUsername   = checkUsername;
		service.checkEmail      = checkEmail;
		service.checkEmailExist = checkEmailExist;
		service.getLocation     = getLocation;
		service.signUp          = signUp;
		service.verify          = verify;
		service.getAge          = getAge;
		return service;

		function checkUsername(username){
			return $http.post($rootScope.STATIC_URL + 'phase2/checkUsername', {username: username}).then(handleSuccess, handleError('Error creating user'));
		}

		function checkEmail(email){
			return $http.post($rootScope.STATIC_URL + 'phase2/checkEmail', {email: email}).then(handleSuccess, handleError('Error creating user'));
		}

		function checkEmailExist(email){
			return $http.post($rootScope.STATIC_URL + 'phase2/checkEmailExist', {email: email}).then(handleSuccess, handleError('Error creating user'));
		}

		function getLocation(CB) {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(CB);
			} else {
				x.innerHTML = "Geolocation is not supported by this browser.";
			}
		}

		function signUp(data,CB) {
            $http.post($rootScope.STATIC_URL + 'phase2/quickSignup', data).success(function (response) {

				CB(response);

            }).error(function (err) {
                console.log("ERROR" + err);
            });
		}

		function verify(data,CB) {
            $http.post($rootScope.STATIC_URL + 'phase2/verify', data).success(function (response) {

				CB(response);

            }).error(function (err) {
                console.log("ERROR" + err);
            });
		}
		function getAge(dateString) {
			var today = new Date();
			var birthDate = new Date(dateString);
			var age = today.getFullYear() - birthDate.getFullYear();
			var m = today.getMonth() - birthDate.getMonth();
			if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
				age--;
			}
			return age;
		}

		function handleSuccess(res) {
			return res.data;
		}

		function handleError(error) {
			return function () {
				return { success: false, message: error };
			};
		}
	}

})();

'use strict';

angular
	.module("myProfileMain", ['gm'])
	.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {
		/*$routeProvider
		/*.when("/profile/edit", {
			templateUrl: "MyProfile/editProfile.html",
			controller: "editprofileCtrl",
			access: {
				requiresLogin: true,
				clientSide: 'USER',
				page: 'USR_NOTLOG'
			},classes: {
				bodyClassName: 'grey',
            }
		})
		/*
		.when("/myprofile", {
			templateUrl: "MyProfile/myProfile.html",
			controller: "myprofilenewCtrl",
			access: {
				requiresLogin: true,
				clientSide: 'USER',
				page: 'USR_NOTLOG'
			},classes: {
				bodyClassName: 'grey',
            }
		})*/;
		//$locationProvider.html5Mode(true);
}]);

'use strict';
/* quickSignupController */

angular
	.module('myProfileMain')
	.controller('myprofilenewCtrl', [
		'$scope',
		'$routeParams',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$timeout',
		'$interval',
		'$uibModal',
		'myProfile',
		'quickSignup',
		function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $interval,$uibModal, myProfile, quickSignup){

			console.debug('myprofilenewCtrl');
			var token  = $window.localStorage.userToken;
			var uid    = $window.localStorage.uid;

			//Get Home Location
			$http.post($rootScope.STATIC_URL + 'travelLocations/getHomeLocation')
				.success(function (response) {
				// alert(JSON.stringify(response));
				if (response.status == 1)
				{
					console.log("get home Location Response");
					console.log(response);
					$scope.homeLocation = response.data;
				}

			}).error(function () {
				$scope.errorMessage = "Please Try Again";
				$timeout(function () {
					$scope.errorMessage = false;
				}, 3000);
			});

			var params = {
				token: $window.localStorage.userToken,
				userRole: $window.localStorage.userType
			};
			$http.post($rootScope.STATIC_URL + 'users/getUserFullDetails',params)
				.success(function (response) {

				$rootScope.showloader = false;
				if (response.status === 1) {
					console.log("====  getUserFullDetails  ======");
					$scope.profile      = response.data[0];
					$scope.profile1      = response.data3;
						//console.log($scope.profile1);
					//console.log($scope.profile1[0].reviewReceived);

					 $scope.date = new Date();
					console.log($scope.profile );
					var gender=$scope.profile.gender;
					if((gender=='male_female_couple') ||(gender== 'gay_couple' )||(gender=='lesbian_couple'))
					{
						$scope.couple=true;
					}
					$scope.travelLocations = response.data1;
					if(response.data1.length>=1)
					{
						var len=0;
						for(var i=0;i<response.data1.length;i++)
						{
							if(response.data1[i].travelStart)
							{
								len = len+1;
								console.log(len);
							}
						}
						$scope.travelCount = len;
					}
					else
					{
						$scope.travelCount = null;
					}

					$scope.iframeSrc       = "https://maps.google.com/maps?q="+$scope.profile.latitude+","+$scope.profile.longitude+"&z=14&output=embed";
					$scope.profile.seeking = '';
					$scope.profile.ageOne  = quickSignup.getAge($scope.profile.dobOne);

					var condition1 = ($scope.profile.seeking_male == 'male');
					var condition2 = ($scope.profile.seeking_female == 'female');
					if(condition1){
						$scope.profile.seeking = 'male';
					}
					else if(condition2){
						$scope.profile.seeking = 'female';
					}else if(condition1 && condition2){
						$scope.profile.seeking = 'Both';
					}else{
						$scope.profile.seeking = '';
					}
				}
			}).error(function (err) {
				console.log("ERROR" + err);
			});


			$http
				.get($rootScope.STATIC_URL + 'subscription/getMyLatestSubscription')
				.success(function(response){
				if(response.status==1)
				{
					$scope.mysubscription = response.data;
				}
			}).error(function(err){
				console.log("Error"+err);
			});
		}
	])
	.controller('editprofileCtrl', [
		'$scope',
		'$routeParams',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$timeout',
		'$interval',
		'$uibModal',
		'myProfile',
		function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $interval,$uibModal, myProfile){

			$scope.requiresLogin      = true;
			$rootScope.profileUpdated = false;

			$scope.formOneData = {};
			$scope.lat                            = undefined;
			$scope.lng                            = undefined;
			$scope.formattedAddress               = undefined;
			$scope.errorMessage                   = "";
			$scope.selectedCountryPresentErrorMsg = "";
			$scope.MapLoading                     = function($scope){};

			$scope.$on('gmPlacesAutocomplete::placeChanged', function(){

				console.log($scope.formOneData.autocompleteData);
				var location = $scope.formOneData.autocompleteData.getPlace().geometry.location;
				$scope.lat   = location.lat();
				$scope.lng   = location.lng();

				$scope.formattedAddress = $scope.formOneData.autocompleteData.getPlace().formatted_address;
				var add         = $scope.formattedAddress;
				var place       = $scope.formOneData.autocompleteData.getPlace().address_components;
				var placeLength = place.length;
				console.log("This will be the addresse");
				console.log(place);
				$scope.formOneData.country = '';
				$scope.formOneData.state   = '';
				$scope.formOneData.city    = '';
				$scope.formOneData.zipcode    = '';
				for (var i = 0; i < placeLength; i++)
				{

					if(place[i].types[0]=='country')
					{
						$scope.formOneData.country=place[i].long_name;
					}

					else if(place[i].types[0]=='administrative_area_level_1')
					{
						$scope.formOneData.state=place[i].long_name;
					}

					else if(place[i].types[0]=='locality')
					{
						$scope.formOneData.city=place[i].long_name;
					}
                                        else if(place[i].types[0]=='postal_code')
					{
						$scope.formOneData.zipcode=place[i].long_name;
					}
				}
				$scope.formOneData.latitude =location.lat();
				$scope.formOneData.longitude = location.lng();
				$scope.formOneData.autocompleteData='';
				$scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+location.lat()+","+location.lng()+"&z=14&output=embed";
				$scope.$apply();
			});

			//----------------------------------------------LOCATION FUNCTIONALITIES END-------------------------------------------------------------------
			var uid = $window.localStorage.uid;
			var params = {
				userId: uid,
			};

			$http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {



				$scope.year = myProfile.getYears();
				if (response.status === 1) {
					var userData                 = response.data[0];
					$scope.iframeSrc              = "https://maps.google.com/maps?language=ru-RU&q="+userData.latitude+","+userData.longitude+"&z=14&output=embed";

					console.log(userData);
					$scope.formOneData        = userData;

					var dobOne                = new Date(userData.dobOne)
					$scope.formOneData
						.dayOne               = dobOne.getDate();
					$scope.formOneData
						.monthOne             = (dobOne.getMonth() + 1);
					$scope.formOneData
						.yearOne              = dobOne.getFullYear();
					$scope.formOneData
						.bodyTypeOne          = userData.bodyTypeOne;
					$scope.formOneData
						.levelTypeOne         = userData.levelTypeOne;

					// Set professional type details to first person
					if(userData.levelTypeOne== 'professional_cmt'){
						$scope.formOneData.professionalType = userData.professionalType;
						if (userData.professionalType === 'free') {
							$scope.formOneData.professionalType = 'free';
						}
						if (userData.professionalType === 'paid') {
							$scope.formOneData.professionalType = 'paid';
						}
						if (userData.professionalType === 'both') {
							$scope.formOneData.professionalType = 'both';
						}
					}


					// Handling 'both' condition
					if(userData.seeking_male == 'male' && userData.seeking_female == 'female'){
						$scope.formOneData.seeking_both = 'both';
						$scope.formOneData.seeking_male = '';
						$scope.formOneData.seeking_female = '';
					}
					if(userData.prefer_massage_exchange == 'exchange' && userData.prefer_massage_paid == 'paid'){
						$scope.formOneData.prefer_massage_both = 'both';
						$scope.formOneData.prefer_massage_exchange = '';
						$scope.formOneData.prefer_massage_paid = '';
					}
					if(userData.prefer_therapeuticMassage == 'therapeutic' && userData.prefer_sensualMassage == 'sensual'){
						$scope.formOneData.prefer_MassageType_both = 'both';
						$scope.formOneData.prefer_therapeuticMassage = '';
						$scope.formOneData.prefer_sensualMassage = '';
					}
					if(userData.therapeuticMassageOne == 'therapeutic' && userData.sensualMassageOne == 'sensual'){
						$scope.formOneData.personOneMassageType_both = 'both';
						$scope.formOneData.therapeuticMassageOne = '';
						$scope.formOneData.sensualMassageOne = '';
					}


					var data           = userData.massageStylesOne;
					var massStyle1Data = {};
					if(data!=null){
						var str = data.split(',');
						for(var i=0;i<str.length;i++){
							if(str[i]== 'deep_tissue/strong'){
								massStyle1Data['deep_tissue_strong'] = str[i];
							}else
							{
								massStyle1Data[str[i]] = str[i];
							}
						}
					}
					$scope.formOneData.massageStylesOne=massStyle1Data;

					if (userData.therapeuticMassageTwo === 'therapeutic') {
						$scope.formOneData.therapeuticMassageTwo = true;
					}
					if (userData.sensualMassageTwo === 'sensual') {
						$scope.formOneData.sensualMassageTwo = true;
					}

					var dobTwo                   = new Date(userData.dobTwo)
					//$scope.formOneData.dobTwo  = dobTwo.getFullYear() + "-" + (dobTwo.getMonth() + 1) + "-" + dobTwo.getDate();
					$scope.formOneData.dayTwo    = dobTwo.getDate();
					$scope.formOneData.monthTwo  = (dobTwo.getMonth() + 1);
					$scope.formOneData.yearTwo   = dobTwo.getFullYear();

					// Set professional type details to second person
					if(userData.levelTypeOne== 'professional_cmt'){
						$scope.formOneData.professionalTypeTwo = userData.professionalTypeTwo;
						if (userData.professionalTypeTwo === 'free') {
							$scope.formOneData.professionalTypeTwo = 'free';
						}
						if (userData.professionalTypeTwo === 'paid') {
							$scope.formOneData.professionalTypeTwo = 'paid';
						}
						if (userData.professionalTypeTwo === 'both') {
							$scope.formOneData.professionalTypeTwo = 'both';
						}
					}

					var data2 = userData.massageStylesTwo;
					var massStyleData = {};
					if(data2!=null){
						var str=data2.split(',');
						for(var i=0;i<str.length;i++){
							if(str[i]== 'deep_tissue/strong'){
								massStyleData['deep_tissue_strong']=str[i];
							}
							else
							{
								massStyleData[str[i]]=str[i];
							}
						}
					}

					$scope.formOneData.massageStylesTwo = massStyleData;
					console.log($scope.formOneData);
				}
			}).error(function (err) {
				console.log("ERROR" + err);
			});


			$scope.profileFormSubmit = function (isValid, formOneData, profileForm) {

				if (isValid === true) {
					//$scope.geoCode();
				    $rootScope.showloader = true;
				    $scope.buttonDisabled = true;
				    console.log("params------>");
				    var params            = {};
				    var userinfo          = {};
				    var fileData          = null;
				    var dataResult        = "false";
				    /* upload area   */

				    var file              = $scope.profilePicture;
				    var uploadUrl         = $rootScope.STATIC_URL + 'assets/images/';
				    var fd                = new FormData();
				    fd.append('userId', $window.localStorage.uid);
				    fd.append('profilePic1', file);
				    userinfo.profilePic   = formOneData.profilePic;
				    console.log("file -------->");
				    console.log(file);
				    userinfo.gender       = formOneData.gender;
				    userinfo.city         = formOneData.city;
				    userinfo.country      = formOneData.country;
				    userinfo.state        = formOneData.state;
                                    userinfo.zipcode        = formOneData.zipcode;

					// Data modifications before submission
					formOneData.dobOne = formOneData.yearOne+'-'+formOneData.monthOne+'-'+formOneData.dayOne;
					if(formOneData.personOneMassageType_both){
						formOneData.therapeuticMassageOne = 'therapeutic';
						formOneData.sensualMassageOne = 'sensual';
					}
					userinfo.personOneMassageType_both = formOneData.therapeuticMassageOne;
					userinfo.sensualMassageOne         = formOneData.sensualMassageOne;
					// prefer
					if(formOneData.prefer_MassageType_both){
						formOneData.prefer_therapeuticMassage   = 'therapeutic';
						formOneData.prefer_sensualMassage = 'sensual';
					}
					userinfo.prefer_therapeuticMassage = formOneData.prefer_therapeuticMassage;
					userinfo.prefer_sensualMassage     = formOneData.prefer_sensualMassage;

					// seeking
					if(formOneData.seeking_both){
						formOneData.seeking_male   = 'male';
						formOneData.seeking_female = 'female';
					}
					userinfo.seeking_male   = formOneData.seeking_male;
					userinfo.seeking_female = formOneData.seeking_female;

					// prefered massage
					if(formOneData.prefer_massage_both){
						formOneData.prefer_massage_exchange = 'exchange';
						formOneData.prefer_massage_paid = 'paid';
					}
					userinfo.prefer_massage_exchange = formOneData.prefer_massage_exchange;
					userinfo.prefer_massage_paid     = formOneData.prefer_massage_paid;

					// Modifications End


				    //alert(formOneData.city);
				    if (formOneData.city === 'null' || formOneData.city === null) {
				        userinfo.address = formOneData.state + ", " + formOneData.country;
				    } else {
				        userinfo.address = formOneData.city + ", " + formOneData.state + ", " + formOneData.country;

				    }
				    userinfo.latitude = $scope.formOneData.latitude;
				    userinfo.longitude = $scope.formOneData.longitude;

				    //  userinfo.dobOne = formOneData.dobOne;
				    userinfo.seeking  = formOneData.seeking;
				    userinfo.aboutme  = formOneData.aboutme;
				    userinfo.dayOne   = formOneData.dayOne;
				    userinfo.monthOne = formOneData.monthOne;
				    userinfo.yearOne  = formOneData.yearOne;
				    userinfo.dobOne   = formOneData.yearOne + '-' + formOneData.monthOne + '-' + formOneData.dayOne;

				    userinfo.ageOne              = getAge(userinfo.dobOne);
				    userinfo.bodyTypeOne         = formOneData.bodyTypeOne;
				    userinfo.levelTypeOne        = formOneData.levelTypeOne;

				    userinfo.levelTypeOne        = formOneData.levelTypeOne;


				    if (formOneData.levelTypeOne == 'professional_cmt') {

				        userinfo.professionalType = formOneData.professionalType;
				    } else {

				        userinfo.professionalType = '';
				    }
				    userinfo.levelTypeOneOther = formOneData.levelTypeOneOther;
				    //userinfo.professionalType = formOneData.professionalType;
				    userinfo.experienceOne     = formOneData.experienceOne;
				    //userinfo.massageStylesOne = formOneData.massageStylesOne;
				    if (formOneData.massageStylesOne.deep_tissue_strong == undefined || formOneData.massageStylesOne.deep_tissue_strong == false || formOneData.massageStylesOne.deep_tissue_strong == 'null') {
				        formOneData.massageStylesOne.deep_tissue_strong = null;
				    }
				    if (formOneData.massageStylesOne.thai == undefined || formOneData.massageStylesOne.thai == false || formOneData.massageStylesOne.thai == 'null') {
				        formOneData.massageStylesOne.thai = null;
				    }
				    if (formOneData.massageStylesOne.reflexology == undefined || formOneData.massageStylesOne.reflexology == false || formOneData.massageStylesOne.reflexology == 'null') {
				        formOneData.massageStylesOne.reflexology = null;
				    }
				    if (formOneData.massageStylesOne.swedish == undefined || formOneData.massageStylesOne.swedish == false || formOneData.massageStylesOne.swedish == 'null') {
				        formOneData.massageStylesOne.swedish = null;
				    }
				    if (formOneData.massageStylesOne.chinese == undefined || formOneData.massageStylesOne.chinese == false || formOneData.massageStylesOne.chinese == 'null') {
				        formOneData.massageStylesOne.chinese = null;
				    }
				    if (formOneData.massageStylesOne.others == undefined || formOneData.massageStylesOne.others == false || formOneData.massageStylesOne.others == 'null') {
				        formOneData.massageStylesOne.others = null;
				    }

					userinfo
						.massageStylesOneOther =  (formOneData.massageStylesOne.others === 'others') ? formOneData.massageStylesOneOther : '';
				    var string                 =  formOneData.massageStylesOne;
				    var res = Object.keys(string).map(function(v) {
				        return string[v];
				    }).join();

				    userinfo.massageStylesOne   = res.replace(/([,])+/g, ",");
				    //userinfo.massageStylesOne =userinfo.massageStylesOne.replace(/(,$)/g, " ");
				    //userinfo.massageStylesOne =userinfo.massageStylesOne.replace(/(^,)/g, " ");

				    if (formOneData.gender !== 'male' && formOneData.gender !== 'female') {



				        if (formOneData.personTwoMassageType_both === true) {
				            formOneData.therapeuticMassageTwo = true;
				            formOneData.sensualMassageTwo     = true;
				        }
				        userinfo
							.therapeuticMassageTwo     = (formOneData.therapeuticMassageTwo === true) ? 'therapeutic' : '';
				        userinfo
							.therapeuticMassageTwoDesc = (formOneData.therapeuticMassageTwo === true) ? formOneData.therapeuticMassageTwoDesc : '';
				        userinfo
							.sensualMassageTwo         = (formOneData.sensualMassageTwo === true) ? 'sensual' : '';
				        userinfo
							.sensualMassageTwoDesc     = (formOneData.sensualMassageTwo === true) ? formOneData.sensualMassageTwoDesc : '';
				        userinfo.dobTwo                = formOneData.dobTwo;
				        userinfo.dayTwo                = formOneData.dayTwo;
				        userinfo.monthTwo              = formOneData.monthTwo;
				        userinfo.yearTwo               = formOneData.yearTwo;
				        userinfo.dobTwo                = formOneData.yearTwo + '-' + formOneData.monthTwo + '-' + formOneData.dayTwo;

				        userinfo.ageTwo                = getAge(userinfo.dobTwo);
				        userinfo.bodyTypeTwo           = formOneData.bodyTypeTwo;
				        userinfo.levelTypeTwo          = formOneData.levelTypeTwo;
				        if (formOneData.levelTypeTwo == 'professional_cmt') {
				            userinfo.professionalTypeTwo = formOneData.professionalTypeTwo;
				        } else {
				            userinfo.professionalTypeTwo = '';
				        }
				        userinfo.levelTypeTwoOther = formOneData.levelTypeTwoOther;
				        userinfo.experienceTwo     = formOneData.experienceTwo;

				        //userinfo.massageStylesTwo = formOneData.massageStylesTwo;


				        if (formOneData.massageStylesTwo.deep_tissue_strong == undefined || formOneData.massageStylesTwo.deep_tissue_strong == false || formOneData.massageStylesTwo.deep_tissue_strong == 'null') {
				            formOneData.massageStylesTwo.deep_tissue_strong = null;
				            //formOneData.massageStylesTwo.deep_tissue/strong= null;
				        }
				        if (formOneData.massageStylesTwo.thai == undefined || formOneData.massageStylesTwo.thai == false || formOneData.massageStylesTwo.thai == 'null') {
				            formOneData.massageStylesTwo.thai = null;
				        }
				        if (formOneData.massageStylesTwo.reflexology == undefined || formOneData.massageStylesTwo.reflexology == false || formOneData.massageStylesTwo.reflexology == 'null') {
				            formOneData.massageStylesTwo.reflexology = null;
				        }
				        if (formOneData.massageStylesTwo.swedish == undefined || formOneData.massageStylesTwo.swedish == false || formOneData.massageStylesTwo.swedish == 'null') {
				            formOneData.massageStylesTwo.swedish = null;
				        }
				        if (formOneData.massageStylesTwo.chinese == undefined || formOneData.massageStylesTwo.chinese == false || formOneData.massageStylesTwo.chinese == 'null') {
				            formOneData.massageStylesTwo.chinese = null;
				        }
				        if (formOneData.massageStylesTwo.others == undefined || formOneData.massageStylesTwo.others == false || formOneData.massageStylesTwo.others == 'null') {
				            formOneData.massageStylesTwo.others = null;
				        }


				        userinfo.massageStylesTwoOther = (formOneData.massageStylesTwo.others === 'others') ? formOneData.massageStylesTwoOther : '';
				        var string1 = formOneData.massageStylesTwo;
				        var res1 = Object.keys(string1).map(function(v1) {
				            return string1[v1];
				        }).join();

				        userinfo.massageStylesTwo = res1.replace(/([,])+/g, ",");

				    }


				    // Instance Modal End
				    var uid = $window.localStorage.uid;
				    // $scope.geoCode();
				    var params = {
				        userinfo: userinfo,
				        userId: uid,
				    };

				    if (typeof $scope.profilePicture == 'undefined') {

				        $http.post($rootScope.STATIC_URL + 'phase2/userProfileEdit', params).success(function(response) {
				            $rootScope.showloader = false;
				            if (response.status === 1) {
				                $rootScope.profileUpdated = true;
				                $scope.buttonDisabled = false;
				                console.log("==================");
				                console.log(response.data);
				                $scope.errorMessage = "Profile details updated successfully.";
				                reConnectSocket();
				                $location.path('/myprofile');
				            }

				        }).error(function(err) {
				            console.log("ERROR" + err);
				        });
				    } else {
				        $http.post($rootScope.STATIC_URL + 'phase2/uploadProPic', fd, {
				            transformRequest: angular.identity,
				            headers: {
				                'Content-Type': undefined
				            }
				        }).success(function(response) {

				            if (response.status === 1) {
				                var loader = false;
				                $rootScope.updateUserInfo();

				                params.userinfo.profilePic = response.data;


				                var json_object = JSON.parse($window.localStorage.user);
				                json_object["profilePic"] = response.data;
				                localStorage["user"] = JSON.stringify(json_object);
				                console.log($window.localStorage.user);

				                $http.post($rootScope.STATIC_URL + 'phase2/userProfileEdit', params).success(function(response) {

				                    if (response.status === 1) {
				                        reConnectSocket();
				                        $timeout(function() {

				                            $rootScope.showloader = false;
				                            $scope.buttonDisabled = false;
				                            $rootScope.profileUpdated = true;
				                            $scope.errorMessage = "Profile details updated successfully.";
				                            $location.path('/myprofile');
				                        }, 8000);
				                    }

				                }).error(function(err) {
				                    console.log("ERROR" + err);
				                });


				            } else {
				                $scope.errorMessage = "Error in updating user fields.";
				            }

				        }).error(function(err) {
				            console.log("ERROR" + err);
				        });
				    }
				    console.log("dataRes==");
				    console.log(dataResult);

				} else {
					$timeout(function () {
						angular.element("[name='" + profileForm.$name + "']").find('.ng-invalid:visible:first').focus();
					},1000);
				}
			}

			$scope.uncheckGender = function () {
				if($scope.formOneData.seeking_both)
				{
					$scope.formOneData.seeking_both = false;
				}
			};
			$scope.seekingBoth = function () {


				if($scope.formOneData.seeking_male == 'male')
				{
					$scope.formOneData.seeking_male = '';
				}
				if($scope.formOneData.seeking_female == 'female')
				{
					$scope.formOneData.seeking_female = '';
				}
			};

			$scope.uncheckMassageType = function () {
				if($scope.formOneData.personOneMassageType_both)
				{
					$scope.formOneData.personOneMassageType_both=false;
				}
			};
			$scope.massageTypeBoth = function () {

				if($scope.formOneData.therapeuticMassageOne == 'therapeutic')
				{
					$scope.formOneData.therapeuticMassageOne = '';
				}
				if($scope.formOneData.sensualMassageOne == 'sensual')
				{
					$scope.formOneData.sensualMassageOne = '';
				}
			};


			$scope.uncheckPreferMassageType = function () {
				if($scope.formOneData.prefer_MassageType_both)
				{
					$scope.formOneData.prefer_MassageType_both=false;
				}
			};
			$scope.preferMassageTypeBoth = function () {

				if($scope.formOneData.prefer_therapeuticMassage == 'therapeutic')
				{
					$scope.formOneData.prefer_therapeuticMassage = '';
				}
				if($scope.formOneData.prefer_sensualMassage == 'sensual')
				{
					$scope.formOneData.prefer_sensualMassage = '';
				}
			};


			$scope.uncheckPreferMassage = function () {
				if($scope.formOneData.prefer_massage_both)
				{
					$scope.formOneData.prefer_massage_both = false;
				}
			};
			$scope.preferMassageBoth = function () {

				if($scope.formOneData.prefer_massage_exchange == 'exchange')
				{
					$scope.formOneData.prefer_massage_exchange = '';
				}
				if($scope.formOneData.prefer_massage_paid == 'paid')
				{
					$scope.formOneData.prefer_massage_paid = '';
				}
			};

		}
	]);






(function () {
    'use strict';

    angular
        .module('myProfileMain')
        .factory('myProfile', myProfile);

	//myProfile
    myProfile.$inject =
    ['$routeParams', '$rootScope', '$http', '$location', '$window'];

	function myProfile($routeParams, $rootScope, $http, $location, $window){

		var service = {};

		service.getMyProfile = getMyProfile;
		service.getYears     = getYears;
		service.getAge       = getAge;
		return service;

		function getMyProfile(CB) {
            $http.post($rootScope.STATIC_URL + 'users/getUserDetails').success(function (response) {

				console.debug('response');
				CB(response);

            }).error(function (err) {
                console.log("ERROR" + err);
            });
		}

		function getYears() {
			var today = new Date();
			var years=[];
			// var dd = today.getDate();
			//  var mm = today.getMonth()+1; //January is 0!
			var currentYear = today.getFullYear();
			var yearLimit=currentYear-18;
			for (var i=yearLimit;i>1930;i--)
			{
				years.push(i);
			}
			return years;
		};

		function getAge(dateString) {
			var today = new Date();
			var birthDate = new Date(dateString);
			var age = today.getFullYear() - birthDate.getFullYear();
			var m = today.getMonth() - birthDate.getMonth();
			if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
				age--;
			}
			return age;
		}
	}

})();

'use strict';

angular
	.module("othersProfileMain", ['gm'])
	.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {
	/*
	$routeProvider
		.when("/profile/:id", {
			templateUrl: "othersProfile/othersProfile.html",
			controller: "otherProfileNewCtrl",
			access: {
				requiresLogin: true,
				clientSide: 'USER',
				page: 'USR_NOTLOG'
			},
		});
		$locationProvider.html5Mode(true);
		*/
}]);

'use strict';
/* quickSignupController */

angular
	.module('othersProfileMain')
	.controller('otherProfileNewCtrl', [
		'$scope',
		'$routeParams',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$timeout',
		'$interval',
		'$uibModal',
		'$compile',
		'$route',
		'myProfile',
		'quickSignup',
		function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $interval, $uibModal, $compile, $route, myProfile, quickSignup){

			console.log(" otherProfileCtrl --------------------------------------------");
			$scope.sendKey = function(userId){
				console.log("userId ---"+userId);
					if(userId){

	                $rootScope.showloader = true;
	                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: userId } );

	                promise.then(

	                    function(response) {

	                        $rootScope.showloader = false;

	                        $scope.modalSubmit = false;

	                        if(response && response.data && response.data.status === 1 ){

	                            $scope.photoKey = response.data.data.key;

	                            $scope.error = false;

	                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


	                            var appendText = '';
	                        //console.log(response);
	                        if(response.data.data.callbackVar !== ''){
	                            var appendText = 'to ' + response.data.data.callbackVar;
	                        }
	                        $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent ' + appendText });

	                        $rootScope.showloader = false;


	                    }else{

	                        $scope.error = response.data.message;
	                        $rootScope.showloader = false;
	                    }
	                },
	                function(errorresponse) {

	                    $log.error('failure loading data', errorresponse);
	                }
	                );
	            }else{
	                $rootScope.addAlert({ status: false, message: 'Invalid Link' });
	                $rootScope.showloader = false;
	            }
			};
			console.log($rootScope.previousUrlLoaded);
			var urlFromMailBox = false;
			if($rootScope.previousUrlLoaded){
					console.log($rootScope.previousUrlLoaded.split('mailbox'));
					console.log($rootScope.previousUrlLoaded.split('mailbox').length);
					if($rootScope.previousUrlLoaded.split('mailbox').length != 1){
						 urlFromMailBox = true;
					}
			}
			//$rootScope.getAllCountOtherProfile();
			var token    = $window.localStorage.userToken;
			var uid      = $window.localStorage.uid;

			$scope.username = (JSON.parse($rootScope.user).username);
			$scope.urlLink=Config.STATIC_URL;


			var params ={objectUserId:$routeParams.id};

				//Get Home Location
			 $http.post($rootScope.STATIC_URL + 'travelLocations/getOthersHomeLocation',{userId: $routeParams.id }).success(function (response) {
				// alert(JSON.stringify(response));
				if (response.status == 1)
				{
					console.log("get others home Location Response");
					console.log(response);
					$scope.homeLocation = response.data;
				}


			}).error(function () {
				$scope.errorMessage = "Please Try Again";
				$timeout(function () {
					$scope.errorMessage = false;
				}, 3000);
			});

			$http
				.post($rootScope.STATIC_URL + 'users/getOtherUserDetails', {objectUserId:$routeParams.id, urlFromMailBox: urlFromMailBox})
				.success(function (response) {

				if (response.status === 1) {
					$scope.profile = response.data[0];
					if($scope.profile==''||$scope.profile==undefined)
					{
						$scope.ERROR = "You don't have the permission to access this page";
						return false;
					}
					else
					{
						var gender=$scope.profile.gender;
						if((gender=='male_female_couple') ||(gender== 'gay_couple' )||(gender=='lesbian_couple'))
						{
							$scope.couple=true;
						}
						$scope.travelLocations   = response.data1;
						$scope.seeking           = response.data2[0];
						$scope.profile.ageOne    = quickSignup.getAge($scope.profile.dobOne);
						$scope.otherUserConversation   = response.conversation;
						console.log('success---'+$scope.otherUserConversation);
						console.log('profile---'+JSON.stringify($scope.profile));
						if(response.data1.length>=1)
						{
							var len = 0;
							for(var i=0;i<response.data1.length;i++)
							{
								if(response.data1[i].travelStart)
								{
									len=len+1;
									console.log(len);
								}
							}
							$scope.travelCount= len;
						}
						else
						{
							$scope.travelCount=null;
						}

						if($scope.profile.profilePic)
						{
							
							$rootScope.otherProfilePic = Config.STATIC_URL+'images/profilePics/'+$scope.profile.username+'/thumb/'+$scope.profile.profilePic;
							$rootScope.otherProfilePicExist=1;
							$rootScope.otherProfilePicNoThumb = Config.NODE_ASSETS+'profilePics/'+$scope.profile.username+'/'+$scope.profile.profilePic;
							//$rootScope.otherProfilePicNoThumb = Config.STATIC_URL+'images/profilePics/'+$scope.profile.username+'/'+$scope.profile.profilePic;
							
						}
						else
						{
							
							//$rootScope.otherProfilePic = Config.STATIC_URL+'images/profilePics/default/default.png';
							$rootScope.otherProfilePic = "https://cdn.zenbrisa.com/profilePics/default/default.png";
							$rootScope.otherProfilePicExist=0;
							
						}
						$scope.iframeSrc         = "https://maps.google.com/maps?q="+$scope.profile.latitude+","+$scope.profile.longitude+"&z=14&output=embed";
					}
					var params = {
						objectUserId:$routeParams.id,
						senderName  :JSON.parse($window.localStorage.user).username,
						receiverEmail:$scope.profile.email,
						receiverName:$scope.profile.username
					};

					$http.post($rootScope.STATIC_URL + 'users/setProfileViewMail', params).success(function (response) {
						if (response.status === 1) {
							if(response.data)
							{
								$scope.privateNote       = response.data;
								console.log($scope.privateNote);
							}
							else
							{
								console.log("No private notes");
							}
						}
					}).error(function (err) {
						console.log("ERROR" + err);
					});
				}
			}).error(function (err) {
				console.log("ERROR" + err);
			});

			// function to check review post is possible or not
			$http
				.post($rootScope.STATIC_URL + 'users/postReviewOrNot', {reviewedOnId:$routeParams.id})
				.success(function (response) {
				if(response.status==4){
					$scope.postNot=true;
				}else{
					$scope.postYes=true;
				}
			}).error(function (err) {
				console.log("ERROR" + err);
			});
			//*** upto this

			$scope.alertPostNot = function(username){
				var reviewedOnName=username;
				alert("You must have received (and read) at least one e-mail from "+reviewedOnName+" within the past 30 days to write a review");
			}

			$scope.getPrivateNotes = function(){

				$http
					.post($rootScope.STATIC_URL + 'privateNotes/getPrivateNotes', params)
					.success(function (response) {
					if (response.status === 1) {
						if(response.data){
							$scope.privateNotes       = response.data;
							$scope.privateNote        = $scope.privateNotes.note;
						}else{
							console.log("No private notes");
						}
					}
				}).error(function (err) {
					console.log("ERROR" + err);
				});
			}

			$scope.getPrivateNotes();
			//Write private notes
			$scope.writeNote = function(privateNote)
			{
				var params = {
					objectUserId:$routeParams.id,
					privateNote  :privateNote
				};
				$http
					.post($rootScope.STATIC_URL + 'privateNotes/writePrivateNotes', params)
					.success(function (response) {
					if (response.status === 1) {
						$scope.privateNote    = "";
						$scope.displaynoteBox = false;
						$scope.getPrivateNotes();
					}
				}).error(function (err) {
					console.log("ERROR" + err);
				});
			}

			$scope.cancel = function(){
				$scope.displaynoteBox    = false;
				$scope.privateNotes.note = $scope.privateNote;
			}

			// Add to favourite  from other profile
			$scope.addtofavourite = function( id, email, username ){
				var x          = $routeParams.id;
				var favName    = username;
				var messageFav = "<strong>" + favName+"</strong> has been marked as your favorite";
				//function to check current user is in blockedList

				// Upto this
				var params = {
					favId: id,
					favEmail:email
				};

				if( id && $scope.blockYes == false ){
					$http
						.post($rootScope.STATIC_URL + 'users/addToFavourite', params)
						.success(function (response) {
							console.log(response);
							if(response.status==1){
								$scope.favYes = true;
								var Successresponse = { status:true, message:messageFav };
								$rootScope.addAlert(Successresponse); // Display server response status message
							}
						}).error(function (err) {
							console.log("ERROR" + err);
						});
				}else if(id && $scope.blockYes == true ){
					alert(favName+ "  is in your blocked list. So you cant make him favorite!");
				}
			};

			// Make unfavourite from other-profile
			$scope.makeUnfavourite = function( id, username ){

				var favid      = $routeParams.id;
				var favName    = username;
				var messageFav = "<strong>" + favName+"</strong> has been removed from your favorites list";
				var params = {
					favUserId : id
				};
				if(id){
					$http
						.post($rootScope.STATIC_URL + 'users/makeUnFavourite', params)
						.success(function(response){
							$scope.favHide = response;
							$scope.favYes  = false;
							var Successresponse = { status:true, message:messageFav };
							$rootScope.addAlert(Successresponse); // Display server response status message
					}).error(function(err){
						console.log("Error"+err);
					});
				}
			};

			// For posting a review
			$scope.postReview = function( profileId, rating ){
				var messageRev      = "Your review has been submitted successfully. You will be notified when Moderator approves your review.";
				var mandatoryMessag = "All fields are mandatory";
				var Titlename       = $scope.name;
				var description     = $scope.description;
				var reviewedOnId    = profileId;
				var params = {
					reviewedOnId  :reviewedOnId,
					reviewTitle :Titlename,
					reviewNote:description,
					ratingValue:rating
				};

				if(Titlename && description && rating){
					$http
						.post($rootScope.STATIC_URL + 'users/addReview', params)
						.success(function (response) {
							if (response.status == 1) {
								var Successresponse={status:true,message:messageRev};
								$rootScope.addAlert(Successresponse);
								$scope.name        = "";
								$scope.rating      = 1;
								$scope.reset       = 0;
								$scope.description = "";
								$timeout( function() {
									$route.reload();
								},3000 );
							}
							else{
								$('#postReview').modal('hide');
								$scope.name="";
								$scope.description="";
								$scope.reset=0;
								alert("You are not able to review on him");
							}
					}).error(function (err) {
						$('#postReview').modal('hide');
						$scope.name        = "";
						$scope.description = "";
						$scope.reset       = 0;
					});

				}else if(!rating&&Titlename&&description){
					var starRatingMessage = "You haven't given any rating!";
					var Successresponse   = { status:false, message:starRatingMessage };
					$rootScope.addAlert(Successresponse);
				}else{
					var Successresponse={status:false,message:mandatoryMessag};
					$rootScope.addAlert(Successresponse);
				}
			}



			// Function for getting other profile received reviews
			$scope.getOtherReceivedReviews = function(){
				var myId=$window.localStorage.uid;
				console.log("$window.localStorage.id"+$window.localStorage.uid);
				console.log("inside getOtherReceivedReviews");
				var otherProfileId=$routeParams.id;
				console.log("other profileId=="+otherProfileId);
				var params={
					otherprofileId:otherProfileId
				};
				var otherReceivedReviews = $http.post($rootScope.STATIC_URL + 'users/getOtherReceivedReviews',params);
				otherReceivedReviews
					.then(function(response){
						$scope.receivedReviews = response.data.data;
						$scope.urlLink = Config.STATIC_URL;
						$scope.myId = myId;
					});
			};

			// Function  for getting other profile penned reviews
			$scope.getOtherPennedReviews = function(){
				var otherProfileId = $routeParams.id;
				var params={
					otherprofileId:otherProfileId
				};
				var otherPennedReviews = $http.post($rootScope.STATIC_URL + 'users/getOtherPennedReviews',params);
				otherPennedReviews
					.then(function(response){
						console.log("**********penned reviews");
						console.log(response);
						$scope.pennedReviews=response.data.data;
						$scope.urlLink=Config.STATIC_URL;
						 //$scope.myId=$window.localStorage.uid;

						  $scope.pennedReviews.myId=$window.localStorage.uid;
						 console.log("*****MyId inside fn*****"+$scope.myId);
						console.log($scope.pennedReviews);
					});
			};
			// Upto this
			$scope.search = function(search)
			{
			   console.log(search.username);
			}


			/*Block user other profile*/
			$scope.blockUser = function(blockUserName,Blockedusremail)
			{
				var blockUsrId   = $routeParams.id;
				var messageBlock = "<strong>" + blockUserName+"</strong> has been blocked";
				if(blockUsrId && $scope.favYes == false )
				{
					$http
						.post(
							$rootScope.STATIC_URL + 'users/blockAUser',
							{
								blockedUserId:$routeParams.id,
								blockedusremail:Blockedusremail
							}
						)
						.success(function (response){
							if(response.status == 1 )
							{
								$scope.blockYes=true;
								var Successresponse={status:true,message:messageBlock};
								$rootScope.addAlert(Successresponse);
							}
							else
							{
								$scope.unBlock=false;
								$scope.blocked=false;
							}

						}).error(function (err) {
							console.log("ERROR" + err);
						});
				}else if( blockUsrId && $scope.favYes == true ){
					alert(blockUserName+ " is in your favorite list. So you cant block him");
				}
			}

			// Unblock a user other profile menu
			$scope.makeUnBlock = function( blockedUser, blockedUsername ){
				var messageUnBlock="<strong>" + blockedUsername+"</strong> has been Un-blocked";
				var params = {
					blockedUserId:blockedUser
				};
				if(blockedUser){
					$http
						.post($rootScope.STATIC_URL + 'users/unblockAUser', params)
						.success(function(response){
						if(response.status==1)
						{
							$scope.blockYes     = false;
							var Successresponse = { status:true, message:messageUnBlock };
							$rootScope.addAlert(Successresponse);
						}
					}).error(function(err){
						console.log("Error"+err);
					});
				}
			};

			$scope.showProfile = function()
			{
				$location.path('/myprofile');
			};

			$scope.composeMailPopup  = function (userIdTo, usernameTo){
				console.log("Welcome to draftMail");
				console.log(userIdTo);
				console.log(usernameTo);
				$scope.compRecId            = userIdTo;
				$scope.composeTo            = usernameTo;
			};

			$scope.popupMailClose = function () {

					$scope.composeSubject               = "";
					$scope.composeMessage               = "";
					$scope.errorMessageComposeMail      = "";
			};

			//send photo key
			 $scope.sendPhotoKey = function(){
			 	console.log('2-------- ');
		    	//console.log('composeTo '+composeTo);
		    	console.log("compRecId------"+$scope.compRecId);
		    	$rootScope.showloader = true;
			                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: $scope.compRecId } );

			                promise.then(

			                    function(response) {

			                        $rootScope.showloader = false;

			                        $scope.modalSubmit = false;

			                        if(response && response.data && response.data.status === 1 ){

			                            $scope.photoKey = response.data.data.key;

			                            $scope.error = false;

			                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


			                            var appendText = '';
			                        //console.log(response);
			                        if(response.data.data.callbackVar !== ''){
			                            var appendText = 'to ' + response.data.data.callbackVar;
			                        }
			                        $rootScope.alert={ status: true, message: 'The Photo Key has been sent ' + appendText };


			                        $rootScope.showloader = false;


			                    }else{

			                        $scope.error = response.data.message;
			                        $rootScope.showloader = false;
			                    }
			                },
			                function(errorresponse) {

			                    $log.error('failure loading data', errorresponse);
			                });
		    	
		    };
			

			// ComposeMail
			$scope.popupMailSubmit = function () {

				$http
					.post($rootScope.STATIC_URL + 'mail/distinctUserMailLimit')
					.success(function (response) {

					if (response.status == 1 && response.message == "failure"){

						$scope.errorMessageComposeMail = "Mail Limit Exceeded ";
						$rootScope.disableButton = false;

					}else{
						$rootScope.disableButton = true;
						var fd                   = new FormData();
						var composeTo            = $scope.composeTo;
						var composeSubject       = $scope.composeSubject;
						var composeMessage       = $scope.composeMessage;
						var receiverId           = $scope.compRecId;

							if(!$scope.composeMessage){
								$scope.errorMessageComposeMail = "Please enter a message and send";
								$rootScope.disableButton = false;
							}else{

								if(!$scope.composeSubject){
									composeSubject = "No Subject";
								}
								var files = [];

								if($scope.replyFileFinalArray){ // Selected Images in Reply Part
									console.log("Entered $scope.replyFileFinalArray ==========))))))))) ");
									for (var i = 0; i < $scope.replyFileFinalArray.length; i++) {

										var fileType    = $scope.replyFileFinalArray[i].type;
										fileType        = fileType.split("/");
										console.log(fileType);
										if(fileType[0] === "image"){
										   files.push($scope.replyFileFinalArray[i]);
										}else{
											$scope.errorMessageComposeMail = "Please select an Image file";
											$timeout(function () {
												$scope.errorMessageComposeMail = false;
											}, 3000);
											return false;
										}
									}
								}

								var replyMailStatus = "sent";
								fd.append('composeTo', composeTo);
								fd.append('composeSubject', composeSubject);
								fd.append('composeMessage', composeMessage);
								fd.append('receiverId', receiverId);
								fd.append('replyMailStatus', replyMailStatus);
								fd.append('sendMailPage', 'true');  // To identify other than draftmail
								if (files) {
									for (var i = 0; i < files.length; i++) {
										fd.append('attachments', files[i]);
									}
								}

								$http
									.post($rootScope.STATIC_URL + 'mail/saveMail', fd, {
										transformRequest: angular.identity,
										headers: {'Content-Type': undefined}

									})
									.success(function (response) {
										if (response.status == 1)
										{
											$rootScope.disableButton = false;
											var sendMailSuccessMsg   = "An email has been sent to <b>"+$scope.composeTo+"<b>";
											var Successresponse = {
												type: 'success',
												status: true,
												message:sendMailSuccessMsg
											};
											$rootScope.addAlert(Successresponse);
											$('#mailFromSearchResult').modal('hide');
											$scope.composeMessage = "";
											$scope.composeTo      = "";
											$scope.composeSubject =  "";
											$scope.composeMessage = "";
											$scope.compRecId      =  "";
											$('.xax').hide();
											$('#reply').show();
											$('#appendReplyAttachFile .replyAttachOuter').remove();
											$timeout(function () {
											   $scope.successMessageCommonMail = false;
											}, 3000);

											if(event.replyFileFinalArray){//Only For Reply Mail Success
												$scope.replyFileFinalArray = "";
											}
										}
								})
								.error(function () {
									$scope.errorMessage = "Please Try Again";
									$timeout(function () {
										$scope.errorMessage = false;
									}, 3000);
								});

							}
					}
				});
			}//Draft Mail Ends popupMailSubmit Ends


			 // Reply Attach

			$scope.replyAttach = function (event) {

				var replyFiles = [];
				var replyFileArray =[];
				var attachReplyElement = angular.element(document.querySelector('#appendReplyAttachFile'));

				for (var i = 0; i < event.target.files.length; i++) {

					var tmppath = URL.createObjectURL(event.target.files[i]);
					// var file = event.files[i];
					if(!$scope.replyFileFinalArray){
						replyFileArray.push(event.target.files[i]);
						$scope.replyFileFinalArray = replyFileArray;
						var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
						'<img class="col-sm-2" src="'+tmppath+'"/>'+
						'<div class="delete col-sm-1 imgclosediv">' +

						'<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

						'</div>' +
						'</div>';
						attachReplyElement.append($compile(attachReplyHtml)($scope));
					}else{
						replyFileArray = $scope.replyFileFinalArray;
						replyFileArray.push(event.target.files[i]);
						$scope.replyFileFinalArray = replyFileArray;
						var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
						'<img class="col-sm-2" src="'+tmppath+'"/>'+
						'<div class="delete col-sm-1 imgclosediv">' +

						'<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

						'</div>' +
						'</div>';
						attachReplyElement.append($compile(attachReplyHtml)($scope));
					}
				}
		   }//Main Function ENDS

		   $scope.removeReply = function(item) {
					console.log("Clicked Remove item =======================------------");
					var selectItem = $scope.replyFileFinalArray[item-1];
					$scope.replyFileFinalArray.splice(item-1, 1);
					console.log($scope.replyFileFinalArray);
		   }

	}
]);





(function () {
    'use strict';

    angular
        .module('myProfileMain')
        .factory('myProfile', myProfile);

	//myProfile
    myProfile.$inject =
    ['$routeParams', '$rootScope', '$http', '$location', '$window'];

	function myProfile($routeParams, $rootScope, $http, $location, $window){

		var service = {};

		service.getMyProfile = getMyProfile;
		service.getYears     = getYears;
		service.getAge       = getAge;
		return service;

		function getMyProfile(CB) {
            $http.post($rootScope.STATIC_URL + 'users/getUserDetails').success(function (response) {

				console.debug('response');
				CB(response);

            }).error(function (err) {
                console.log("ERROR" + err);
            });
		}

		function getYears() {
			var today = new Date();
			var years=[];
			// var dd = today.getDate();
			//  var mm = today.getMonth()+1; //January is 0!
			var currentYear = today.getFullYear();
			var yearLimit=currentYear-18;
			for (var i=yearLimit;i>1930;i--)
			{
				years.push(i);
			}
			return years;
		};

		function getAge(dateString) {
			var today = new Date();
			var birthDate = new Date(dateString);
			var age = today.getFullYear() - birthDate.getFullYear();
			var m = today.getMonth() - birthDate.getMonth();
			if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
				age--;
			}
			return age;
		}
	}

})();

'use strict';

angular
	.module("SearchMain", ['gm'])
	.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {
	$routeProvider
		.when('/searchresults', {
			templateUrl: 'Search/searchresults.html',
			controller: 'searchResultsNewCtrl',
			access: {
				requiresLogin: true,
				clientSide: 'USER',
				page: 'USR_LOG',
				pagename: 'SEARCH_RESULT',
			},
			classes: {
				bodyClassName: 'grey',
			},
		});
		$locationProvider.html5Mode(true);
}]);

'use strict';
/* SearchController */

angular
	.module('SearchMain')
	.controller('searchResultsNewCtrl', [
		'$scope',
		'$routeParams',
		'$timeout',
		'$rootScope',
		'$http',
		'$location',
		'$window',
		'$compile',
		'Search',
		function ($scope, $routeParams,$timeout, $rootScope, $http, $location, $window, $compile, Search){
			$scope.refineSearch  = false;
			$scope.filterSearch  = function(filter){
				//$scope.filter = filter;
				//console.log($scope.filter);
				$rootScope.showloader = true;
				Search.updateSearchFilter($scope.filter, function(response){

					if (response.status == 1)
					{
						// Search using new filter values
						$scope.refineSearch  = true;
						$scope.mainSearch();
					}
					else
					{
						$rootScope.showloader = false;
					   var Successresponse = { status:false, message: 'Error while updating search filter' };
					   $rootScope.addAlert(Successresponse);
					}
				});
			};

			Search.getSearchFilter(function(response){
				if (response.status == 1)
				{
					$scope.filter = response.data;
				}else{
					var Successresponse={ status:false, message: 'Error while initializing search filter' };
					$rootScope.addAlert(Successresponse);
				}
			});

			// Initialise search filter values
			$scope.filter = Search.filterDefault;
			//console.log($scope.filter);
			// Get search filter values form the server

			//console.log("searchResultsNewCtrl Controller");
			//console.log($rootScope.unreadInboxMailCount.urMailCount);
			//console.log(latLngloggedUser);
			//console.log($scope.latLngLoggedUser);
			$rootScope.adminNavigation = 1;
			$scope.currentPage = 0;
			$scope.rowsPerPage = 5;
			$scope.errorMessage = "";
			$scope.STATIC_SAILS_URL  = $rootScope.STATIC_SAILS_URL;
			$rootScope.showloader = true;
			$scope.SearchResultOnlineUsers = {};

			$scope.sentKey = function(userId){
				console.log('userId --- '+userId);
					if(userId){

	                $rootScope.showloader = true;
	                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: userId } );

	                promise.then(

	                    function(response) {

	                        $rootScope.showloader = false;

	                        $scope.modalSubmit = false;

	                        if(response && response.data && response.data.status === 1 ){

	                            $scope.photoKey = response.data.data.key;

	                            $scope.error = false;

	                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


	                            var appendText = '';
	                        //console.log(response);
	                        if(response.data.data.callbackVar !== ''){
	                            var appendText = 'to ' + response.data.data.callbackVar;
	                        }
	                        $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent ' + appendText });

	                        $rootScope.showloader = false;


	                    }else{

	                        $scope.error = response.data.message;
	                        $rootScope.showloader = false;
	                    }
	                },
	                function(errorresponse) {

	                    $log.error('failure loading data', errorresponse);
	                }
	                );
	            }else{
	                $rootScope.addAlert({ status: false, message: 'Invalid Link' });
	                $rootScope.showloader = false;
	            }
			};

			$scope.getSearchResultOnlineUsers = function(data){
				// crete user Ids object
				var uidObj = {};
				if(data && data.length > 0){
					for(var key in data){
						if(data[key].userId){
							uidObj[data[key].userId] = data[key].userId;
						}
					}
					console.debug('data');
					console.debug(data);
					console.log(uidObj);
					try{
						getSearchResultOnlineUsers(uidObj);
					}catch(e){
						// socket error may happen
						console.log(e);
					}
				}else{
					console.log('No data');
				}
			}
			$scope.setSearchResultOnlineUsers = function(list){
				$scope.$apply(function() {
					//console.log('setSearchResultOnlineUsers===================>');
					//console.log(list);
					$scope.SearchResultOnlineUsers = list;
				});
			}
			setSearchResultOnlineUsers = $scope.setSearchResultOnlineUsers;

			//Seach using user name
			$scope.params= $window.localStorage.search
			$scope.searchCriteria=JSON.parse($window.localStorage.search);

			//Search Result function for tinder
			function mobileSearchResultFunction(){
				//***code for tinter
				//var K=$rootScope.searchResults;
				//console.log("isMobile() ++++++++++++++++++++++++++");
				//console.log(isMobile());
				var searchResultsMobileArray=[];
				for(var i = 0; i <= 10; i++){
					console.log('concatinate');
					if(searchResultsMobileArray.length != 0){
							searchResultsMobileArray = $rootScope.searchResults.concat(searchResultsMobileArray);
					}
					else{
							searchResultsMobileArray = $rootScope.searchResults.concat($rootScope.searchResults);
					}
				}
				//console.log(searchResultsMobileArray);
				//console.log("length:result"+ $rootScope.searchResults.length);
				$rootScope.searchResultsMobile =  $rootScope.searchResults;
		//		$rootScope.searchResultsMobile = searchResultsMobileArray;


			}

			$scope.mainSearch = function () {
				var switchKey = $scope.searchCriteria.searchField;
				switch(switchKey){

					case 'city' :

						 //console.log("case CITYYYYYYY>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<   $scope.searchCriteria.cityLat");
						 //console.log($scope.searchCriteria.cityLat);
						 //console.log($scope.searchCriteria.cityName);
						 //console.log($scope.searchCriteria.cityLocType);
						if($scope.searchCriteria.cityLocType == "city")
						{
							var R               = 3958.756;//For miles
							var pi              = 3.14159;
							var maxLat          = parseFloat($scope.searchCriteria.cityLat) + ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
							var minLat          = parseFloat($scope.searchCriteria.cityLat) - ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
							var maxLong         = parseFloat($scope.searchCriteria.cityLng) + (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);
							var minLong         = parseFloat($scope.searchCriteria.cityLng) - (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);


							//console.log("maxLat ================================phase 2222222222222=========================}}}}}}}");
							console.log(maxLat);
							console.log(minLat);
							console.log(maxLong);
							console.log(minLong);
						}

						//Radius Search Results
						var request = {
							maxLat: maxLat,
							minLat: minLat,
							maxLong: maxLong,
							minLong: minLong,
							cityname: $scope.searchCriteria.cityName,
							cityLocType: $scope.searchCriteria.cityLocType,
							filter: $scope.refineSearch
						};
						$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/cityRadiusSearch',{request: request})
							.success(function (response) {
							if (response.status == 1)
							{
								$scope.getSearchResultOnlineUsers(response.data);
								$rootScope.showloader = false;
								//$rootScope.showloader = false;
								//console.log("cityRadiusSearch");
								//console.log(response);
								$rootScope.searchResults = response.data;

								/* ============================  group the ng-repeat array into two  ========================================= */

								var indexedAdProfStatus = [];

								$scope.adprofStatusToFilter = function() {
									indexedAdProfStatus = [];
									return $rootScope.searchResults;
								}

								$scope.filterSearchResults = function(sResult) {
									var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
									if (adProfStatusIsNew) {
										indexedAdProfStatus.push(sResult.adProfStatus);
									}
									return adProfStatusIsNew;
								}

									/* =============================  group the ng-repeat array into two   ======================================== */

								if(isMobile() == true){
									 mobileSearchResultFunction();
								}

								for(var i=0;i<=$rootScope.searchResults.length;i++){
									console.log("i");
									console.log(i);
									console.log($rootScope.searchResults[i]);
									if($rootScope.searchResults[i].favourite != null){
									   $rootScope.searchResults[i].unFavourite=true;
									   $rootScope.searchResults[i].favourite=true;
									}
									else{
										$rootScope.searchResults[i].favourite=false;
										$rootScope.searchResults[i].unFavourite=false;
									}
									if($rootScope.searchResults[i].blocked != null){
										$rootScope.searchResults[i].blocked=true;
										$rootScope.searchResults[i].unBlock=true;
									}
									else{
										$rootScope.searchResults[i].blocked=false;
										$rootScope.searchResults[i].unBlock=false;
									}
									if($rootScope.searchResults[i].adProfStatus == 'adActive'){
										$rootScope.searchResults[i].adProfTitle = 'Advertising Members';
									}else{
										$rootScope.searchResults[i].adProfTitle = 'Balance of Members';
									}
								}
							}
						}).error(function () {
							$scope.errorMessage = "Please Try Again";
							$timeout(function () {
								$scope.errorMessage = false;
							}, 3000);
						});
					// $rootScope.showloader = false;
					break;

					case 'country':

						var request = {
							selectedCountryArray: $scope.searchCriteria.selectedCountryArray,
							filter: $scope.refineSearch
						};
						$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/countrySearch',{request: request})
							.success(function (response) {
							if (response.status == 1)
							{
								$scope.getSearchResultOnlineUsers(response.data);
								$rootScope.showloader = false;
								//console.log("country Search Response");
								//console.log(response);
								$rootScope.searchResults = response.data;

								/* ============================  group the ng-repeat array into two  ========================================= */

								var indexedAdProfStatus = [];

								$scope.adprofStatusToFilter = function() {
									indexedAdProfStatus = [];
									return $rootScope.searchResults;
								}

								$scope.filterSearchResults = function(sResult) {
									var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
									if (adProfStatusIsNew) {
										indexedAdProfStatus.push(sResult.adProfStatus);
									}
									return adProfStatusIsNew;
								}

								/* =============================  group the ng-repeat array into two   ======================================== */

								if(isMobile() == true){
									mobileSearchResultFunction();
								}
								for(var i=0;i<=$rootScope.searchResults.length;i++){
									//console.log("i");
									//console.log(i);
									console.log($rootScope.searchResults[i]);
									if($rootScope.searchResults[i].favourite != null){
									   $rootScope.searchResults[i].unFavourite=true;
									   $rootScope.searchResults[i].favourite=true;
									}
									else{
										$rootScope.searchResults[i].favourite=false;
										$rootScope.searchResults[i].unFavourite=false;
									}
									if($rootScope.searchResults[i].blocked != null){
										$rootScope.searchResults[i].blocked=true;
										$rootScope.searchResults[i].unBlock=true;
									}
									else{
										$rootScope.searchResults[i].blocked=false;
										$rootScope.searchResults[i].unBlock=false;
									}

									if($rootScope.searchResults[i].adProfStatus == 'adActive'){
										$rootScope.searchResults[i].adProfTitle = 'Advertising Members';
									}else{
										$rootScope.searchResults[i].adProfTitle = 'Balance of Members';
									}
								}
							}
						}).error(function () {
							$scope.errorMessage = "Please Try Again";
							$timeout(function () {
								$scope.errorMessage = false;
							}, 3000);
						});
						//$rootScope.showloader = false;

					break;

					default:

						//Get min, max latitude and min,max longitude of LoggedUser
						$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/getLatLngLoggedUser')
							.success(function (response) {
							if (response.status == 1)
							{
								//console.log(response);
								//console.log("---------------------------------------------++++++++++++++++++++++++++");
								$scope.latLngLoggedUser         = response.data;
								$scope.milesSearchFromsettings  = response.dataMiles;
								if($scope.milesSearchFromsettings === undefined){
									console.error('milesSearchFromsettings not found');
								}

								//console.log("=========$scope.latLngLoggedUser==========");
								//console.log($scope.latLngLoggedUser);
								//console.log("=========$scope.milesSearchFromsettings==========");
								//console.log($scope.milesSearchFromsettings);
								//console.log("Get min, max latitude and min,max longitude of LoggedUser");

								var R               = 3958.756;//For miles
								var pi              = 3.14159;
								var maxLat          = parseFloat($scope.latLngLoggedUser.latitude) + ((parseFloat($scope.milesSearchFromsettings/R))*(180/Math.PI));
								console.log(parseFloat($scope.latLngLoggedUser.latitude));
								console.log(parseFloat($scope.milesSearchFromsettings/R));
								console.log(((parseFloat($scope.milesSearchFromsettings/R))*(180/Math.PI)));
								var minLat          = parseFloat($scope.latLngLoggedUser.latitude) - ((parseFloat($scope.milesSearchFromsettings/R))*(180/Math.PI));
								var maxLong         = parseFloat($scope.latLngLoggedUser.longitude) + (parseFloat($scope.milesSearchFromsettings)/R/Math.cos(parseFloat($scope.latLngLoggedUser.latitude) * (Math.PI/180)))*(180/Math.PI);
								var minLong         = parseFloat($scope.latLngLoggedUser.longitude) - (parseFloat($scope.milesSearchFromsettings)/R/Math.cos(parseFloat($scope.latLngLoggedUser.latitude) * (Math.PI/180)))*(180/Math.PI);

								console.log([maxLat,minLat,maxLong,minLong]);



								var onSearchCallback = function (response){
									//console.log('onSearchCallback...........................');
									//console.log(response);
									if (response.status == 1)
									{
										$scope.getSearchResultOnlineUsers(response.data);
										$rootScope.showloader = false;
										$scope.searchdata=JSON.parse($window.localStorage.search);
										$rootScope.searchResults = response.data;

										/* ============================  group the ng-repeat array into two  ========================================= */

										var indexedAdProfStatus = [];

										$scope.adprofStatusToFilter = function() {
											indexedAdProfStatus = [];
											return $rootScope.searchResults;
										}

										$scope.filterSearchResults = function(sResult) {
											var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
											if (adProfStatusIsNew) {
												indexedAdProfStatus.push(sResult.adProfStatus);
											}
											return adProfStatusIsNew;
										}

										/* =============================  group the ng-repeat array into two   ======================================== */

										if(isMobile() == true){
											   mobileSearchResultFunction();
										}

										for(var i=0;i<$rootScope.searchResults.length;i++){
											//console.log("i");
											//console.log(i);
											//console.log($rootScope.searchResults);
											if($rootScope.searchResults[i].favourite != null){
												$rootScope.searchResults[i].unFavourite=true;
												$rootScope.searchResults[i].favourite=true;
											}
											else{
												$rootScope.searchResults[i].favourite=false;
												$rootScope.searchResults[i].unFavourite=false;
											}

											if($rootScope.searchResults[i].blocked != null){
												$rootScope.searchResults[i].blocked=true;
												$rootScope.searchResults[i].unBlock=true;
											}
											else{
												$rootScope.searchResults[i].blocked=false;
												$rootScope.searchResults[i].unBlock=false;
											}

											if($rootScope.searchResults[i].adProfStatus == 'adActive'){
												$rootScope.searchResults[i].adProfTitle = 'Advertising Members';
											}else{
												$rootScope.searchResults[i].adProfTitle = 'Balance of Members';
											}
										}

										$scope.fav="Favourite";
										$scope.unFav="Un-Favourite";
										// $window.localStorage.searchResults =  JSON.stringify($rootScope.searchResults);

									}else if(response && response.data && response.data.length <=0 ){
										$scope.searchMessage="No matching data"
									}
									$rootScope.searchResults2 = $rootScope.searchResults;
								}

								$scope.searchResultUpdate = function(response){
									//console.log('in searchResultUpdate...............................');
									$scope.$apply(function() {
										console.log('in after apply...............................');
										onSearchCallback(response);
									});
								}
								searchResultUpdate = $scope.searchResultUpdate; // RHS fn defined in chat-handler.js

								if($scope.searchCriteria.searchField == 'online' ){
									//console.log('in online...............................');
									//console.log($scope.searchCriteria);
									if($scope.refineSearch){
										searchOnlineUsers($scope.filter);
									}else{
										searchOnlineUsers();
									}
								}else{
								   //Radius Search Results
								   var requestLatLng = {maxLat: maxLat, minLat: minLat, maxLong: maxLong, minLong: minLong};
								   //var request1=JSON.stringify(request1);
								   //var request = request1.concat($scope.params);
								   console.log($scope.params);
								   console.log(requestLatLng);

									console.log(JSON.parse($scope.params));
									console.log(angular.merge(JSON.parse($scope.params), requestLatLng));
								   //console.log($.extend( true, request1,$scope.params));
								   //console.log(request);
								   var request = angular.merge(JSON.parse($scope.params), requestLatLng);
								   request.filter = $scope.refineSearch;

									$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/commonSearch',{request : request}).success(function (response) {
										//console.log("$rootScope.showloader =======>>>>");
										//console.log(response);
										onSearchCallback(response)
									}).error(function () {
										$scope.errorMessage = "Please Try Again";
										$timeout(function () {
											$scope.errorMessage = false;
										}, 3000);
									});
								}
							}
						}).error(function () {
							$scope.errorMessage = "Please Try Again";
							$timeout(function () {
								$rootScope.errorMessage = false;
							}, 3000);
						});
					break;
				}
			};

			$scope.mainSearch(); // Don't use self invoke for this function



			//$rootScope.searchResults     = $window.localStorage.searchResults;

			// console.log($rootScope.searchResults);
			var searchResults        = $rootScope.searchResults;
			var profilePic           = $rootScope.profilePic;

			/*   $scope.refreshTinder = function(){
				$rootScope.searchResults2 = $rootScope.searchResults;
				for(var i = 0; i <= 10; i++){
					$rootScope.searchResults2.concat($rootScope.searchResults);
				}
			};*/

			//*** alert for not able to post
			$scope.alertPostNot = function(username){
				var reviewedOnName=username;
				alert("You must have received (and read) at least one e-mail from "+reviewedOnName+" within the past 30 days to write a review");
			}


			//*** function to add as favourite  searchresult page
			$scope.addtofavourite= function(id,name,email,index){
				console.log("$$$make favourite");
				var favName=name;
				var messageFav="<strong>" + favName+"</strong> has been marked as your favorite";
				console.log("**************"+favName);

				var params = {
					favId: id,
					favEmail:email
				};

				if(id && !$rootScope.searchResults[index].blocked==true){
				  $http.post($rootScope.STATIC_URL + 'users/addToFavourite', params).success(function (response) {
				   console.log(response);
				   var Successresponse={status:true,message:messageFav};
				   $rootScope.addAlert(Successresponse);
				   $rootScope.searchResults[index].favourite=true;
				   $rootScope.searchResults[index].unFavourite=true;


			   }).error(function (err) {
				console.log("ERROR" + err);
			});
			}
			//test code
			  else if(id && $rootScope.searchResults[index].blocked==true ){
				alert(favName+ " is in your blocked list. So you cant make him favorite ");
			  }
			//upto this
			};
			///*** function to make as un-favourite   search result page
			$scope.makeUnfavourite=function(id,favusername,index){
				console.log("username" +favusername);
				console.log("favUserId"+id);
				var favUserId=id;
				var favName=favusername;
				var messageFav="<strong>" + favName+"</strong> has been removed from your favorites list";
				console.log(favUserId);
				var params = {
					favUserId:id
				};
				if(favUserId){
					$http.post($rootScope.STATIC_URL + 'users/makeUnFavourite', params).success(function(response){
						$scope.favHide=response;
						console.log(response);
						console.log("success");
						var Successresponse={status:true,message:messageFav};

						$rootScope.addAlert(Successresponse);

						$rootScope.searchResults[index].favourite=false;
						$rootScope.searchResults[index].unFavourite=false;
					}).error(function(err){
						console.log("Error"+err);
					});
				}
			};

			/*Block user for searchresult page*/
			$scope.blockUser = function(blockUserId,username,index,blockEmail)
			{

				console.log("index to unbloc"+index);

				var favName=username;
				var messageFav="<strong>" + favName+"</strong> has been blocked!";
				if(blockUserId && !$rootScope.searchResults[index].favourite==true)
				{
				   $http.post($rootScope.STATIC_URL + 'users/blockAUser', {blockedUserId:blockUserId,blockedusremail:blockEmail}).success(function (response){
					   if(response.status==1)
					   {
						 var Successresponse={status:true,message:messageFav};
						 $rootScope.addAlert(Successresponse);
						 console.log($rootScope.searchResults[index]);
						 $rootScope.searchResults[index].unBlock=true;
						 $rootScope.searchResults[index].blocked=true;
					 }
					 else
					 {
					  $scope.unBlock=false;
					  $scope.blocked=false;
				  }

			  }).error(function (err) {
				console.log("ERROR" + err);
			});
			}
			else if(blockUserId && $rootScope.searchResults[index].favourite==true){
			alert(favName+" is in your favorite list. So you cant block him ");
			}

			}
			/*un-block a user for searchresult page*/
			$scope.makeUnBlock=function(blockedUser,username,index){
			$scope.unblockUserName=username;
			var favName=username;
			var messageFav="successfully Un-blocked "+favName+"!";
			$scope.showBlockedUser=true;
			var params = {
				blockedUserId:blockedUser
			};
			if(blockedUser){
				$http.post($rootScope.STATIC_URL + 'users/unblockAUser', params).success(function(response){
				  if(response.status==1)
				  {
					var Successresponse={status:true,message:messageFav};
					$rootScope.addAlert(Successresponse);

					$rootScope.searchResults[index].unBlock=false;
					$rootScope.searchResults[index].blocked=false;

					console.log(response);

					console.log("success");
				}


			}).error(function(err){
				console.log("Error"+err);
			});
			}
			};



			/*
			$scope.$on("$destroy", function(){
				 console.log("Destroying Controller");
				 delete $window.localStorage.search;
			});
			*/


			/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   */
				$scope.composeMailPopup  = function (userIdTo, usernameTo){
					console.log(userIdTo);
					console.log(usernameTo);
					$scope.compRecId            = userIdTo;
					$scope.composeTo            = usernameTo;
				}
			   /* $scope.popupMailSubmit  = function (popupSubjectTo, popupMessageTo){

					console.log("popup submit");
					console.log(popupSubjectTo);
					console.log(popupMessageTo);
					console.log($scope.$parent.popupMessageTo);
					$('#mailFromSearchResult').modal('hide');
				}*/




				$scope.popupMailClose = function () {
						$scope.composeSubject               = "";
						$scope.composeMessage               = "";
						$scope.errorMessageComposeMail      = "";
				}

			// ComposeMail
			$scope.popupMailSubmit = function () {


			 $http.post($rootScope.STATIC_URL + 'mail/distinctUserMailLimit').success(function (response) {
					 if (response.status == 1 && response.message == "failure")
					  {
						   //$( "#chat_window_common" ).hide();
						   //$scope.closeComposeMailTab();
						   console.log("Limmmmmmmmmmmmmmmmmmmmmmmmmmmitttttttttttttttttttt");
						   $scope.errorMessageComposeMail = "Mail Limit Exceeded";
						   $rootScope.disableButton = false;

					  }else{

						   if(!$scope.composeMessage){
										$scope.errorMessageComposeMail = "Please enter a message and send";
										$rootScope.disableButton = false;
							}else{

									if(!$scope.composeSubject){
										composeSubject = "No Subject";
									}

								$rootScope.disableButton = true;
								console.log("Welcome to draftMail");
								var fd                      = new FormData();
								var composeTo               = $scope.composeTo;
								var composeSubject          = $scope.composeSubject;
								var composeMessage          = $scope.composeMessage;
								var receiverId              = $scope.compRecId;
								console.log($scope.compRecId);
								console.log(composeSubject);
								console.log(composeMessage);
								$scope.successMessageCommonMail = "Sending";
							   // var replyMailStatus;// To save reply as sent
								var files = [];
								if($scope.replyFileFinalArray){ // Selected Images in Reply Part
									  console.log("Entered $scope.replyFileFinalArray ==========))))))))) ");
										for (var i = 0; i < $scope.replyFileFinalArray.length; i++) {

											var fileType    = $scope.replyFileFinalArray[i].type;
											fileType        = fileType.split("/");
											console.log(fileType);
											if(fileType[0] === "image"){
											   files.push($scope.replyFileFinalArray[i]);
											}else{
												$scope.errorMessageComposeMail = "Please select an Image file";
												$timeout(function () {
													$scope.errorMessageComposeMail = false;
												}, 3000);
												return false;
											}


										}
										console.log("files Reply Attach");
										console.log(files);
								}

							   var replyMailStatus = "sent";

									//console.log("files >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<");
									//console.log(files);
									fd.append('composeTo', composeTo);
									fd.append('composeSubject', composeSubject);
									fd.append('composeMessage', composeMessage);
									fd.append('receiverId', receiverId);
									fd.append('replyMailStatus', replyMailStatus);
									fd.append('sendMailPage', 'true'); // To identify other than draftmail
									//fd.append('entryId', entryId);

								   // fd.append('entryId', entryId);
									if (files) {
										for (var i = 0; i < files.length; i++) {
											fd.append('attachments', files[i]);
										}
									}

							$http.post($rootScope.STATIC_URL + 'mail/saveMail', fd, {
								transformRequest: angular.identity,
								headers: {'Content-Type': undefined}

							}).success(function (response) {
											console.log(response);
											if (response.status == 1)
											{
															$rootScope.disableButton = false;
														   //var sendMailSuccessMsg = "Successfully send message to "+$scope.composeTo;
															//var Successresponse={status:true,message:sendMailSuccessMsg};
															$('#mailFromSearchResult').modal('hide');
															$scope.successMessageCommonMail = "Your email has been sent to "+$scope.composeTo;

															$scope.composeMessage = "";
															//$window.location.reload();
															$scope.composeTo            = "";
															$scope.composeSubject       =  "";
															$scope.composeMessage       = "";
															$scope.compRecId            =  "";
															$('.xax').hide();
															$('#reply').show();
															console.log(event);

															console.log(event.replyFileFinalArray);
															$('#appendReplyAttachFile .replyAttachOuter').remove();
															//$scope.successMessageComposeMail = "Your message has been sent";
															//$scope.successMessageCommonMail = "Your message has been sent";
															$timeout(function () {
															   // $scope.successMessageComposeMail = false;
															   //$window.location.href = $rootScope.hashbang + "mailbox/inbox";
															   $scope.successMessageCommonMail = false;

															}, 3000);

															if(event.replyFileFinalArray){//Only For Reply Mail Success
																	console.log($scope.replyFileFinalArray);
																	$scope.replyFileFinalArray = "";
															}



											}



							})
							.error(function () {
								$scope.errorMessage = "Please Try Again";
								$timeout(function () {
									$scope.errorMessage = false;
								}, 3000);
							});


							}
				 }
			});

			}//Draft Mail Ends


			 // Reply Attach

			$scope.replyAttach = function (event) {
						//var i = 0;
						console.log("replyAttach ---- >");
						console.log(event.files);
						console.log(event.target.files);
						console.log("tmppath >>>>>>>");
						console.log(tmppath);

						var replyFiles = [];
						var replyFileArray =[];
			   // $scope.replyFileFinalArray =[];

			   var attachReplyElement = angular.element(document.querySelector('#appendReplyAttachFile'));

			   for (var i = 0; i < event.target.files.length; i++) {

				var tmppath = URL.createObjectURL(event.target.files[i]);
									 // var file = event.files[i];
									 if(!$scope.replyFileFinalArray){
										replyFileArray.push(event.target.files[i]);
										$scope.replyFileFinalArray = replyFileArray;
										/* var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
																		'<img style="width:100px;height:100px;" class="col-sm-2" src="'+tmppath+'"/>'+
																		'<div class="delete col-sm-1">' +
																				'<button id="deleteReplyAttach" class="btn btn-primary" ng-click="removeReply('+$scope.replyFileFinalArray.length+')">' +
																					'<i class="fa fa-trash"></i>' +
																				'</button>' +
																		'</div>' +
																		'</div>';*/
																		var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
																		'<img class="col-sm-2" src="'+tmppath+'"/>'+
																		'<div class="delete col-sm-1 imgclosediv">' +

																		'<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

																		'</div>' +
																		'</div>';
																		attachReplyElement.append($compile(attachReplyHtml)($scope));
																	}
																	else{
																		replyFileArray = $scope.replyFileFinalArray;
																		replyFileArray.push(event.target.files[i]);
																		$scope.replyFileFinalArray = replyFileArray;
																		var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
																		'<img class="col-sm-2" src="'+tmppath+'"/>'+
																		'<div class="delete col-sm-1 imgclosediv">' +

																		'<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

																		'</div>' +
																		'</div>';
																		attachReplyElement.append($compile(attachReplyHtml)($scope));
																	}
																	console.log("$scope.replyFileArray1 Multiple=======");
																	console.log($scope.replyFileFinalArray);

																}

																console.log("........Last and Final $scope.ecount...........");
																console.log($scope.ecount);

					//}//For Multiple Files

			}//Main Function ENDS

			$scope.removeReply = function(item) {
					console.log("Clicked Remove item =======================------------");
					var selectItem = $scope.replyFileFinalArray[item-1];
					$scope.replyFileFinalArray.splice(item-1, 1);
					console.log($scope.replyFileFinalArray);
				}



			/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    */
			console.log("-----------------------------+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---------------------");
			//console.log(newFactory.method1(arg));


		}
	]);






(function () {
    'use strict';

    angular
        .module('SearchMain')
        .factory('Search', Search);

	//Search
    Search.$inject =
    ['$routeParams', '$rootScope', '$http', '$location', '$window'];

	function Search($routeParams, $rootScope, $http, $location, $window){

		var service = {};

		service.updateSearchFilter = updateSearchFilter;
		service.getSearchFilter    = getSearchFilter;
		service.filterDefault  =  {
				"body_type_slim":0,
				"body_type_average":0,
				"body_type_muscular":0,
				"body_type_fewpounds":0,
				"body_type_gym":0,
				"body_type_large":0,
				"exchange_with_male":0,
				"exchange_with_female":0,
				"exchange_with_gender_both":0,
				"prefer_massage_exchange":0,
				"prefer_paid_massage":0,
				"prefer_massage_both":0,
				"experience_aficionado":0,
				"experience_student":0,
				"experience_professional":0
		};

		function updateSearchFilter(data,CB) {
			$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/updateSearchFilter',{ request: data })
				.success(function (response) {
				CB(response);
			});
		}

		function getSearchFilter(CB) {
			$http.post($rootScope.STATIC_URL + 'SearchResultsPhase2/getSearchFilter')
				.success(function (response) {
				CB(response);
			});
		}
		return service;

	}

})();

var app 	=	angular.module('zentieraWebApp',
					[
					'ngRoute',
					'adminControllers',
					'userControllers',
					'zentieraDirectives',
					'zentieraFilters',
					'angular.filter',
					'zentieraServices',
					'angular.img',
					'ngImgCrop',
					'ngIdle',
					'uiSwitch',
					'ui.bootstrap',
					'angulartics',
					'angulartics.google.analytics',
					'updateMeta',
					'gm',
					'appServices',
					'quickSignupMain','myProfileMain','othersProfileMain','SearchMain','ngSanitize', 'ngCsv',
					]
				);

app.config(['$httpProvider','$routeProvider','$locationProvider', function ($httpProvider,$routeProvider, $locationProvider) {

//    app.config(['$httpProvider', function($httpProvider) {
        //initialize get if not there
        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // Answer edited to include suggestions from comments
        // because previous version of code introduced browser-related errors

        //disable IE ajax request caching
        $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
        // extra
        $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';
        $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';
}]);
  /* app.config(function(IdleProvider, KeepaliveProvider) {
       console.log("vljbhlkczxbkcxb;lk");
  IdleProvider.idle(5); // 10 minutes idle
  IdleProvider.timeout(1); // after 30 seconds idle, time the user out
  KeepaliveProvider.interval(10); // 5 minute keep-alive ping
});
*/
    app.config(['$routeProvider','$locationProvider', function ($routeProvider,$locationProvider) {

        //page = ADM_LOG; // requiresLogin === true, clientSide === 'ADMIN';
        //page = ADM_NOTLOG; // requiresLogin === false, clientSide === 'ADMIN';
        //page = USR_LOG; // requiresLogin === true, clientSide === 'USER';
        //page = USR_NOTLOG; // requiresLogin === false, clientSide === 'USER';
        //page = USR_HOME_NOTLOG; // requiresLogin === false, clientSide === 'USER';

        $routeProvider
                .when("/", {
                    templateUrl: "partials/home.html",
                    controller: "homeCtrl",
                    css: 'css/demos.css',
                    access: {
                      //  requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_HOME_NOTLOG'
                    },
                    classes: {
                   //     htmlClassName : 'avoid-jumping',
                //   bodyClassName: 'overflow-hidden-y',
                    headerSliderHomeClassName: 'codrops-top-homeLogin  clearfix',
                        },
                })
                .when("/home", {
                    templateUrl: "partials/loginHome.html",
                    controller: "loginHomeCtrl",
                    css: 'css/demos.css',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        //htmlClassName : 'avoid-jumping',
                        bodyClassName: 'overflow-hidden-y',
                        headerSliderHomeClassName: 'codrops-top-homeLogin  clearfix',
                        },
                })
                .when("/test", {
                    templateUrl: "partials/crop.html",
                    controller: "ImgCropController",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_HOME_NOTLOG'
                    }
                })
                .when("/index", {
                    templateUrl: "partials/home.html",
                    controller: "homeCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_HOME_NOTLOG'
                    }
                })
                .when("/login/:hash?", {
					// '?' used to make it optional
                    templateUrl: "partials/login.html",
                    controller: "loginCtrl",
                    access: {
						goToLandingPageIfLoggedIn: true,
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },

                })
                .when("/logout", {
                    templateUrl: "partials/logout.html",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
				.when("/profile/edit", {
					templateUrl: "MyProfile/editProfile.html",
					controller: "editprofileCtrl",
					access: {
						requiresLogin: true,
						clientSide: 'USER',
						page: 'USR_NOTLOG'
					},classes: {
						bodyClassName: 'grey',
					}
				})
                .when("/profile/favouritesearchlisting", {
                    templateUrl: "partials/favourite_search_listing.html",
                    controller: "favouriteCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }

                })

                .when("/profile/photogallery", {
                    templateUrl: "partials/photogallery.html",
                    controller: "photogalleryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/photokey/:id", {
                    templateUrl: "partials/photokey.html",
                    controller: "photokeyCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/profile/packages", {
                    templateUrl: "partials/packages.html",
                    controller: "packagesCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/profile/addVideos", {
                    templateUrl: "partials/addVideos.html",
                       controller: "videogalleryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
        .when("/profile/videogallery", {
                    templateUrl: "partials/videogallery.html",
                       controller: "videogalleryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/search/edit", {
                    templateUrl: "partials/editSearch.html",
                    controller: "editSearchCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },classes: {
                        bodyClassName: 'grey',

                        },
                })

               .when("/dashboard", {
                    templateUrl: "partials/dashboard.html",
                    controller: "dashboardCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/landingpage", {
                    templateUrl: "partials/landingpage.html",
                    controller: "landingPageCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },


                })
                .when("/mylocations", {
                    templateUrl: "partials/myLocations.html",
                    controller: "myLocationsCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                })
                /*.when("/mylocations/ff/:latlng/:address", {
                    templateUrl: "partials/myLocations.html",
                    controller: "myLocationsCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })*/
                .when("/mylocations/addcity", {
                    templateUrl: "partials/addCity.html",
                    controller: "addCityCountryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                })
                .when("/mylocations/addcity/:travelLocationId", {
                    templateUrl: "partials/addCity.html",
                    controller: "addCityCountryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                })
                .when("/mylocations/addcountry", {
                    templateUrl: "partials/addCountry.html",
                    controller: "addCityCountryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                })
                .when("/mylocations/addcountry/:travelLocationId", {
                    templateUrl: "partials/addCountry.html",
                    controller: "addCityCountryCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                })
                /*.when("/signup", {
                    templateUrl: "partials/signup.html",
                    controller: "preSignupCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full ',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },

                })*/
                .when("/signup_one/:hash", {
                    templateUrl: "partials/signup_one.html",
                    controller: "signupOneCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',

                        },

                })
                .when("/signup_two/:hash", {
                    templateUrl: "partials/signup_two.html",
                    controller: "signupTwoCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',

                        },
                })
                .when("/forgotpassword", {
                    templateUrl: "partials/forgotPassword.html",
                    controller: "forgotPasswordCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },
                })
                .when("/resetpassword/:resetkey", {
                    templateUrl: "partials/resetPassword.html",
                    controller: "resetPasswordCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    }
                })
                .when("/changepassword", {
                    templateUrl: "partials/changePassword.html",
                    controller: "changePasswordCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },
                })

                .when("/deletemyaccount", {
                    templateUrl: "partials/deleteAccount.html",
                    controller: "accountSettingCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },
                })
                .when("/contactus", {
                    templateUrl: "partials/contactus.html",
                    controller: "contactUsCtrl",
                    access: {

                    //  requiresLogin: true,

                       clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'grey',

                        },
                })
                .when("/otherVideos/:id", {
                    templateUrl: "partials/otherVideos.html",
                       controller: "otherVideosCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
          /*     .when("/publcontactus", {
                    templateUrl: "partials/contactus.html",
                    controller: "contactUsCtrl",
                    access: {

                    //  requiresLogin: false,

                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',

                        },
                })*/
               .when("/cmspage/:cmsPageId", {
                    templateUrl: "partials/cmsPage.html",
                    controller: "cmsPagesList",
                    access: {

                    //    requiresLogin: true,

                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
          /*      .when("/pubcmspage/:cmsPageId", {
                    templateUrl: "partials/cmsPage.html",
                    controller: "cmsPagesList",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    }
                })*/
               .when('/profile/payments',{
                    templateUrl :'partials/payments.html',
                    controller:'paymentCtrl',
                    access: {
                        requiresLogin:true,
                        clientSide:'USER',
                        page:'USR_LOG'
                    }
                })
                .when("/admin", {
                    templateUrl: "partials/admin/login.html",
                    controller: "adminLoginCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'ADMIN',
                        page: 'ADM_NOTLOG'
                    }
                })
                .when("/admin/login", {
                    templateUrl: "partials/admin/login.html",
                    controller: "adminLoginCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'ADMIN',
                        page: 'ADM_NOTLOG'
                    }
                })
								.when("/admin/bulkEmail", {
                     templateUrl: "partials/bulkEmail.html",
                     controller: "bulkEmail",
                     access: {
											 requiresLogin: true,
											 clientSide: 'ADMIN',
											 page: 'ADM_LOG'
                     }
                 })

                .when("/admin/dashboard", {
                    templateUrl: "partials/admin/dashboard.html",
                    controller: "adminDashboardCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/package', {
                    templateUrl: 'partials/admin/package.html',
                    controller: 'adminPackageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/reviewsAll',{
                    templateUrl :'partials/admin/reviewsAll.html',

                    controller:'adminReviewCtrl',

                    access: {
                        requiresLogin:true,
                        clientSide:'ADMIN',
                        page:'ADM_LOG'
                    }
                })
                .when('/admin/reviewsAll/:id',{
                    templateUrl :'partials/admin/reviewDetails.html',

                    controller:'reviewDetailsCtrl',

                    access: {
                        requiresLogin:true,
                        clientSide:'ADMIN',
                        page:'ADM_LOG'
                    }
                })
                .when('/admin/members', {
                    templateUrl: 'partials/admin/members.html',
                    controller: 'adminMembersCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/photos', {
                    templateUrl: 'partials/admin/membersListPhotos.html',
                    controller: 'adminMembersPhotosCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/usersphotos/:id', {
                    templateUrl: 'partials/admin/membersListPhotosInfo.html',
                    controller: 'adminMembersPhotosInfoCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id', {
                    templateUrl: 'partials/admin/memberInfo.html',
                    controller: 'adminMemberInfoCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                }).
                when('/admin/member/:id/review', {
                    templateUrl: 'partials/admin/memberReview.html',
                    controller: 'adminMemberReviewCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id/subscription', {
                    templateUrl: 'partials/admin/memberSubscription.html',
                    controller: 'adminMemberSubscriptionCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id/referral', {
                    templateUrl: 'partials/admin/memberReferral.html',
                    controller: 'adminMemberReferralCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id/report', {
                    templateUrl: 'partials/admin/memberReport.html',
                    controller: 'adminMemberReportCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id/photo', {
                    templateUrl: 'partials/admin/memberPhoto.html',
                    controller: 'adminMemberPhotoCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/member/:id/video', {
                    templateUrl: 'partials/admin/memberVideo.html',
                    controller: 'adminMemberVideoCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageSubAdmin', {
                    templateUrl: 'partials/admin/manageSubAdmin.html',
                    controller: 'manageSubAdminCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageSubAdmin/subAdmin/:adminId', {
                    templateUrl: 'partials/admin/subAdminDetails.html',
                    controller: 'subAdminDetailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/Privileges', {
                    templateUrl: 'partials/admin/privileges.html',
                    controller: 'privilegesCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/Settings', {
                    templateUrl: 'partials/admin/settings.html',
                    controller: 'settingsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/ChatSettings', {
                    templateUrl: 'partials/admin/ChatSettings.html',
                    controller: 'chatSettingsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageCmsPage', {
                    templateUrl: 'partials/admin/manageCmsPage.html',
                    controller: 'manageCmsPageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageCmsPage/:cmsPageId', {
                    templateUrl: 'partials/admin/cmsPageDetails.html',
                    controller: 'cmsPageDetailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/page', {
                    templateUrl: 'partials/admin/manageAdPage.html',
                    controller: 'manageAdPageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/page/:adPageId/adInPage', {
                    templateUrl: 'partials/admin/adInPage.html',
                    controller: 'adInPageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/position', {
                    templateUrl: 'partials/admin/manageAdPosition.html',
                    controller: 'manageAdPositionCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/position/:adPositionId/adInPosition', {
                    templateUrl: 'partials/admin/adInPosition.html',
                    controller: 'adInPositionCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/adcost', {
                    templateUrl: 'partials/admin/manageAdCost.html',
                    controller: 'manageAdCostCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/adpackages', {
                    templateUrl: 'partials/admin/adPackages.html',
                    controller: 'manageAdPackageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/professionalAds/adSubscribers', {
                    templateUrl: 'partials/admin/adSubscribers.html',
                    controller: 'manageAdPackageCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/userAdList', {
                    templateUrl: 'partials/admin/manageAdUser.html',
                    controller: 'manageAdUserCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/manageAdvertisement/ad/:userAdId', {
                    templateUrl: 'partials/admin/adUserDetails.html',
                    controller: 'adUserDetailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/blog/list', {
                    templateUrl: 'partials/admin/manageBlog.html',
                    controller: 'manageBlogCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/blog/addNewBlog', {
                    templateUrl: 'partials/admin/addNewBlog.html',
                    controller: 'addNewBlogCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/blog/editBlog/:blogId', {
                    templateUrl: 'partials/admin/editBlog.html',
                    controller: 'editBlogCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/blog/:blogId', {
                    templateUrl: 'partials/admin/blogDetails.html',
                    controller: 'blogDetailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/blog/comments/:blogId', {
                    templateUrl: 'partials/admin/blogComments.html',
                    controller: 'blogCommentsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/list', {
                    templateUrl: 'partials/admin/managePoll.html',
                    controller: 'managePollCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/responses/:pid', {
                    templateUrl: 'partials/admin/poll-responses.html',
                    controller: 'managePollCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/addNewPoll', {
                    templateUrl: 'partials/admin/addNewPoll.html',
                    controller: 'addNewPollCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/:pollId', {
                    templateUrl: 'partials/admin/pollDetails.html',
                    controller: 'pollDetailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/editPoll/:pollId', {
                    templateUrl: 'partials/admin/editPoll.html',
                    controller: 'editPollsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/poll/comments/:pollId', {
                    templateUrl: 'partials/admin/pollComments.html',
                    controller: 'pollCommentsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })

                .when('/admin/abuse/list', {
                    templateUrl: 'partials/admin/abuseUserList.html',
                    controller: 'abuseUsersCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })
                .when('/admin/abuse/details/:id', {
                    templateUrl: 'partials/admin/reportDetails.html',
                    controller: 'abuseUsersCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })

                .when('/admin/reports/subscriptionreport', {
                    templateUrl: 'partials/admin/subscriptionReport.html',
                    controller: 'subcriptionReportsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'ADMIN',
                        page: 'ADM_LOG'
                    }
                })

                .when('/mailbox/inbox', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                       // mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                /* when('/mailbox/inbox/:mailId', {
                 templateUrl: 'partials/mailDetail.html',
                 controller: 'mailDetailCtrl',
                 access: {
                 requiresLogin: true,
                 clientSide: 'USER',
                 page: 'USR_LOG'
                 }
                 }).*/
                when('/mailbox/inbox/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                      //  mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/sent', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                       // mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/sent/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                     //   mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/draft', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                      //  mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                /*when('/mailbox/draft/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                        mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).*/
                when('/mailbox/trash', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                     //   mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/trash/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                     //   mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/folder/:folderName', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                     //   mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/folder/:folderName/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                    //    mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/conversations', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                    //    mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/conversationlist/:cnvrUserId', {
                    templateUrl: 'partials/mailboxMails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                     //   mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/mailbox/conversationdetail/:mailId', {
                    templateUrl: 'partials/mailboxMailsDetails.html',
                    controller: 'mailboxMailsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'inbox-bdy grey',
                      //  mailboxFooter : 'navbar-inverse cstm-navbar-inverse cstm-navbar-inverse12 fixed-inbox2'
                        },
                }).
                when('/foldermailbox', {
                    templateUrl: 'partials/folderMailbox.html',
                    controller: 'userSettingsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'full',

                        },
                }).
                when('/preferences', {
                    templateUrl: 'partials/userSettings.html',
                    controller: 'userSettingsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'full',

                        },
                }).
                when('/cancelservice', {
                    templateUrl: 'partials/cancelService.html',
                    controller: 'cancelServiceCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        bodyClassName: 'full',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },

                }).
                when('/blog/addUserBlog', {
                    templateUrl: 'partials/addUserBlog.html',
                    controller: 'addUserBlogCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                }).
                when('/blog', {
                    templateUrl: 'partials/blogList.html',
                    controller: 'blogListCtrl',
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                     classes: {
                        bodyClassName: 'grey',

                        },

                }).
                when('/blog/:blogId', {
                    templateUrl: 'partials/blogInDetail.html',
                    controller: 'blogInDetailCtrl',
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                    },

                }).
                /*when('/searchresults', {
                    templateUrl: 'partials/searchResults.html',
                  // templateUrl: 'partials/search.html',
                    controller: 'searchResultsCtrl',
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG',
                        pagename: 'SEARCH_RESULT',
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },
                }).*/
                when('/404', {
                    templateUrl: "partials/404.html",
                    controller: "errorCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    }
                })
                 .when("/community/latestpoll", {
                    templateUrl: "partials/pollLatest.html",
                    controller: "pollCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/community/polls", {
                    templateUrl: "partials/polls.html",
                    //templateUrl: "partials/pollLatest.html",
                    controller: "pollCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                .when("/community/poll-details/:id", {
                    templateUrl: "partials/poll-details.html",
                    controller: "pollCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                //just tetst must remove

                .when("/community/newpoll", {
                    templateUrl: "partials/newpoll.html",
                    controller: "pollCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
				.when("/myprofile", {
					templateUrl: "MyProfile/myProfile.html",
					controller: "myprofilenewCtrl",
					access: {
						requiresLogin: true,
						clientSide: 'USER',
						page: 'USR_NOTLOG'
					},classes: {
						bodyClassName: 'grey',
					}
				})
                .when("/profile/refer", {
                    templateUrl: "partials/refer.html",
                       controller: "referCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }, classes: {

                        bodyClassName: 'full-search',

                        },
                })
                .when("/profile/bonus-history", {
                    templateUrl: "partials/bonus-points.html",
                    controller: "bonusCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
				.when("/profile/:id", {
					templateUrl: "othersProfile/othersProfile.html",
					controller: "otherProfileNewCtrl",
					access: {
						requiresLogin: true,
						clientSide: 'USER',
						page: 'USR_NOTLOG'
					},
				})
                .when("/search", {
                    templateUrl: "partials/search.html",
                    controller: "searchCtrl",
                    //controller: "searchResultsCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                    classes: {
                        htmlClassName : 'avoid-jumping',
                        bodyClassName: 'full-search',
                        fixedFooter  : 'cstm-navbar-fixed-bottom navbar-fixed-bottom cstm-navbar-inverse1'
                        },
                })
                 .when("/myprofile/myFavourites", {
                    templateUrl: "partials/myFavourite.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })

                 .when("/myprofile/myProfileReview", {
                    templateUrl: "partials/myProfileReview.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                 .when("/profile/:id/otherProfileReview", {
                    templateUrl: "partials/otherProfileReview.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }
                 })
                    .when("/myprofile/reviewsPennedMyprofile", {
                    templateUrl: "partials/reviewsPennedMyprofile.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })

                    .when("/myprofile/reviewsReceivedMyprofile", {
                    templateUrl: "partials/reviewsReceivedMyprofile.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                     .when("/profile/:id/reviewsPennedOtherprofile", {
                    templateUrl: "partials/reviewsPennedOtherProfile.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                      .when("/profile/:id/reviewsReceivedOtherProfile", {
                    templateUrl: "partials/reviewsReceivedOtherProfile.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                .when("/blockedUsers", {
                    templateUrl: "partials/blockList.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },

                })

                 .when("/myprofile/myFavourites", {
                    templateUrl: "partials/myFavourite.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })

                 .when("/myprofile/myProfileReview", {
                    templateUrl: "partials/myProfileReview.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                 .when("/profile/:id/otherProfileReview", {
                    templateUrl: "partials/otherProfileReview.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }
                 })
                    .when("/myprofile/reviewsPennedMyprofile", {
                    templateUrl: "partials/reviewsPennedMyprofile.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })

                    .when("/myprofile/reviewsReceivedMyprofile", {
                    templateUrl: "partials/reviewsReceivedMyprofile.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                     .when("/profile/:id/reviewsPennedOtherprofile", {
                    templateUrl: "partials/reviewsPennedOtherProfile.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                      .when("/profile/:id/reviewsReceivedOtherProfile", {
                    templateUrl: "partials/reviewsReceivedOtherProfile.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'

                    }

                })
                 .when("/reportAbuse/:id", {
                    templateUrl: "partials/reportAbuse.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                }).when("/advertiseRequest", {
                    templateUrl: "partials/advertiseRequest.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },

                     classes: {
                        bodyClassName: 'grey',


                        },
                })
                  .when("/advertisesubscribe", {
                    templateUrl: "partials/adPackages.html",
                    controller: "adPackagesCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    }
                })
                 .when("/myProfile/publicPhotos", {
                    templateUrl: "partials/myPhotoGallery.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                 .when("/myProfile/privatePhotos", {
                    templateUrl: "partials/myPrivateGallery.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                 .when("/myProfile/reportAbuse", {
                    templateUrl: "partials/myReportAbuse.html",
                    controller: "myProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/publicPhotos/:id", {
                    templateUrl: "partials/othersPhotoGallery.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/privatePhotos/:id", {
                    templateUrl: "partials/othersPhotoGallery.html",
                    controller: "otherProfileCtrl",
                    access: {
                        requiresLogin: true,

                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/admin/adRequest", {
                    templateUrl: "partials/admin/adRequest.html",
                      controller:"adRequestCtrl",

                    access: {
                        requiresLogin:true,
                        clientSide:'ADMIN',
                        page:'ADM_LOG'
                    }
                })
                  .when('/admin/adRequest/:id',{
                    templateUrl :'partials/admin/adRequestDetails.html',

                    controller:'adRequestDetailsCtrl',

                    access: {
                        requiresLogin:true,
                        clientSide:'ADMIN',
                        page:'ADM_LOG'
                    }
                })
                 .when("/admin/members/cancel", {
                    templateUrl: "partials/admin/memberCancel.html",
                      controller:"membersCancelCtrl",

                    access: {
                        requiresLogin:true,
                        clientSide:'ADMIN',
                        page:'ADM_LOG'
                    }
                })
                  .when("/publicAboutUs", {
                    templateUrl: "partials/aboutUs.html",
                    controller: "aboutUsCtrl",
                    access: {
                        clientSide: 'USER',
                       // requiresLogin: false,
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',
                        },

                })

                .when("/publicFaq", {
                    templateUrl: "partials/faq.html",
                    controller: "faqCtrl",
                    access: {
                        clientSide: 'USER',
                       // requiresLogin: false,
                        page: 'USR_NOTLOG'
                    }
                })
                 .when("/privateFaq", {
                    templateUrl: "partials/faq.html",
                    controller: "faqCtrl",
                    access: {
                        clientSide: 'USER',
                       // requiresLogin: false,
                        page: 'USR_LOG'
                    }
                })
                .when("/signup_oneTest", {
                    templateUrl: "partials/signup_oneTest.html",
                    controller: "signupOneTestCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    },
                    classes: {
                        bodyClassName: 'grey',

                        },

                })
                .when("/free-massage-exchange", {
                    templateUrl: "partials/free-massage-exchange.html",
                    controller: "footerMenuCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/paid-professional-massage", {
                    templateUrl: "partials/paid-professional-massage.html",
                    controller: "footerMenuCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/therapeutic-massage", {
                    templateUrl: "partials/therapeutic-massage.html",
                    controller: "footerMenuCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/sensual-massage", {
                    templateUrl: "partials/sensual-massage.html",
                    controller: "footerMenuCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })
                .when("/gay-massage", {
                    templateUrl: "partials/gay-massage.html",
                    controller: "footerMenuCtrl",
                    access: {
                        requiresLogin: true,
                        clientSide: 'USER',
                        page: 'USR_LOG'
                    },
                })/**/
                .otherwise("/404", {
                    templateUrl: "partials/404.html",
                    controller: "errorCtrl",
                    access: {
                        requiresLogin: false,
                        clientSide: 'USER',
                        page: 'USR_NOTLOG'
                    }
                });


                $locationProvider.html5Mode(html5ModeValue);
    }
]);

app.run(function ($rootScope, $location, $http, $window, $route, $uibModal, $routeParams,$interval, $timeout, $templateCache) {
/*
 $rootScope.$on('IdleTimeout', function() {
        alert("deii testing");
    });
*/

    $rootScope.html5BaseUrl = html5BaseUrl; // html5BaseUrl is defined in the Config.js file
    $rootScope.hashbang     = hashbang; // html5BaseUrl is defined in the Config.js file
    $rootScope.alerts = [];
    $rootScope.showloader = false;
    $rootScope.disableButton = false;
    $rootScope.isMobile = false;
    $rootScope.currentUserDetails = false;

      $rootScope.deleteProfilePhoto = function(){
        if(confirm('Are you sure to delete your profile picture?')){
          $rootScope.showloader = true;
            $http.post($rootScope.STATIC_URL + 'users/deleteProfilePhoto').success(function (response) {
                $rootScope.showloader = false;
                if (response.status === 1) {
                      var json_object = JSON.parse($window.localStorage.user);
                        json_object["profilePic"] = null;
                        localStorage["user"] = JSON.stringify(json_object);
                        $rootScope.profilePic        = null;
                        $rootScope.profilePicNoThumb = null;
                        $rootScope.updateUserInfo();
                        $window.location.href = $rootScope.hashbang + "myprofile";
                }
            }).error(function (err) {
               console.log("ERROR" + err);
           });
        }
    };

    $rootScope.openUsersList  = function (){
        // To open users list window in mobile devices
        console.log('in openUsersList');
        if($window.localStorage.uid && $window.localStorage.isUserAuthenticated == 'true' && isMobile()){
            //$window.open( Config.STATIC_URL +'chatusers/' + $window.localStorage.uid ,'userslist').focus();
            $window.open( 'chatusers.html?uid=' + $window.localStorage.uid ,'userslist').focus();
            console.log('in openUsersList method');
        }

    };
    $rootScope.updateUserInfo  = function (){

        $timeout(function(){

            $http.post(Config.STATIC_URL + 'users/getUserDetails').success(function (response) {

                if (response.status === 1) {
                    $rootScope.currentUserDetails = response.data[0];
                    console.log('updateUserInfo<<<<<<<<<<<<');
                    console.log($rootScope.currentUserDetails);
                }
            }).error(function (err) {
                console.log("ERROR while fetching user details" + err);
            });
        },1000);
    };

    if(isMobile()){
        $rootScope.isMobile = true;
    }

    $rootScope.changeScrollToTop  = function (){
        $window.scrollTo(0, 0);
    }
    $rootScope.reloadProfilePic  = function (){

        if($rootScope.profilePic){
			try{
				var res = $rootScope.profilePic.split('?');
				$rootScope.profilePic = res[0] + '?now='+ new Date().getTime();
				var res = $rootScope.profilePicNoThumb.split('?');
				$rootScope.profilePicNoThumb = res[0] + '?now='+ new Date().getTime();
			}
            catch(e){
				console.log(e);
			}
        }

    }
    $rootScope.userLoginStatus = false;
    if($window.localStorage.userToken){
        $rootScope.userLoginStatus = true;
        $rootScope.updateUserInfo();
    }

    $rootScope.privatechat = function(uid,username){

        console.debug('in prvt chat');
        if(isMobile()){
            console.debug('mob');
            var window_name = createRoom(uid);
            //$window.open( $rootScope.STATIC_URL + 'chatuser/' + $window.localStorage.uid + '/' + uid ,window_name).focus();
            var windowName = window.localStorage.getItem('win_' + window_name);
            console.log(windowName);
            if(windowName != 'true'){
                window.open( 'chatuser.html?uid=' + $window.localStorage.uid + '&obj=' + uid ,window_name).focus();
                window.localStorage.setItem('win_' + window_name,true);
            }
        }else{
            console.debug('web');
            privatechat(uid,username);
        }
    };

    $rootScope.closeAlert = function(index,CB){
        $rootScope.alerts.splice(index, 1);
        if (typeof CB === "function") {
			CB();
		}
    };
    // Request Primary Photo

    $rootScope.requestPrimaryPhoto = function () {

        if($routeParams.id){
            $rootScope.showloader = true;
            var data  = {
                receiverId: $routeParams.id ,
                composeSubject: 'Primary Photo request',
                composeMessage: 'Hi, '+ JSON.parse($window.localStorage.user).username +' would like to see your picture. Would you upload a Primary Photo please?' ,
                entryId: 'undefined',
                replyMailStatus: 'sent'
            };

            var promise = $http.post( $rootScope.STATIC_URL + 'mail/saveMail', data );
            promise.then(

                function(response) {

                    $rootScope.showloader = false;
                       var modalInstance = $uibModal.open({
                        animation  : true,
                        templateUrl: 'templates/requestPrimaryPhoto.html',
                        controller : 'requestPhotoKeyModalCtrl',
                        size       : 'sm',
                        backdrop   : 'static',
                        keyboard: false,
                        resolve    : {
                            modal:
                            {
                                title        : "Primary Photo request",
                                message      : 'Hi, '+ JSON.parse($window.localStorage.user).username +' would like to see your picture. Would you upload a Primary Photo please?',
                                to_id        : $routeParams.id
                                //submit       : sendRequest
                            }
                        }
                    });
                },
                function(errorresponse) {
                    console.log('failure loading data');
                }


            );


        }

    };

    $rootScope.cropPhoto = function (image,img_id,img_type) {

        console.log(image + ' === '+img_type);
        var modalInstance = $uibModal.open({
            animation  : true,
            templateUrl: 'templates/crop.html',
            controller : 'ImgCropController',
            size       : 'lg',
            backdrop   : 'static',
            keyboard: false,
            resolve    : {
                model:
                {
                    image    : image,
                    img_id   : img_id,
                    img_type : img_type
                }
            }
        });

    };

    $rootScope.showPhotoKeyModal = function (TargetId) {

        var TargetId  = TargetId || $routeParams.id;
        var sendRequest = function(data,CB){
            $rootScope.showloader = true;
            var promise = $http.post( $rootScope.STATIC_URL + 'requests/sendRequest', data );
            promise.then(
                function(response) {
                    $rootScope.showloader = false;
                    if(response.status){
                        $rootScope.addAlert({ status: true, message: 'A request has been sent to the user.' });
                    }
                    CB();
                },
                function(errorresponse) {
                    console.log('failure loading data');
                    CB();
                }
            );
        }
        if(TargetId && ( TargetId != $window.localStorage.uid )){
            var modalInstance = $uibModal.open({
                animation  : true,
                templateUrl: 'templates/requestPhotoKey.html',
                controller : 'requestPhotoKeyModalCtrl',
                size       : 'lg',
                backdrop   : 'static',
                keyboard: false,
                resolve    : {
                    modal:
                    {
                        title        : "Request Photo Key",
                        message      : "I'd like to see your private photos. Would you send me a Photo Key, please??",
                        to_id        : TargetId,
                        request_type : 'private_photo',
                        submit       : sendRequest
                    }
                }
            });
        }
    };
$rootScope.signUpModal = function () {


    var modalInstance = $uibModal.open({
                        animation  : true,
                        templateUrl: 'templates/signUpmodal.html',
                        controller : 'signupModalCtrl',
                        size       : 'lg',
                        backdrop   : 'static',
                        keyboard: false
                    });


};
$rootScope.deleteAccModal = function () {

    var modalInstance = $uibModal.open({
                        animation  : true,
                        templateUrl: 'templates/deleteAccmodal.html',
                        controller : 'deleteModalCtrl',
                        size       : 'lg',
                        backdrop   : 'static',
                        keyboard: false
                    });


};
    $rootScope.addAlert = function(response,closeAfter){

		// 'closeAfter' is an optional param
        if(response && response.status== 1){
            $rootScope.closeAlert(0);
            $rootScope.alerts.push({ type: 'success', msg: response.message });
        }else if(response && response.status !== 1){
            $rootScope.closeAlert(0);
            $rootScope.alerts.push({ type: 'danger', msg: response.message });
        }
        if(closeAfter){
			try{
				$timeout(function(){
					$rootScope.closeAlert(0);
				},closeAfter);
			}catch(e){
			}
		}
    };

    // It is used to replace the numeric value of server response status and add message field in response if not present
    $rootScope.responseParser = function(response){
        if(response.status === 1 || response.status === '1'){
            response.status = true;
        }else{
            response.status = false;
        }
        if(!response.message){
            response.message = '';
        }
        return response;
    };

        console.log("HELPER_CURRENT_CLIENT_TIMEZONE_NAME Outer===========------------------------------------------------");
        console.log(HELPER_CURRENT_CLIENT_TIMEZONE_NAME);
        $http.defaults.headers.common['client-time-zone-name'] = HELPER_CURRENT_CLIENT_TIMEZONE_NAME;

        console.log($http.defaults.headers.common['client-time-zone-name']);
        if($window.localStorage.adminToken){
                $http.defaults.headers.common['user-token'] = $window.localStorage.adminToken;
                $http.defaults.headers.common['user-role'] = "admin";
        }

		function getUnreadInboxCount() {
				$http.post($rootScope.STATIC_URL + 'mail/getUnreadInboxCount').success(function (response) {
					if (response.status == 1)
					{
						$rootScope.unreadInboxMailCount = response.data;
					}

				}).error(function (err) {
					console.log(err);
					//$rootScope.errorMessage = "Please Try Again";
					//$timeout(function () {
					//    $rootScope.errorMessage = false;
					//}, 3000);
				});
		}
        if($window.localStorage.userToken){
            $http.defaults.headers.common['user-token'] = $window.localStorage.userToken;
            $http.defaults.headers.common['user-role'] = "user";
            //Count of Unread Inbox Messages
			$interval(getUnreadInboxCount, 8000);
        }

   // $rootScope.$on('$routeChangeStart', function(scope, next, current){
   //     $rootScope.alerts = [];
   // });

     /*$http.defaults.headers.common['user-token'] = $window.localStorage.token;
     //$http.defaults.headers.common['user-role']  = $window.localStorage.adminType;

     if($window.localStorage.adminType === "user"){
         $http.defaults.headers.common['user-role']  = "user";
     }else{
         $http.defaults.headers.common['user-role']  = "admin";
     }*/
     //if($window.localStorage.userType === "user"){
         //$http.defaults.headers.common['user-role']  = "user";
         //$http.defaults.headers.common['user-token'] = $window.localStorage.userToken;
     //}
     //if($window.localStorage.adminType === "super_admin" || $window.localStorage.adminType === "sub_admin"){
         //$http.defaults.headers.common['admin-role']  = "admin";
         //$http.defaults.headers.common['admin-token'] = $window.localStorage.adminToken;
    // }

    //$rootScope.STATIC_URL = $location.protocol() + '://' + $location.host() + ':2000/';
    $rootScope.STATIC_ANGULAR_URL = $location.protocol() + '://' + $location.host() + '/';
    $rootScope.STATIC_URL = Config.STATIC_URL;          // STATIC_URL: "http://demo.zenbrisa.com:9002/",
    $rootScope.STATIC_URL_EMAILTEMP = Config.STATIC_EMAIL;      // STATIC_EMAIL: "http://demo.zenbrisa.com/",
    $rootScope.STATIC_SAILS_URL = Config.STATIC_SAILS_URL;      //    STATIC_SAILS_URL: "http://api.zenbrisa.com:9002/"


    /*if (angular.isUndefined($window.localStorage.isAuthenticated)) {
        $window.localStorage.isAuthenticated = 'false';
    }*/

   /* if (angular.isUndefined($window.localStorage.isAdminAuthenticated)) {
        $window.localStorage.isAdminAuthenticated = 'false';
    }
    if (angular.isUndefined($window.localStorage.isUserAuthenticated)) {
        $window.localStorage.isUserAuthenticated = 'false';
    }*/

   /* $scope.$on('$routeChangeSuccess', function(newVal, oldVal) {
        if (oldVal !== newVal) {
            $scope.routeClassName = $route.current.className;
        }
    });*/

    // intial start of auto logout

        $window.localStorage.lastDigestRun = Date.now();
		var idleCheck = $interval(function() {

			try{
				var now = Date.now();
				var lastDigestRun = parseInt($window.localStorage.lastDigestRun);
				if(lastDigestRun>0 && $window.localStorage.isUserAuthenticated == 'true')
				{
					//console.log(now - lastDigestRun);
					if (now - lastDigestRun > 1000*60*15) {
						// logout
						$window.localStorage.lastDigestRun = 0;
						$rootScope.userLogout();
					}
				}
			}catch(e){
				console.log(e);
			}

		}, 5000);

  $rootScope.$on('$locationChangeStart', function (e, next, previous) {
    //    $scope.oldUrl = previous;
      //  $scope.oldHash = $window.location.hash;
        $rootScope.oldUrl=null;

        if(!$window.localStorage.userToken)
        {

			console.log("user token ");

			// if($location.path().indexOf('resetpassword')==-1){

			// 	$rootScope.oldUrl=previous;
			// }


        //  $rootScope.oldUrl=previous;
        //  $rootScope.HalfUrl=$location.url();
        }

        $rootScope.previousUrlLoaded = null;
        //To get the the previous url only for a logged user
        if($window.localStorage.userToken)
        {

          $rootScope.previousUrlLoaded = previous;

        }

        console.log("$rootScope.previousUrlLoaded 11111111>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
        console.log($rootScope.previousUrlLoaded);

        /* +++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               if($window.localStorage.adminToken)
                {
                    $http.post($rootScope.STATIC_URL + 'admins/getLoginSubAdminPrivileges').success(function (response) {
                            console.log(response);
                            console.log(response.privileges);
                            for (var i = 0; i < response.privileges.length; i++) {

                                if (response.privileges[i] == "Members") {
                                    //$window.localStorage.privMembers = "members";
                                    $rootScope.privMembers = "members";
                                }
                                if (response.privileges[i] == "Packages") {
                                    //$window.localStorage.privPackages = "packages";
                                    $rootScope.privPackages = "packages";
                                }
                                if (response.privileges[i] == "Settings") {
                                    //$window.localStorage.privSettings = "settings";
                                    $rootScope.privSettings = "settings";
                                }
                                if (response.privileges[i] == "CMS Pages") {
                                    //$window.localStorage.privCmsPages = "cmsPages";
                                    $rootScope.privCmsPages = "cmsPages";
                                }
                                if (response.privileges[i] == "Advertisements") {
                                    //$window.localStorage.privAdvertisements = "advertisements";
                                    $rootScope.privAdvertisements = "advertisements";
                                }
                                if (response.privileges[i] == "Blog") {
                                    //$window.localStorage.privBlog = "blog";
                                    $rootScope.privBlog = "blog";
                                }
                                if (response.privileges[i] == "Poll") {
                                    //$window.localStorage.privPoll = "poll";
                                    $rootScope.privPoll1 = "poll";
                                }
                                if (response.privileges[i] == "Reviews") {
                                    //$window.localStorage.privReviews = "Reviews";
                                    $rootScope.privReviews = "reviews";
                                }
                                 if (response.privileges[i] == "Ad Requests") {
                                    //$window.localStorage.privAdRequests = "AdRequests";
                                    $rootScope.privMembers = "adRequests";
                                }
                                if (response.privileges[i] == "Abuses") {
                                    //$window.localStorage.privAbuses = "Abuses";
                                    $rootScope.privAbuses = "abuses";
                                }
                                if (response.privileges[i] == "Reports") {
                                    //$window.localStorage.privReports = "Reports";
                                    $rootScope.privReports = "reports";
                                }
                                if (response.privileges[i] == "Cancel Requests") {
                                    //$window.localStorage.privCancelRequests = "CancelRequests";
                                    $rootScope.privCancelRequests = "cancelRequests";
                                }

                            }

                    });

                }

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++ */

    });
    $rootScope.$on("$routeChangeStart", function (event, nextRoute, currentRoute,previous) {

            //Login Status
             var params = {
                        token: $window.localStorage.userToken,

                };
                if($window.localStorage.userToken)
                {
                    /*              $http.post($rootScope.STATIC_URL + 'users/userToken4Page',params).success(function (response) {
                                            if (response.status == 1)
                                            {
                                                $rootScope.pageUserLog= 'USR_LOG';
                                                $rootScope.loginStatus=true;
                                            }
                                            else
                                            {
                                                console.log("ERROR" + err);
                                            }
                                    }).error(function () {
                                            console.log("ERROR" + err);
                                    });
                    */
                        $rootScope.pageUserLog= 'USR_LOG';
                        $rootScope.loginStatus=true;

                }
                else{
                    $rootScope.pageUserLog= 'USR_NOTLOG';
                    $rootScope.loginStatus=false;
                }

        // close modal if exist
        if($rootScope.profilePic && $rootScope.profilePic!= ''){
            if (typeof(currentRoute) !== 'undefined'){
                $templateCache.remove(nextRoute.loadedTemplateUrl);
            }
        }
        try{
            console.log('ccccc');

            $uibModalInstance.dismiss('cancel');
        }catch(e){
            console.log(e);
        }
         $rootScope.alerts = [];
        if (typeof nextRoute.access === 'undefined') {
            // $location.path("/404");
        } else {

                            //Count of Unread Inbox Messages
                            //$interval(getUnreadInboxCount, 10000);
                            //function getUnreadInboxCount() {
                                if($rootScope.loginStatus){
                                    $http.post($rootScope.STATIC_URL + 'mail/getUnreadInboxCount').success(function (response) {
                                        if (response.status == 1)
                                        {
                                            $rootScope.unreadInboxMailCount = response.data;
                                        }

                                    }).error(function () {
                                        $rootScope.errorMessage = "Please Try Again";
                                        $timeout(function () {
                                            $rootScope.errorMessage = false;
                                        }, 3000);
                                    });
                                }
                            //}


                           /* //Count of Unread Inbox Messages
                            $http.post($rootScope.STATIC_URL + 'mail/getUnreadInboxCount').success(function (response) {
                                if (response.status == 1)
                                {
                                    $rootScope.unreadInboxMailCount = response.data;
                                    console.log("common ---- Inbox Count");
                                }

                            }).error(function () {
                                $rootScope.errorMessage = "Please Try Again";
                                $timeout(function () {
                                    $rootScope.errorMessage = false;
                                }, 3000);
                            });*/



                     /* ============================= */
                      //Get Latest Search Area Travellocation
                        /*$http.post($rootScope.STATIC_URL + 'travelLocations/getLatestSearchArea').success(function (response) {
                            if (response.status == 1)
                            {
                                console.log("getLatestSearchArea");
                                console.log(response.data.searchLocation);
                                $rootScope.latestSearchArea = response.data.searchLocation;
                            }
                        }).error(function () {
                            $rootScope.errorMessage = "Please Try Again";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                        });*/

                /* ============================= */

                $rootScope.routeBodyClassName    = "";
                $rootScope.routeFixedFooter      = "";
                $rootScope.routeMailboxFooter    = "";
                $rootScope.routeHtmlClassName    = "";
                $rootScope.routeHeaderSliderHomeClassName = "";

                if(typeof nextRoute.classes != 'undefined'){
                        if(typeof nextRoute.classes.bodyClassName !== 'undefined'){
                                $rootScope.routeBodyClassName = nextRoute.classes.bodyClassName;//class for body
                        }
                        if(typeof nextRoute.classes.htmlClassName !== 'undefined'){
                                console.log(nextRoute.classes.htmlClassName);
                                $rootScope.routeHtmlClassName = nextRoute.classes.htmlClassName;//class for html
                        }
                        if(typeof nextRoute.classes.fixedFooter !== 'undefined'){
                                $rootScope.routeFixedFooter   = nextRoute.classes.fixedFooter;//class for
                        }
                        if(typeof nextRoute.classes.mailboxFooter !== 'undefined'){
                            console.log("Inbox Footer ------");
                            console.log(nextRoute.classes.mailboxFooter);
                            $rootScope.routeMailboxFooter   = nextRoute.classes.mailboxFooter;
                        }
                        if(typeof nextRoute.classes.headerSliderHomeClassName !== 'undefined'){
                            console.log("Inbox Footer ------");
                            console.log(nextRoute.classes.headerSliderHomeClassName);
                            $rootScope.routeHeaderSliderHomeClassName   = nextRoute.classes.headerSliderHomeClassName;
                        }
                }


    // Start: automatic logout after 15min
            var inactivityTime = function () {
              //  var t=null;
                window.onload = resetTimer;
                window.onmousemove = resetTimer;
                window.onmousedown = resetTimer;
                window.onclick = resetTimer;
                window.onscroll = resetTimer;
                window.onkeypress = resetTimer;
                window.onresize = resetTimer;

                function resetTimer() {
                    //  clearTimeout(t);
                    //  t=setTimeout($rootScope.userLogout, (15000));
					try{
						$window.localStorage.lastDigestRun = Date.now();
					}catch(e){
						console.log(e);
					}

                }

            };




            if ($window.localStorage.isUserAuthenticated == 'true' && nextRoute.access.clientSide === 'USER') {
                inactivityTime();

            }

            // ending auto logout new



            // End: automatic logout after 15min //

           /* if (nextRoute.access.requiresLogin && ($window.localStorage.isAuthenticated === 'false') && angular.isUndefined($window.localStorage.token)) {
                console.log('Logged - No');
                if (nextRoute.access.clientSide === 'USER') {
                    //$location.path("/login");
                    $window.location.href = $rootScope.hashbang + "login";
                } else {
                    $rootScope.adminNavigation = 0;
                    $location.path($rootScope.hashbang + "admin/login");
                    //$window.location.href = "/admin/login";
                }

            } else {

                if (nextRoute.access.clientSide === 'USER') {
                    if (typeof $window.localStorage.user !== 'undefined') {
                        $rootScope.user = $window.localStorage.user;
                        if(JSON.parse($window.localStorage.user).profilePic!=null)
                        {
                            $rootScope.profilePic = Config.STATIC_SAILS_URL+'/assets/images/profilePics/'+JSON.parse($window.localStorage.user).username+'/'+JSON.parse($window.localStorage.user).profilePic;
                        }else
                        {
                            $rootScope.profilePic = Config.STATIC_SAILS_URL+'/assets/images/profilePics/default/default.png';
                        }
                        $rootScope.username = JSON.parse($window.localStorage.user).username;
                    }
                } else {

                    $rootScope.adminType = $window.localStorage.adminType;
                    //$rootScope.privileges = $window.localStorage.privileges;
                    //console.log($window.localStorage.privileges);

                    $rootScope.privMembers = $window.localStorage.privMembers;
                    $rootScope.privPackages = $window.localStorage.privPackages;
                    $rootScope.privSettings = $window.localStorage.privSettings;
                    $rootScope.privCmsPages = $window.localStorage.privCmsPages;
                    $rootScope.privAdvertisements = $window.localStorage.privAdvertisements;
                    $rootScope.privBlog = $window.localStorage.privBlog;
                    $rootScope.privPoll = $window.localStorage.privPoll;

                    $rootScope.adminNavigation = 1;

                    if ((nextRoute.originalPath === '/admin' || nextRoute.originalPath === '/admin/login') && $window.localStorage.isAuthenticated === 'true') {
                        $location.path($rootScope.hashbang + "admin/dashboard");
                    }
                }
                console.log('Logged - Yes');
            }*/

             if (nextRoute.access.requiresLogin && angular.isUndefined($window.localStorage.userToken)) {
                if (nextRoute.access.clientSide === 'USER') {

                    if(typeof nextRoute.classes != 'undefined'){
						if(typeof nextRoute.classes.bodyClassName !== 'undefined'){
							$rootScope.routeBodyClassName = nextRoute.classes.bodyClassName;//class for body
						}
						if(typeof nextRoute.classes.htmlClassName !== 'undefined'){
							$rootScope.routeHtmlClassName = nextRoute.classes.htmlClassName;//class for body
						}
						if(typeof nextRoute.classes.fixedFooter !== 'undefined'){
							$rootScope.routeFixedFooter   = nextRoute.classes.fixedFooter;//class for
						}
						if(typeof nextRoute.classes.mailboxFooter !== 'undefined'){
							console.log("Inbox Footer ------");
							console.log(nextRoute.classes.mailboxFooter);
							$rootScope.routeMailboxFooter   = nextRoute.classes.mailboxFooter;
						}
						if(typeof nextRoute.classes.headerSliderHomeClassName !== 'undefined'){
							console.log("Inbox Footer ------");
							console.log(nextRoute.classes.headerSliderHomeClassName);
							$rootScope.routeHeaderSliderHomeClassName   = nextRoute.classes.headerSliderHomeClassName;
						}
					}
					$location.path($rootScope.hashbang + "login");
					console.log("User Log ---- No");
                }

            }else{

                if (nextRoute.access.clientSide === 'USER') {

                        inactivityTime();
                        $rootScope.page = nextRoute.access.page;
                        delete $window.localStorage.adminType;
                        delete $window.localStorage.adminToken;

                       /* delete $window.localStorage.privMembers;
                        delete $window.localStorage.privPackages;
                        delete $window.localStorage.privSettings;
                        delete $window.localStorage.privCmsPages;
                        delete $window.localStorage.privAdvertisements;
                        delete $window.localStorage.privBlog;
                        delete $window.localStorage.privPoll;

                        delete $window.localStorage.privReviews;
                        delete $window.localStorage.privAdRequests;
                        delete $window.localStorage.privAbuses;
                        delete $window.localStorage.privReports;
                        delete $window.localStorage.privCancelRequests;*/
                        $window.localStorage.isAdminAuthenticated = "false";

                    if (typeof $window.localStorage.user !== 'undefined' && typeof $window.localStorage.userType !== 'undefined') {
                         $http.defaults.headers.common['user-role']  = "user";
                         $http.defaults.headers.common['user-token'] = $window.localStorage.userToken;

                         console.log("$http.defaults.headers.common['user-role']");
                         console.log($http.defaults.headers.common['user-role']);
                         console.log("$http.defaults.headers.common['user-token']");
                         console.log($http.defaults.headers.common['user-token']);
                        $rootScope.user                     = $window.localStorage.user;
                        $rootScope.userType                 = $window.localStorage.userType;

                           // delete $window.localStorage.user;
                           // delete $window.localStorage.uid;

                        if(JSON.parse($window.localStorage.user).profilePic!=null)
                        {

                            $rootScope.profilePic = Config.NODE_ASSETS+'/profilePics/'+JSON.parse($window.localStorage.user).username+'/thumb/'+JSON.parse($window.localStorage.user).profilePic + '?now='+ new Date().getTime();
                            $rootScope.profilePicNoThumb = Config.NODE_ASSETS+'/profilePics/'+JSON.parse($window.localStorage.user).username+'/'+JSON.parse($window.localStorage.user).profilePic + '?now='+ new Date().getTime();
                           $rootScope.profilePicHeader = Config.NODE_ASSETS+'/profilePics/'+JSON.parse($window.localStorage.user).username+'/thumb/'+'50x50-'+JSON.parse($window.localStorage.user).profilePic + '?now='+ new Date().getTime();

                        }else
                        {
                            $rootScope.profilePic = Config.NODE_ASSETS+'/profilePics/default/default.png';
                        }
                        $rootScope.profilePicThumb = Config.NODE_ASSETS+'/profilePics/'+JSON.parse($window.localStorage.user).username+'/'+JSON.parse($window.localStorage.user).profilePic;

                         if(typeof nextRoute.classes != 'undefined'){
                            if(typeof nextRoute.classes.bodyClassName !== 'undefined'){
                                $rootScope.routeBodyClassName = nextRoute.classes.bodyClassName;//class for body
                            }
                             if(typeof nextRoute.classes.htmlClassName !== 'undefined'){
                                $rootScope.routeHtmlClassName = nextRoute.classes.htmlClassName;//class for html
                            }
                            if(typeof nextRoute.classes.fixedFooter !== 'undefined'){
                                $rootScope.routeFixedFooter   = nextRoute.classes.fixedFooter;//class for
                            }
                            if(typeof nextRoute.classes.mailboxFooter !== 'undefined'){
                                console.log("Inbox Footer ------");
                                console.log(nextRoute.classes.mailboxFooter);
                                $rootScope.routeMailboxFooter   = nextRoute.classes.mailboxFooter;
                            }
                            if(typeof nextRoute.classes.headerSliderHomeClassName !== 'undefined'){
                                console.log("Inbox Footer ------");
                                console.log(nextRoute.classes.headerSliderHomeClassName);
                                $rootScope.routeHeaderSliderHomeClassName   = nextRoute.classes.headerSliderHomeClassName;
                            }

                        }
                        console.log("User Log ---- Yes");

                    }



                }

            }


            if(nextRoute.access.requiresLogin && angular.isUndefined($window.localStorage.adminToken)){
                 if (nextRoute.access.clientSide === 'ADMIN') {
                    $rootScope.adminNavigation = 0;

                    $location.path($rootScope.hashbang + "admin/login");
                    console.log("Admin Log ---- No");
                }

            }else{
                  if (nextRoute.access.clientSide === 'ADMIN') {
                      //inactivityTime();
                      $rootScope.page = nextRoute.access.page;
                            delete $window.localStorage.userType;
                            delete $window.localStorage.userToken;
                            delete $window.localStorage.user;
                            delete $window.localStorage.uid;
                            $window.localStorage.isUserAuthenticated = 'false';
                    if (typeof $window.localStorage.adminType !== 'undefined') {
                            $http.defaults.headers.common['user-role']  = "admin";
                            $http.defaults.headers.common['user-token'] = $window.localStorage.adminToken;

                            $rootScope.adminType            = $window.localStorage.adminType;
                            $rootScope.adminNavigation      = 1;



                            console.log("Admin Log ---- Yes");



                    }

                }

            }
			if ($window.localStorage.isUserAuthenticated == 'true' && ( nextRoute.access.clientSide === 'USER' || (currentRoute && currentRoute.access.clientSide === 'USER') )) {
				if (nextRoute.access.goToLandingPageIfLoggedIn || (currentRoute && currentRoute.access.goToLandingPageIfLoggedIn ) ) {
					$location.path($rootScope.hashbang + "landingpage");
				}
			}
        }

    });



    $rootScope.adminLogout = function () {

        var angParams = {
            token: $window.localStorage.adminToken
        };
        $http.post($rootScope.STATIC_URL + 'admins/adminLogout', {token: $window.localStorage.adminToken}).success(function (response) {

            if (response.status === 1) {
                $window.localStorage.isAdminAuthenticated = 'false';

                delete $window.localStorage.adminToken;
                delete $window.localStorage.adminType;

                /*delete $window.localStorage.privMembers;
                delete $window.localStorage.privPackages;
                delete $window.localStorage.privSettings;
                delete $window.localStorage.privCmsPages;
                delete $window.localStorage.privAdvertisements;
                delete $window.localStorage.privBlog;
                delete $window.localStorage.privPoll;
                delete $window.localStorage.privReviews;
                        delete $window.localStorage.privAdRequests;
                        delete $window.localStorage.privAbuses;
                        delete $window.localStorage.privReports;
                        delete $window.localStorage.privCancelRequests;*/
                $rootScope.privMembers          = "";
                $rootScope.privPackages         = "";
                $rootScope.privSettings         = "";
                $rootScope.privCmsPages         = "";
                $rootScope.privAdvertisements   = "";
                $rootScope.privBlog             = "";
                $rootScope.privPoll             = "";

                $rootScope.privReviews          = "";
                $rootScope.privAdRequests       = "";
                $rootScope.privAbuses           = "";
                $rootScope.privReports          = "";
                $rootScope.privCancelReq        = "";

                $location.path('/admin/login');
            } else {
                $scope.login_error_message = "Invalid login credentials";
            }

        }).error(function () {

            console.log("ERROR - Admin logout.");

        });

    };


    $rootScope.userLogout = function () {

console.log(">>>>>>>>>>>>LOGOUT RESPONSE -----1");
        if ($window.localStorage.isUserAuthenticated == 'true') {
console.log(">>>>>>>>>>>>LOGOUT RESPONSE");
            var angParams = {
                token: $window.localStorage.userToken
            };
            console.log("angParams ========");
            console.log(angParams);
            console.log($rootScope.STATIC_URL);

            $http.post($rootScope.STATIC_URL + 'users/userLogout', {token: $window.localStorage.userToken}).success(function (response) {
                console.log("Before Staus 1response");
                console.log(response);

                if (response.status === 1) {
                    console.log(">>>>>>>>>>>>LOGOUT RESPONSE Success");
                    $window.localStorage.isUserAuthenticated = 'false';

                    delete $window.localStorage.userToken;
                    delete $window.localStorage.userType;
                    delete $window.localStorage.user;
                    delete $window.localStorage.uid;
                    delete $window.localStorage.search;
                    $rootScope.userLoginStatus = false;

                    $location.path('/');
										window.location.reload();

                } else {

                }

                // disconnect chat
                try{
                    var socketDisconnected = socket.io.disconnect();
                }catch(e){}

            }).error(function () {

                console.log("EROOR - User logout.");

            });
        }

    };

    // Image Uploading Common

    $rootScope.uploadImage = function (event,page,successCallback) {
        var files = [];
        var fd = new FormData();
        if (event.files) {
            for (var i = 0; i < event.files.length; i++) {
                files.push(event.files[i]);
            }
        }
        if (files) {
            for (var i = 0; i < files.length; i++) {
                fd.append('attachments', files[i]);
            }
        }

        $http.post($rootScope.STATIC_URL + page+'/uploadImage',fd,{
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).success(function(response){
                successCallback(response);

            }).error(function (err) {
                  console.log("ERROR" + err);
        });
    };
    // Delete the uploaded image

    $rootScope.deleteImage = function (data,id,page,successCallback) {
        var msg=confirm("Are you sure you want to delete");
        var token= $window.localStorage.token;
        if(msg===true)
        {
            $http.post($rootScope.STATIC_URL + page+'/deleteImage', {token: token, data: data, id:id}).success(function (response) {

                successCallback(response);
            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    };
    //getting all counts common for myProfileMenu sulthan
    $rootScope.getAllCountMyprofile=function(){
      $http.post($rootScope.STATIC_URL + 'users/getAllCountMyprofile',{}).success(function (response) {
        if (response.status === 1) {
         $rootScope.countMyProfile=response.data[0];

         console.log($rootScope.countMyProfile);
         $rootScope.averageRating=response.data[0].averagerating;
     }
 });
  };
    //getting all counts common for otherProfileMenu sulthan
    $rootScope.getAllCountOtherProfile=function(){
        var guestId=$routeParams.id;
        $rootScope.otherProfId=$routeParams.id;
        $http.post($rootScope.STATIC_URL + 'users/getAllCountOtherprofile',{userId:guestId}).success(function (response) {
            if (response.status === 1) {
             $rootScope.countOtherProfile=response.data[0];

             $rootScope.averageRating=response.data[0].averagerating;
             if(response.data[0].favouritecount>0){
                $rootScope.favYes=true;
            }
            else{
                $rootScope.favYes=false;
            }
            if(response.data[0].blockedCount>0){
                $rootScope.blockYes=true;
            }
            else{
                $rootScope.blockYes=false;
            }
        }
    });
    };


    //get latest poll
    $rootScope.getLatestPoll=function(){
        var poll_comments;
         var userId = $window.localStorage.uid;
         $rootScope.myUserId=userId;
        $http.post($rootScope.STATIC_URL + 'userpoll/getRecentPoll').success(function (response) {
         if (response.status == 1)
         {
              console.log("response");
              console.log(response);
            $rootScope.pollLatest=response.data;
               console.log("$rootScope.pollLatest");
            console.log($rootScope.pollLatest);
  /*if($rootScope.pollLatest.ansOptionType='radiobutton'){
    $rootScope.ansOptionType='Choose single option';
  }
  else if($rootScope.pollLatest.ansOptionType='checkbox')
  {
    $rootScope.ansOptionType='Choose Multiple options';
  }*/
           // $rootScope.polllatest.myId=userId;
            var data = {
                token: $window.localStorage.userToken,
                userRole: 'user',
                id: $rootScope.pollLatest.id,
            };
            console.log("data");
            console.log(data);
             var currentPollId=$rootScope.pollLatest.id;
            $http.post($rootScope.STATIC_URL + 'userpoll/getpollcomments',data).success(function (dataResponse) {
                if (dataResponse.data[0].username)
                {
                    $rootScope.pollComments = dataResponse.data;
                    $rootScope.loggedUserId = $window.localStorage.uid;
                    $rootScope.pagination = response.data.pagination;
                    $rootScope.urlLink=Config.STATIC_URL;
                    $rootScope.percentage='50%';
                }
                else{
                 console.log("***error in getting poll comment***");
             }
         });
            $http.post($rootScope.STATIC_URL + 'userpoll/checkPollAttended',data).success(function(response){
                if(response.status == 1){
                        console.log("**Poll attended or Not**");
                        console.log(response.count[0].count);
                        if(response.count[0].count==0){
                            $rootScope.pollAttended=0;


                        }
                        else{
                             $rootScope.pollAttended=1;
                            $rootScope.getPollAnswerOptionsQuestion(currentPollId);
                           // $rootScope.getPollAnswerOptionsAnswer(currentPollId);
                            $rootScope.pollAnswerPercentage(currentPollId);
                        }
                }
                else{
                    console.log("***error in checking poll attended or not");
                }
            });
        }
        else{
         $rootScope.pollLatesId=0;
     }
 });
    };
    $rootScope.getlatestPollComment = function(poll_id){
        var data = {
            token: $window.localStorage.userToken,
            userRole: 'user',
            id: poll_id
        };
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpollcomments', data);
        promise.then(
            function(response) {
                if(response.data.status){
                    $rootScope.pollComments = response.data.data;
                    $rootScope.paginationRoot = response.data.pagination;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    };
//*** function for resizing the image
$rootScope.resizeImage=function(){
    console.log("inside resizeImage");
    $http.post($rootScope.STATIC_URL + 'users/resizeImage').success(function (response) {
        console.log("inside http resize image");

    });
};

//get poll answers question
$rootScope.getPollAnswerOptionsQuestion = function(currentPollId){
    console.log("inside getPollAnswer");
        var data={
      id:currentPollId,
    };
        $http.post($rootScope.STATIC_URL + 'userpoll/getPollAnswerOptionsQuestion',data).success(function (response){
            if(response.status==1){
                console.log("inside success getting question");
                console.log("***QUestion***");
                console.log(response.question);
                $rootScope.question=response.question;
            }
            else{
                console.log("inside error");
            }
        });
},

$rootScope.pollAnswerPercentage = function(currentPollId){
    console.log("inside pollAnswerPercentage");
        var data={
      id:currentPollId,
    };
        $http.post($rootScope.STATIC_URL + 'userpoll/pollAnswerPercentage',data).success(function (response){
            if(response.status==1){

                console.log("inside success poll percentage");
                console.log("***Percantage Data***");
                console.log(response.percentageData);
                $rootScope.pollPercentages=response.percentageData;

            }
            else{
                console.log("inside error");
            }
        });
}

$rootScope.afterLoginSuccess = function(){

    try{
        console.log('call afterLoginSuccess-------');
        $rootScope.updateUserInfo();
        chatInit();
    }catch(e){
        console.log(e);
    }
}


});

'use strict';

/* Services */

var appServices = angular.module('appServices', []);

appServices.service('User', User);
User.$inject = ['$rootScope', '$http'];

function User($rootScope, $http){
	var service = {};
	service.UserInfo = {};

	service.getUserInfo = function(data){
		/*
		$http.post($rootScope.STATIC_URL + 'users/quickSignup', data).success(function (response) {

			CB(response);

		}).error(function (err) {
			console.log("ERROR" + err);
		});*/
		service.UserInfo = data;
	};
	return service;
};

appServices.factory('AuthenticationService', function () {
    var auth = {
        isAuthenticated: false
    }
    return auth;
});

appServices.factory('TokenInterceptor', function ($q, $window, $location, AuthenticationService) {
    return {
        request: function (config) {
            config.headers = config.headers || {};
            if ($window.sessionStorage.token) {
                config.headers.Authorization = 'Bearer ' + $window.sessionStorage.token;
            }
            return config;
        },
        requestError: function (rejection) {
            return $q.reject(rejection);
        },
        // Set Authentication.isAuthenticated to true if 200 received
        response: function (response) {
            if (response != null && response.status == 1 && $window.sessionStorage.token && $window.sessionStorage.isAuthenticated === 'false') {
                //AuthenticationService.isAuthenticated = true;
                $window.sessionStorage.isAuthenticated = 'true';
            }
            return response || $q.when(response);
        },
        // Revoke client authentication if 401 is received
        responseError: function (rejection) {
            if (rejection != null && rejection.status === 2 && ($window.sessionStorage.token || $window.sessionStorage.isAuthenticated === 'true')) {
                delete $window.sessionStorage.token;
                //AuthenticationService.isAuthenticated = false;
                $window.sessionStorage.isAuthenticated = 'false';
                $location.path("/admin/login");
            }

            return $q.reject(rejection);
        }
    };
});


'use strict';
/* adminControllers */

//var adminControllers = angular.module('adminControllers', ['appServices', 'textAngular']);
var adminControllers = angular.module('adminControllers', ['textAngular']);


adminControllers.controller('RepeatCtrl', function RepeatController($scope) {

    $scope.indexNumber = ($scope.$index + 1) + ($scope.currentPage) * $scope.pageSize;

});


adminControllers.controller('adminLoginCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 0;

    $scope.loginSubmit = function () {

        var username = $scope.username;
        var password = $scope.password;
        var params = {
            username: username,
            password: password
        };

        $scope.errorMessage = null;

        if (!username) {

            $scope.errorMessage = "Please enter username.";

        } else if (!password) {

            $scope.errorMessage = "Please enter password.";

        } else if (username && password) {

            $http.post($rootScope.STATIC_URL + 'admins/adminLogin', params).success(function (response) {
                console.log(response);
                if (response.status === 1) {
                    //var a = response.data2
                    $window.localStorage.isAdminAuthenticated       = 'true';
                    $window.localStorage.adminToken                 = response.data.token.token;
                    $window.localStorage.adminType                  = response.adminType;
                     console.log("      response.privileges");
                    console.log(response.privileges);
                    for (var i = 0; i < response.privileges.length; i++) {

                        if (response.privileges[i] == "Members") {
                            //$window.localStorage.privMembers = "members";
                            $rootScope.privMembers = "members";
                        }
                        if (response.privileges[i] == "Packages") {
                            //$window.localStorage.privPackages = "packages";
                            $rootScope.privPackages = "packages";
                        }
                        if (response.privileges[i] == "Settings") {
                            //$window.localStorage.privSettings = "settings";
                            $rootScope.privSettings = "settings";
                        }
                        if (response.privileges[i] == "CMS Pages") {
                            //$window.localStorage.privCmsPages = "cmsPages";
                            $rootScope.privCmsPages = "cmsPages";
                        }
                        if (response.privileges[i] == "Advertisements") {
                            //$window.localStorage.privAdvertisements = "advertisements";
                            $rootScope.privAdvertisements = "advertisements";
                        }
                        if (response.privileges[i] == "Blog") {
                            //$window.localStorage.privBlog = "blog";
                            $rootScope.privBlog = "blog";
                        }
                        if (response.privileges[i] == "Poll") {
                            //$window.localStorage.privPoll = "poll";
                            $rootScope.privPoll = "poll";
                        }
                        if (response.privileges[i] == "Reviews") {
                            //$window.localStorage.privReviews = "Reviews";
                            $rootScope.privReviews = "reviews";
                        }
                         if (response.privileges[i] == "Ad Requests") {
                            //$window.localStorage.privAdRequests = "AdRequests";
                            $rootScope.privMembers1 = "adRequests";
                        }
                        if (response.privileges[i] == "Abuses") {
                            //$window.localStorage.privAbuses = "Abuses";
                            $rootScope.privAbuses1 = "abuses";
                        }
                        if (response.privileges[i] == "Reports") {
                            //$window.localStorage.privReports = "Reports";
                            $rootScope.privReports = "reports";
                        }
                        if (response.privileges[i] == "Cancel Requests") {
                            //$window.localStorage.privCancelRequests = "CancelRequests";
                            $rootScope.privCancelRequests = "cancelRequests";
                        }

                    }

                    //$window.sessionStorage.adminPrivileges = response.privileges;
                    //$window.sessionStorage.setItem("privileges", JSON.stringify(response.privileges).replace(/"/g, ""));


                    $location.path('/admin/dashboard');
                } else {
                    $scope.errorMessage = "Invalid login credentials.";
                }

            }).error(function (err) {

                console.log("ERROR" + err);

            });
        }
    };


});

adminControllers.controller('adminDashboardCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
    $rootScope.adminNavigation = 1;
    var adminType=$window.localStorage.adminType;
   console.log($window.localStorage.privPackages);

});

adminControllers.controller('bulkEmail', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

  $rootScope.adminNavigation = 1;

	var URL=$rootScope.STATIC_URL + 'settings/sendBulkEmail';

$scope.submitForm=function(data,form)
{
	if(form.$valid){

		var startdate=$("#startdate").val();
		var enddate=$("#enddate").val();
		console.log(startdate);

		console.log(enddate);

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert="Enter your date range";
		}
		else {


		$scope.alert="Processing..";
		var email={"email": data,"startdate":startdate,"enddate":enddate};
			console.log(email);
		$http.post(URL, email).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert="email has been sent successfully..";
						$timeout(function(){
							$scope.alert=false;
						},7000)
				}

		});

	}

		}
		else {
			angular.forEach(form.$error.required, function(field){
				field.$dirty=true;

			})
		}
}

$scope.submitFormProfile=function(data,form)
{
		var startdate=$("#startdate1").val();
		var enddate=$("#enddate1").val();

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert1="Enter your date range";
		}
		else
		 {

		$scope.alert1="Processing..";
		var data={"startdate":startdate,"enddate":enddate};
		console.log(data);
			var URL1=$rootScope.STATIC_URL + 'settings/sendBulkEmailToNoProfileImage';

			$http.post(URL1, data).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert1="email has been sent successfully..";
						$timeout(function(){
							$scope.alert1=false;
						},7000)
				}

		});

	}
}



$scope.incompleteUserProfile=function(form)
{
		var startdate=$("#startdate5").val();
		var enddate=$("#enddate5").val();

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert5="Enter your date range";
		}
		else
		 {

		$scope.alert5="Processing..";
		var data={"startdate":startdate,"enddate":enddate};
		console.log(data);
			var URL1=$rootScope.STATIC_URL + 'settings/sendBulkEmailToIncompleteUser';

			$http.post(URL1, data).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert5="email has been sent successfully..";
						$timeout(function(){
							$scope.alert5=false;
						},7000)
				}

		});

	}
}


$scope.submitFormText=function(data,form)
{
		if(form.$valid)
		{
		var startdate=$("#startdate2").val();
		var enddate=$("#enddate2").val();

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert2="Enter your date range";
		}
		else
		 {

		$scope.alert2="Processing..";
		var data={"startdate":startdate,"enddate":enddate,"text":data};
		console.log(data);
			var URL2=$rootScope.STATIC_URL + 'settings/sendBulkEmailToSendText';

			$http.post(URL2, data).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert2="email has been sent successfully..";
						$timeout(function(){
							$scope.alert2=false;
						},7000)
				}

		});

	}
}
else {
	angular.forEach(form.$error.required, function(field){
		field.$dirty=true;

	})
}
}
//--
$scope.EmailToSendTextByUserFn=function(data,form)
{
		if(form.$valid)
		{
		var startdate=$("#startdate4").val();
		var enddate=$("#enddate4").val();

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert4="Enter your date range";
		}
		else
		 {
		$scope.alert4="Processing..";
		var data={"startdate":startdate,"enddate":enddate,"email":data};
		console.log(data);
			var URL4=$rootScope.STATIC_URL + 'settings/sendBulkEmailToPrimaryImage';

			$http.post(URL4, data).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert4="email has been sent successfully..";
						$timeout(function(){
							$scope.alert4=false;
						},7000)
				}

		});

	}
}
else {
	angular.forEach(form.$error.required, function(field){
		field.$dirty=true;

	})
}
}

$scope.EmailToprimaryImageFn=function(email,msg,subject,form)
{
		if(form.$valid)
		{
		var startdate=$("#startdate5").val();
		var enddate=$("#enddate5").val();

		if((startdate==null || startdate=="" ) && (enddate==null || enddate=="" ))
		{
			$scope.alert5="Enter your date range";
		}
		else
		 {
		$scope.alert5="Processing..";
		var data={"email":email ,"startdate":startdate,"enddate":enddate,"subject":subject,"text":msg}

		console.log(data);
			var URL5=$rootScope.STATIC_URL + 'settings/sendBulkEmailToSendTextByUser';

			$http.post(URL5, data).success(function (response) {
				if (response.status == 1)
				{
						$scope.alert5="email has been sent successfully..";
						$timeout(function(){
							$scope.alert5=false;
						},7000)
				}

		});

	}
}
else {
	angular.forEach(form.$error.required, function(field){
		field.$dirty=true;

	})
}
}



});

adminControllers.controller('adminPackageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;

    $scope.currentPage = 0;
    $scope.pageSize = 10;
    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $scope.checkInteger = function (x) {
        var regex = /(^\d+$)/;
        if (regex.test(x)) {
            return true;
        } else {
            return false;
        }
    }

    $http.post($rootScope.STATIC_URL + 'subscription/getAllPackages', params).success(function (response) {

        if (response.status == 1) {
            $scope.packages = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.packages).length / $scope.pageSize);
            }
        }

    });

    $scope.statusUpdate = function ($event, packageId, status) {

        var params = {
            packageId: packageId,
            status: status,
            token: $window.localStorage.adminToken
        };

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

		var msg = 'Do you want to activate this package?'; // for active status
		if(status == 'inactive'){
			msg = 'Do you want to deactivate this package?';
		}
		if(status == 'delete'){
			msg = 'Do you want to delete this package?';
		}
        if (!confirm(msg)) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'subscription/updatePackageStatus', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'subscription/getAllPackages', args).success(function (data) {
                        if (data.status == 1) {
                            $scope.packages = data.data;
                        }
                    });

                    $rootScope.addAlert(response,1500);
                }

            });

        }
    }

    $scope.addPackage = function () {

        var fd          = new FormData();
        var name        = $scope.name;
        var description = $scope.description;
        var public_photo= $scope.public_photo;
        var private_photo= $scope.private_photo;
        var videos      = $scope.videos;
        var messages    = $scope.messages;
        var cost        = $scope.cost;
        var validDays   = $scope.validDays;
        var status      = $scope.status;
        var token       = $window.localStorage.adminToken;

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $scope.errorMessage = '';

        if (!name) {

            $scope.errorMessage = 'Please enter a package name.';

        } else if (!cost || !$scope.checkInteger(cost)) {

            $scope.errorMessage = 'Please enter a valid cost.';

        } else if (!validDays || !$scope.checkInteger(validDays)) {

            $scope.errorMessage = 'Please enter number of valid days.';

        } else if (!status) {

            $scope.errorMessage = 'Please select a status.';

        } else if (name && cost && $scope.checkInteger(cost) && validDays && $scope.checkInteger(validDays) && status) {

            fd.append('name', name);
            fd.append('description', description);
            fd.append('public_photo', public_photo);
            fd.append('private_photo', private_photo);
            fd.append('videos', videos);
            fd.append('messages', messages);
            fd.append('cost', cost);
            fd.append('validDays', validDays);
            fd.append('status', status);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'subscription/addPackage', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}

            }).success(function (response) {
                if (response.status == 1) {

                    $http.post($rootScope.STATIC_URL + 'subscription/getAllPackages', args).success(function (response) {

                        if (response.status == 1) {
                            $scope.packages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.packages).length / $scope.pageSize);
                            }
                        }
                    });

                    var index = $scope.index;

                    $('#addPackage').modal('hide');
                    $scope.name = "";
                    $scope.description = "";
                    $scope.public_photo = "";
                    $scope.private_photo = "";
                    $scope.videos = "";
                    $scope.messages = "";
                    $scope.cost = "";
                    $scope.validDays = "";
                    $scope.status = "";
                }

            }).error(function (err) {
                $scope.errorMessage = "Some error occured. Please try again.";
            });

        }

    }

    $scope.getPackageById = function (packageId, index, currentPage, pageSize) {
     console.log("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        var params = {
            packageId: packageId,
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $http.post($rootScope.STATIC_URL + 'subscription/getPackageById', params).success(function (response) {

            if (response.status == 1) {
                $scope.packageDetails = response.data;
            }

        });

    }


    $scope.updatePackageDetails = function () {

        var id          = $scope.packageDetails.id;
        var name        = $scope.packageDetails.name;
        var description = $scope.packageDetails.description;
        var public_photo= $scope.packageDetails.public_photo;
        var private_photo= $scope.packageDetails.private_photo;
        var videos      = $scope.packageDetails.videos;
        var messages    = $scope.packageDetails.messages;
        var cost        = $scope.packageDetails.cost;
        var validDays   = $scope.packageDetails.validDays;
        var status      = $scope.packageDetails.status;
        var index       = $scope.index;

        $scope.errorMessage = '';


        console.log(parseInt(cost) % 1 === 0);

        if (!name) {

            $scope.errorMessage = 'Please enter a package name.';

        } else if (!cost || !$scope.checkInteger(cost)) {

            $scope.errorMessage = 'Please enter a valid cost.';

        } else if (!validDays || !$scope.checkInteger(validDays)) {

            $scope.errorMessage = 'Please enter number of valid days.';

        } else if (!status) {

            $scope.errorMessage = 'Please select a status.';

        } else if (name && cost && $scope.checkInteger(cost) && validDays && $scope.checkInteger(validDays) && status) {

            var fd = new FormData();
            fd.append('id', id);
            fd.append('name', name);
            fd.append('description', description);
            fd.append('public_photo', public_photo);
            fd.append('private_photo', private_photo);
            fd.append('videos', videos);
            fd.append('messages', messages);
            fd.append('cost', cost);
            fd.append('validDays', validDays);
            fd.append('status', status);
            fd.append('token', $window.localStorage.adminToken);

            $http.post($rootScope.STATIC_URL + 'subscription/updatePackageDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.packages[index].name = name;
                $scope.packages[index].description = description;
                $scope.packages[index].public_photo = public_photo;
                $scope.packages[index].private_photo = private_photo;
                $scope.packages[index].videos = videos;
                $scope.packages[index].messages = messages;
                $scope.packages[index].cost = cost;
                $scope.packages[index].validDays = validDays;
                $scope.packages[index].status = status;

                $('#editPackage').modal('hide');
                $rootScope.addAlert(response,1500);

            }).error(function (err) {
                $scope.errorMessage = "Some error occured. Please try again.";
            });

        }

    }

});

adminControllers.controller('manageAdPackageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;

    $scope.currentPage = 0;
    $scope.pageSize = 10;
    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $scope.checkInteger = function (x) {
        var regex = /(^\d+$)/;
        if (regex.test(x)) {
            return true;
        } else {
            return false;
        }
    }

    $http.post($rootScope.STATIC_URL + 'AdPackages/getAllPackages', params).success(function (response) {

        if (response.status == 1) {
            $scope.packages = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.packages).length / $scope.pageSize);
            }
        }

    });
    //get package details for advertisement subscription log page
 $scope.getPackageByIdSubscription = function (packageId) {
     console.log("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"+packageId);

        var params = {
            packageId: packageId,
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };
console.log(params);
        $http.post($rootScope.STATIC_URL + 'subscription/getPackageById', params).success(function (response) {

            if (response.status == 1) {
                $scope.packageDetails = response.data;
                console.log($scope.packageDetails);
            }

        });

    }

    $scope.statusUpdate = function ($event, packageId, status) {

        var params = {
            packageId: packageId,
            status: status,
            token: $window.localStorage.adminToken
        };

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        if (!confirm('Are you sure you want to ' + status + ' this Package?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'AdPackages/updatePackageStatus', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'AdPackages/getAllPackages', args).success(function (data) {
                        if (data.status == 1) {
                            $scope.packages = data.data;
                        }
                    });
                }

            });

        }
    }

    $scope.addPackage = function () {

        var fd          = new FormData();
        var name        = $scope.name;
        var description = $scope.description;
        var public_photo= $scope.public_photo;
        var private_photo= $scope.private_photo;
        var videos      = $scope.videos;
        var messages    = $scope.messages;
        var cost        = $scope.cost;
        var validDays   = $scope.validDays;
        var status      = $scope.status;
        var token       = $window.localStorage.adminToken;

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $scope.errorMessage = '';

        if (!name) {

            $scope.errorMessage = 'Please enter a package name.';

        } else if (!cost || !$scope.checkInteger(cost)) {

            $scope.errorMessage = 'Please enter a valid cost.';

        } else if (!validDays || !$scope.checkInteger(validDays)) {

            $scope.errorMessage = 'Please enter number of valid days.';

        } else if (!status) {

            $scope.errorMessage = 'Please select a status.';

        } else if (name && cost && $scope.checkInteger(cost) && validDays && $scope.checkInteger(validDays) && status) {

            fd.append('name', name);
            fd.append('description', description);
            fd.append('cost', cost);
            fd.append('validDays', validDays);
            fd.append('status', status);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'AdPackages/addPackage', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}

            }).success(function (response) {
                if (response.status == 1) {

                    $http.post($rootScope.STATIC_URL + 'AdPackages/getAllPackages', args).success(function (response) {

                        if (response.status == 1) {
                            $scope.packages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.packages).length / $scope.pageSize);
                            }
                        }
                    });

                    var index = $scope.index;

                    $('#addPackage').modal('hide');
                    $scope.name = "";
                    $scope.description = "";
                    $scope.cost = "";
                    $scope.validDays = "";
                    $scope.status = "";
                }

            }).error(function (err) {
                $scope.errorMessage = "Some error occured. Please try again.";
            });

        }

    }

    $scope.getPackageById = function (packageId, index, currentPage, pageSize) {

        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        var params = {
            packageId: packageId,
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $http.post($rootScope.STATIC_URL + 'AdPackages/getPackageById', params).success(function (response) {

            if (response.status == 1) {
                $scope.packageDetails = response.data;
            }

        });

    }

    $scope.updatePackageDetails = function () {

        var id          = $scope.packageDetails.id;
        var name        = $scope.packageDetails.name;
        var description = $scope.packageDetails.description;
        var cost        = $scope.packageDetails.cost;
        var validDays   = $scope.packageDetails.validDays;
        var status      = $scope.packageDetails.status;
        var index       = $scope.index;

        $scope.errorMessage = '';


        console.log(parseInt(cost) % 1 === 0);

        if (!name) {

            $scope.errorMessage = 'Please enter a package name.';

        } else if (!cost || !$scope.checkInteger(cost)) {

            $scope.errorMessage = 'Please enter a valid cost.';

        } else if (!validDays || !$scope.checkInteger(validDays)) {

            $scope.errorMessage = 'Please enter number of valid days.';

        } else if (!status) {

            $scope.errorMessage = 'Please select a status.';

        } else if (name && cost && $scope.checkInteger(cost) && validDays && $scope.checkInteger(validDays) && status) {

            var fd = new FormData();
            fd.append('id', id);
            fd.append('name', name);
            fd.append('description', description);
            fd.append('cost', cost);
            fd.append('validDays', validDays);
            fd.append('status', status);
            fd.append('token', $window.localStorage.adminToken);

            $http.post($rootScope.STATIC_URL + 'AdPackages/updatePackageDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.packages[index].name = name;
                $scope.packages[index].description = description;
                $scope.packages[index].cost = cost;
                $scope.packages[index].validDays = validDays;
                $scope.packages[index].status = status;

                $('#editPackage').modal('hide');

            }).error(function (err) {
                $scope.errorMessage = "Some error occured. Please try again.";
            });

        }

    }
    //Dispaly subscribers
    $scope.getAdSubscribers = function(){
         var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };
         $http.post($rootScope.STATIC_URL + 'AdPackages/getAllSubscribers', args).success(function (response) {

                        if (response.status == 1) {
                            $scope.subscribers = response.data;
                            console.log("all subscribers");
                            console.log($scope.subscribers);
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.packages).length / $scope.pageSize);
                            }
                        }
                    });
    }

});



adminControllers.controller('adminMembersCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 30;

    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getAllMembers', params).success(function (response) {

        if (response.status == 1) {
            $scope.users = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.users).length / $scope.pageSize);
            }
        }

    });

    $scope.deleteMember = function ($event, userId) {
        var params = {
            userId: userId,
            status: status,
            token: $window.localStorage.adminToken
        };
        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };
        if (!confirm('Do you really want to delete this user? All data associated with user will be deleted permanently, no data can be retrieved')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/deleteUser', params).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getAllMembers', args).success(function (data) {
                        if (data.status === 1) {
                            $scope.users = data.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.users).length / $scope.pageSize);
                            }
                            alert('User deleted');
                        }else{
							alert('Error'+data.message);
						}
                    });
                }

            });

        }
    }

    $scope.updateMemberStatus = function ($event, userId, status) {
        var params = {
            userId: userId,
            status: status,
            token: $window.localStorage.adminToken
        };
        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };
        if (!confirm('Are you sure you want to ' + status + ' this User?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'users/updateUserStatus', params).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getAllMembers', args).success(function (data) {
                        if (data.status === 1) {
                            $scope.users = data.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.users).length / $scope.pageSize);
                            }
                        }
                    });
                }

            });

        }
    }

    $scope.blacklistAMember = function ($event, userId, status) {

        var params = {
            userId: userId,
            status: status,
            token: $window.localStorage.adminToken
        };

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        var text = 'blacklist';
        if (status === 'no') {
            text = 'whitelist';
        }

        if (!confirm('Are you sure you want to ' + text + ' this User?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'users/blacklistAMember', params).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getAllMembers', args).success(function (data) {
                        if (data.status === 1) {
                            $scope.users = data.data;
                        }
                    });
                }

            });

        }
    }
    $scope.sendProfilePictureReminder = function () {

		if(confirm('Are you sure ?')){
			$http.post($rootScope.STATIC_URL + 'admins/profile_picture_reminder').success(function (response) {

				if (response.status === 1) {
					alert('Notification sent');
				}else{
					alert('Error..');
				}

			});
		}
	}

    $scope.sendPredefinedEmail = function(){
        var membergroup=$scope.memberGroup;
        console.log("^^^^^"+membergroup);
        var params={
            memberTypeGroup:membergroup,
        };
        if(membergroup){
                $http.post($rootScope.STATIC_URL + 'admins/sendPredefinedEmail',params).success(function (response) {

                if (response.status === 1) {
                     $('#predefinedMailModal').modal('hide');
                    alert('Email  sent successfully');

                }else{
                    $('#predefinedMailModal').modal('hide');
                    alert('Error in sending email. Please try again !!!');

                }

            });
        }
    }

});

adminControllers.controller('adminMembersPhotosCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    
console.log('adminMembersPhotosCtrl-----');

$rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 30;

    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getAllPohotoMembers', params).success(function (response) {

        if (response.status == 1) {
            $scope.users = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.users).length / $scope.pageSize);
            }
        }

    });
//    var params = {
//        userId: $routeParams.id,
//
//    };
//    $http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {
//
//        if (response.status == 1) {
//            $scope.member = response.data[0];
//        }
//
//    });

});

adminControllers.controller('adminMembersPhotosInfoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    
console.log('adminMembersPhotosInfoCtrl-----'+ JSON.stringify($routeParams));
//{"id":"6383"}
var userId = $routeParams.id ;
$scope.getUserPublicPhotosInfo = function(userId){
	console.log('getUserPublicPhotosAdmin '+userId);
  $http.post($rootScope.STATIC_URL + 'users/getUserPublicPhotosAdmin', {userId:userId}).success(function (response) {
		if (response.status == 1) {
        console.log("response public "+response.data);
        $scope.publicImageInfo = response.data ;
    }
  })
};
$scope.getUserPrivatePhotosInfo = function(userId){
	console.log('getUserPublicPhotosAdmin '+userId);
  $http.post($rootScope.STATIC_URL + 'users/getUserPrivatePhotosAdmin', {userId:userId}).success(function (response) {
		if (response.status == 1) {
        console.log("response public "+response.data)
        $scope.privateImageInfo = response.data ;
    }
  })
};

$scope.openImage = function(path){
	window.open(path,'_blank');
}
$scope.getUserPublicPhotosInfo(userId);
$scope.getUserPrivatePhotosInfo(userId);

/*$rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 30;

    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };*/

    /*$http.post($rootScope.STATIC_URL + 'users/getAllPohotoMembers', params).success(function (response) {

        if (response.status == 1) {
            $scope.users = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.users).length / $scope.pageSize);
            }
        }

    });*/
//    var params = {
//        userId: $routeParams.id,
//
//    };
//    $http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {
//
//        if (response.status == 1) {
//            $scope.member = response.data[0];
//        }
//
//    });

});


adminControllers.controller('membersCancelCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;

    var params = {
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'admins/getCancelMembers', params).success(function (response) {

        if (response.status == 1) {
            console.log( response.result);
            $scope.users = response.result;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.users).length / $scope.pageSize);
            }
        }

    });
    $scope.updateMemberCancelStatus = function ($event, id,userId, status) {

        var params = {
            reqid: id,
            userId: userId,
            status: status,
            token: $window.localStorage.adminToken
        };

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        if (!confirm('Are you sure you want to ' + status + ' this User?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/updateCanMemStatus', params).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'admins/getCancelMembers', args).success(function (data) {
                        if (data.status === 1) {
                            $scope.users = data.result;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.users).length / $scope.pageSize);
                            }
                        }
                    });
                }

            });

        }
    }
});
adminControllers.controller('adminMemberInfoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;

    var params = {
        userId: $routeParams.id,

    };
    $http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

});

adminControllers.controller('adminMemberReviewCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,

    };
console.log("hello"+ $routeParams.id );
    $http.post($rootScope.STATIC_URL + 'users/getMemberDetails', userParams).success(function (response) {
 console.log("*** inside get userBasicDetails");
        if (response.status == 1) {
            console.log("*** inside get userBasicDetails");
            console.log(response.data[0]);
            $scope.member = response.data[0];
        }

    });

    var params = {
        userId: $routeParams.id
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserReviews', params).success(function (response) {

        if (response.status == 1) {
            $scope.reviews = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
        }

    });


     ///***function to update status of each member review sulthan
    $scope.statusUpdateReview= function ($event, reviewId, status,memberEmail,reviewUser,approvalStatus,reviewedOnId,reviewerId,emailofReceiver,user) {

        var params = {
            ReviewId: reviewId,
            status: status,
            token: $window.localStorage.adminToken,
            email:memberEmail,
            reviewer:reviewUser,
             reviewedOnId:reviewedOnId,
            reviewerId:reviewerId,
            emailofReceiver:emailofReceiver,
            userReceived:user,

        };

        console.log(status);

      console.log("---params----");
      console.log(params);
         var paramsUser = {
        userId: $routeParams.id
    };

        if (!confirm('Are you sure want to ' + approvalStatus + ' this Review?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/UpdateReviewStatus', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getUserReviews',paramsUser).success(function (data) {

                         if(data.status==1)
             {
                 $scope.reviews=data.data;
                 console.log("-------reviews all-------");
                 console.log(response);
                  $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
                }

                    });
                }

            });

        }
    }

   ///**** delete  review by admin by each member sulthan
    $scope.deleteReview= function ($event, reviewId, status,reviewedOnId,reviewerId) {

        var params = {
            ReviewId: reviewId,
            token: $window.localStorage.adminToken,
            reviewedOnId:reviewedOnId,
            reviewerId:reviewerId,
        };
      console.log("---params----");
      console.log(params);


        if (!confirm('Are you sure you want to ' + status + ' this Review?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/deleteReview', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'admins/GetAllMembersReview').success(function (data) {

                         if(data.status==1)
             {
                 $scope.reviews=data.result;
                 console.log("-------reviews all-------");
                 console.log(response);
                  $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
                }

                    });
                }

            });

        }
    }
    //**** upto this
/// old function
/*    $scope.updateReviewStatus = function ($event, reviewId, approvalStatus) {

        var args = {
            reviewId: reviewId,
            approvalStatus: approvalStatus,
            token: $window.localStorage.adminToken
        };

        var displayStatus = (approvalStatus === 'notapproved') ? 'Not Approved' : 'Approved';

        if (!confirm('Are you sure you want to change status to ' + displayStatus + ' for this review?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/userReviewApproval', args).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getUserReviews', params).success(function (data) {
                        if (data.status === 1) {
                            $scope.reviews = data.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.reviews).length / $scope.pageSize);
                            }
                        }
                    });
                }

            });

        }
    }*/

});

adminControllers.controller('adminMemberReportCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

    var params = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserReports', params).success(function (response) {

        if (response.status == 1) {
            $scope.reports = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.reports).length / $scope.pageSize);
            }
        }

    });

    $scope.updateReportStatus = function ($event, reportId, approvalStatus) {

        var args = {
            reportId: reportId,
            approvalStatus: approvalStatus,
            token: $window.localStorage.adminToken
        };

        if (!confirm('Are you sure you want to change status to ' + approvalStatus + ' for this review?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/userReportApproval', args).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getUserReports', params).success(function (data) {
                        if (data.status === 1) {
                            $scope.reports = data.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.reports).length / $scope.pageSize);
                            }
                        }
                    });
                }

            });

        }
    }

});

adminControllers.controller('adminMemberSubscriptionCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

    $http.post($rootScope.STATIC_URL + 'subscription/getUserSubscriptions', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.subscriptions = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.subscriptions).length / $scope.pageSize);
            }
        }

    });


});

adminControllers.controller('adminMemberReferralCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

    $http.post($rootScope.STATIC_URL + 'users/getReferredUsers', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.refferedUsers = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.refferedUsers).length / $scope.pageSize);
            }
        }

    });
});

adminControllers.controller('adminMemberPhotoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

    $http.post($rootScope.STATIC_URL + 'users/getPhotosByUserId', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.photos = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.photos).length / $scope.pageSize);
            }
        }

    });

    $scope.getPhotoDetails = function (photoId, index, currentPage, pageSize) {

        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        var params = {
            photoId: photoId,
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $http.post($rootScope.STATIC_URL + 'users/getPhotoById', params).success(function (response) {

            if (response.status == 1) {
                $scope.photoDetails = response.data[0];
            }

        });

    };

    $scope.updatePhotoStatus = function ($event, photoId, status) {

        var params = {
            photoId: photoId,
            status: status,
            token: $window.localStorage.adminToken
        };

        if (!confirm('Are you sure you want to ' + status + ' this photo?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'users/updatePhotoStatus', params).success(function (response) {

                if (response.status === 1) {
                    $http.post($rootScope.STATIC_URL + 'users/getPhotosByUserId', userParams).success(function (response) {
                        if (response.status == 1) {
                            $scope.photos = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.photos).length / $scope.pageSize);
                            }
                        }
                    });
                }

            });

        }
    };

});

adminControllers.controller('adminMemberVideoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.userId = $routeParams.id;

    var userParams = {
        userId: $routeParams.id,
        userRole: 'admin',
        token: $window.localStorage.adminToken
    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.member = response.data[0];
        }

    });

    $http.post($rootScope.STATIC_URL + 'users/getVideosByUserId', userParams).success(function (response) {

        if (response.status == 1) {
            $scope.videos = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.videos).length / $scope.pageSize);
            }
        }

    });

    $scope.getVideoDetails = function (videoId, index, currentPage, pageSize) {

        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        var params = {
            videoId: videoId,
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        $http.post($rootScope.STATIC_URL + 'users/getVideoById', params).success(function (response) {

            if (response.status == 1) {
                $scope.videoDetails = response.data[0];
            }

        });

    }
});



/*===================================================================================================================================
 Manage Sub Admin Controller   -----  II
 ====================================================================================================================================*/

adminControllers.controller('manageSubAdminCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;

    $http.post($rootScope.STATIC_URL + 'admins/getSubadminList', {token: token}).success(function (response) {
        if (response.status == 1) {
            $scope.subAdmins = response.data;
            console.log("***SubAdmin Length***");
            console.log($scope.subAdmins.length);
            if($scope.subAdmins.length==0){
                $scope.noSUbAdminMsg="No SubAdmin Found";
            }
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.subAdmins).length / $scope.pageSize);
            }
        } else if (response.status == 3) {

            //$scope.errorMessage = "Token Expired";
            $window.location.href = $rootScope.STATIC_URL + 'admin/login';
        }

    });

//Add New Sub Admin
    $scope.addNewSubAdmin = function () {

        var fd = new FormData();
        var userName = $scope.newUserName;
        var firstName = $scope.newFirstName;
        var lastName = $scope.newLastName;
        var password = $scope.newPassword;
        var blockStatus = "active";

        if (!userName && !password && !firstName) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!userName) {
            $scope.errorMessage = "Please Enter a Username";
        }
        else if (!password) {
            $scope.errorMessage = "Please Enter a Password";
        }
        else if (!firstName) {
            $scope.errorMessage = "Please Enter a First Name";
        }
        else
        {
            fd.append('username', userName);
            fd.append('firstname', firstName);
            fd.append('lastname', lastName);
            fd.append('password', password);
            fd.append('blockStatus', blockStatus);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'admins/addSubadmin', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}

            }).success(function (response) {
                if (response.status == 1)
                {

                    //$scope.subAdmins.push(response.data);
                    //$scope.subAdmins.unshift(response.data);
                    //To get full active admin list
                    $http.post($rootScope.STATIC_URL + 'admins/getSubadminList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.subAdmins = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.subAdmins).length / $scope.pageSize);
                            }
                        }
                    });
                    var index = $scope.index;

                    //console.log($scope.subAdmins.username);
                    $('#newSubAdmin').modal('hide');
                    $scope.newUserName = "";
                    $scope.newFirstName = "";
                    $scope.newLastName = "";
                    $scope.newPassword = "";
                    $scope.newBlockStatus = "";
                }
            })
                    .error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });

        }
    }


// Update Block Status
    $scope.updateBlockStatus = function ($event, adminId) {

        var blockStatus = $event.currentTarget.id;

		var msg = 'Are you sure ?'; // for active status
		if(blockStatus == 'delete'){
			msg = 'Do you want to delete this user?';
		}
		if(blockStatus == 'block'){
			msg = 'Do you want to block this user?';
		}
		if(blockStatus == 'active'){
			msg = 'Do you want to activate this user?';
		}
        if (!confirm(msg))
        {
            $event.preventDefault();
        }
        else
        {
            console.log("$scope.subAdmins");
            console.log($scope.subAdmins);
            var returnedData = $.grep($scope.subAdmins, function (element, index) {
                return element.id == adminId;
            });
            console.log(blockStatus);
            request = {token: token, blockStatus: blockStatus, returnedData: returnedData[0]};
            console.log(request);


            $http.post($rootScope.STATIC_URL + 'admins/updateBlockStatus', {request: request}).success(function (response) {

                if (response.status == 1)
                {
					(function(firstResponse){
						//get full user details
						$http.post($rootScope.STATIC_URL + 'admins/getSubadminList', {token: token}).success(function (response) {
							if (response.status == 1)
							{
								$scope.subAdmins = response.data;
								$scope.numberOfPages = function () {
									return Math.ceil(($scope.subAdmins).length / $scope.pageSize);
								}
							}

						}).error(function () {
							$scope.errorMessage = "Please Try Again";
						});
						$rootScope.addAlert(firstResponse,1500);
					})(response);
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

//Edit Subadmin

    $scope.editSubAdmin = function (adminId, index, currentPage, pageSize)
    {


        request = {adminId: adminId};
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);
        //get details of a single user
        $http.post($rootScope.STATIC_URL + 'admins/getSubadminDetails', {request: request, token: token}).success(function (response) {
            if (response.status == 1)
            {
                $scope.editSubAdminDetails = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });

    }

//Update Subadmin details
    $scope.updateSubAdminDetails = function ()
    {

        var id = $scope.editSubAdminDetails.id;
        var userName = $scope.editSubAdminDetails.username;
        var firstName = $scope.editSubAdminDetails.firstname;
        var lastName = $scope.editSubAdminDetails.lastname;
        var password = $scope.editSubAdminDetails.password;
        var blockStatus = $scope.editSubAdminDetails.blockStatus;
        var adminType = $scope.editSubAdminDetails.adminType;
        var index = $scope.index;


        if (!userName && !password && !firstName) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!userName) {
            $scope.errorMessage = "Please Enter a Username";
        }
        else if (!password) {
            $scope.errorMessage = "Please Enter a Password";
        }
        else if (!firstName) {
            $scope.errorMessage = "Please Enter a First Name";
        }
        else {



            var fd = new FormData();
            fd.append('username', userName);
            fd.append('firstname', firstName);
            fd.append('lastname', lastName);
            fd.append('password', password);
            fd.append('blockStatus', blockStatus);
            fd.append('adminType', adminType);
            fd.append('id', id);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'admins/updateAdminDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.subAdmins[index].username = userName;
                $scope.subAdmins[index].firstname = firstName;
                $scope.subAdmins[index].lastname = lastName;
                $scope.subAdmins[index].password = password;
                $scope.subAdmins[index].blockStatus = blockStatus;
                $scope.subAdmins[index].adminType = adminType;

                $('#editSubAdmin').modal('hide');

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


        }
    }

    /*
     //Privileges of SubAdmin
     $scope.subAdminPrivileges = function(adminId)
     {

     request           = {adminId : adminId};
     //get Privileges of a single user
     $http.post($rootScope.STATIC_URL+'admins/getSubadminPrivileges',{request:request, token:token}).success(function(response) {
     if(response.status == 1)
     {
     console.log(response);
     $scope.editSubAdminDetails = response.data;
     }

     }).error(function(){
     $scope.errorMessage = "Please Try Again";
     });

     }
     */

});

/*===================================================================================================================================
 Sub Admin Details Controller   -----
 ====================================================================================================================================*/


adminControllers.controller('subAdminDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $timeout) {

    $rootScope.adminNavigation = 1;
    $scope.errorMessage = "";
    $scope.successMessage = "";
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    var adminId = $routeParams.adminId;
    var request = "";
    var token = $window.localStorage.adminToken;
    console.log(token);

    request = {adminId: adminId};



    /*  //get Privileges of a single user
     $http.post($rootScope.STATIC_URL + 'admins/getSubadminPrivileges', {request: request, token: token}).success(function (response) {
     if (response.status == 1)
     {
     $scope.subAdminPrivileges = response.data;

     $scope.numberOfPages = function () {
     return Math.ceil(($scope.subAdminPrivileges).length / $scope.pageSize);
     }
     }


     }).error(function () {
     $scope.errorMessage = "Please Try Again";
     });
     */
    $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegesList', {request: request, token: token}).success(function (response) {
        if (response.status == 1)
        {
            console.log("All Privileges");
            console.log(response);
            $scope.privileges = response.data1;
            $scope.selPrivileges = response.data2;

            var a_array = [];

            var a_array = [];
            for (var j = 0; j < response.data2.length; j++) {

                a_array.push(response.data2[j].privilegeId);
                console.log(response.data2[j]);
            }
            var a_arrayStr = a_array.toString().split(",");
            console.log(a_arrayStr);



            //assigning checked true
            for (var i = 0; i < response.data1.length; i++) {
                console.log("i array");
                console.log(response.data1[i].id);
                for (var k = 0; k < a_arrayStr.length; k++) {

                    if (response.data1[i].id == a_arrayStr[k]) {
                        //console.log("k array");
                        //console.log(a_arrayStr[k]);
                        $scope.privileges[i].checked = true;
                    }
                }

            }


        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


// Get All Privileges
    $scope.getAllPrivileges = function ()
    {

        /*request = {adminId : adminId};
         $scope.index      = index;
         $scope.extra      = parseInt(currentPage)*parseInt(pageSize);*/
        //get details of a single user
        $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegesList', {token: token}).success(function (response) {
            if (response.status == 1)
            {
                console.log("All Privileges");
                console.log(response);
                $scope.privileges = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });
    }



// Get All Remaining Privileges
    $scope.getRemainingPrivileges = function ()
    {

        /*request = {adminId : adminId};
         $scope.index      = index;
         $scope.extra      = parseInt(currentPage)*parseInt(pageSize);*/

        request = {adminId: adminId};
        //get Remaining Privileges of sub Admin
        $http.post($rootScope.STATIC_URL + 'admins/getRemainingPrivilegesList', {request: request, token: token}).success(function (response) {
            if (response.status == 1)
            {
                console.log("All Remaining Privileges");
                console.log(response);
                $scope.subAdminRemainingPrivileges = response.data;
                console.log($scope.subAdminRemainingPrivileges);
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });


    }



    $scope.selectedSAPrivilege = function () {
        $scope.checkedSAPrivilege = $filter('filter')($scope.privileges, {checked: true});

    }


//Add New Sub Admin Privilege
    $scope.addNewSubAdminPrivileges = function () {

        //$scope.newPrivilegeName = {};
        var chkPrivilegeArray = $scope.checkedSAPrivilege;
        console.log("Selected CheckBOx");
        console.log(adminId);

        console.log("chkPrivilegeArray   ===============");
        console.log(chkPrivilegeArray);

        request = {chkPrivilegeArray: chkPrivilegeArray, adminId: adminId};
        console.log("***New privilages***");
        console.log(request);
        $http.post($rootScope.STATIC_URL + 'admins/setSubadminPrivilege', {request: request, token: token})
                .success(function (response) {
                    if (response.status == 1)
                    {


                        request = {adminId: adminId};
                        /*
                         //get Privileges of a single user
                         $http.post($rootScope.STATIC_URL + 'admins/getSubadminPrivileges', {request: request, token: token}).success(function (response) {
                         if (response.status == 1)
                         {
                         console.log("subAdminPrivileges  ");
                         console.log(response);
                         $scope.subAdminPrivileges = response.data;
                         }

                         }).error(function () {
                         $scope.errorMessage = "Please Try Again";
                         });
                         */
                        var index = $scope.index;


                        $scope.successMessage = "Updated Successfully";
                        $timeout(function () {
                            $scope.successMessage = false;
                        }, 3000);

                    }
                })
                .error(function () {
                    $scope.errorMessage = "Please Try Again";
                });


    }



    $scope.deleteSubAdminPrivilege = function ($event, prvlLogId) {

        if (!confirm('Are you sure to delete this Privilege?'))
        {
            $event.preventDefault();
        }
        else
        {
            console.log("prvlLogId  ------------");
            console.log(prvlLogId);
            //request = {token : token, privilegeId: privilegeId};

            $http.post($rootScope.STATIC_URL + 'admins/deleteSubadminPrivilege', {id: prvlLogId, token: token}).success(function (response) {

                if (response.status == 1)
                {
                    //console.log(response);

                    request = {adminId: adminId};
                    //get Privileges of a single user
                    $http.post($rootScope.STATIC_URL + 'admins/getSubadminPrivileges', {request: request, token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            console.log("subAdminPrivileges  ");
                            console.log(response);
                            $scope.subAdminPrivileges = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });

        }

    }

});


/*===================================================================================================================================
 Privileges Controller   -----
 ====================================================================================================================================*/

adminControllers.controller('privilegesCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";

    var adminId = $routeParams.adminId;
    var request = "";
    var token = $window.localStorage.adminToken;
    console.log(token);

    request = {adminId: adminId};


    //List All Privileges
    $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegesList', {token: token}).success(function (response) {
        if (response.status == 1)
        {
            console.log("All Privileges");
            console.log(response);
            $scope.privileges = response.data;
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });

//Add New Privilege

    $scope.addNewPrivilege = function () {
        console.log("Add Clicked");
        $scope.errorMessage = "";

        var fd = new FormData();
        var name = $scope.newName;
        var description = $scope.newDescription;


        if (!name && !description) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!name) {
            $scope.errorMessage = "Please Enter a Name";
        }
        else if (!description) {
            $scope.errorMessage = "Please Enter a Description";
        }
        else
        {
            fd.append('name', name);
            fd.append('description', description);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'adminprivileges/addPrivilege', fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}

            }).success(function (response) {
                if (response.status == 1)
                {
                    //List All Privileges
                    $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegesList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            console.log("All Privileges");
                            console.log(response);
                            $scope.privileges = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });

                    var index = $scope.index;
                    $('#newPrivilege').modal('hide');
                    $scope.newName = "";
                    $scope.newDescription = "";
                }
            })
                    .error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });

        }
    }

//Edit Privilege

    $scope.editPrivilege = function (privilegeId, index, currentPage, pageSize)
    {
        $scope.errorMessage = "";
        request = {privilegeId: privilegeId};
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        //get current privilege
        $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegeDetails', {request: request, token: token}).success(function (response) {
            if (response.status == 1)
            {
                $scope.editPrivilegeDetails = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });

    }



//Update Privilege details
    $scope.updatePrivilegeDetails = function ()
    {
        console.log("Entered Update Privilege");
        var id = $scope.editPrivilegeDetails.id;
        var name = $scope.editPrivilegeDetails.name;
        var description = $scope.editPrivilegeDetails.description;
        var index = $scope.index;


        if (!name && !description) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!name) {
            $scope.errorMessage = "Please Enter a Name";
        }
        else if (!description) {
            $scope.errorMessage = "Please Enter a Description";
        }
        else
        {

            var fd = new FormData();
            fd.append('name', name);
            fd.append('description', description);
            fd.append('id', id);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'adminprivileges/updatePrivilegeDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.privileges[index].name = name;
                $scope.privileges[index].description = description;

                $('#editPrivilege').modal('hide');

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


        }
    }




//Delete Privilege

    $scope.deletePrivilege = function ($event, privilegeId) {

        if (!confirm('Are you sure to delete this Privilege?'))
        {
            $event.preventDefault();
        }
        else
        {
            request = {token: token, privilegeId: privilegeId};

            $http.post($rootScope.STATIC_URL + 'adminprivileges/deletePrivilege', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    console.log(response);

                    //Get All privileges
                    $http.post($rootScope.STATIC_URL + 'adminprivileges/getPrivilegesList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.privileges = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }


});


/*===================================================================================================================================
 Chat Settings Controller   -----
 ====================================================================================================================================*/

adminControllers.controller('chatSettingsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";

    var request = "";
    var token = $window.localStorage.adminToken;

	$scope.update = function(key,value){
		console.log(key);
		console.log(value);
		//To get full active CMS Page list
		$http.post($rootScope.STATIC_URL + 'settings/updateSiteSettings', {key: key, value: value}).success(function (response) {
			$rootScope.addAlert(response,1500);
		});
	}
    //List All Settings
    $http.post($rootScope.STATIC_URL + 'settings/getSiteSettingsList', {token: token}).success(function (response) {
        if (response.status == 1)
        {
            $scope.settings = response.data;
            console.log("***Settings length***");
            console.log($scope.settings.length);
            if($scope.settings.length==0){
                $scope.noSettingsMsg="No Settings Found.";
            }
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });
});
/*===================================================================================================================================
 Settings Controller   -----
 ====================================================================================================================================*/

adminControllers.controller('settingsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";

    var request = "";
    var token = $window.localStorage.adminToken;

    //List All Settings
    $http.post($rootScope.STATIC_URL + 'settings/getSettingsList', {token: token}).success(function (response) {
        if (response.status == 1)
        {
            $scope.settings = response.data;
            console.log("***Settings length***");
            console.log($scope.settings.length);
            if($scope.settings.length==0){
                $scope.noSettingsMsg="No Settings Found.";
            }
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


//Edit Settings
    $scope.editSettings = function (settingsId, index, currentPage, pageSize)
    {
        $scope.errorMessage = "";
        request = {settingsId: settingsId};
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        //get Settings List
        $http.post($rootScope.STATIC_URL + 'settings/getSettingsDetails', {request: request, token: token}).success(function (response) {
            if (response.status == 1)
            {
                $scope.editSettingsDetails = response.data;
                console.log($scope.editSettingsDetails);
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });

    }


//Update Settings
    $scope.updateSettingsDetails = function ()
    {
        var id = $scope.editSettingsDetails.id;
        var key = $scope.editSettingsDetails.key;
        var value = $scope.editSettingsDetails.value;
        var index = $scope.index;


        if (!value) {
            $scope.errorMessage = "Please Enter a Value";
        }
        else
        {

            var fd = new FormData();
            fd.append('key', key);
            fd.append('value', value);
            fd.append('id', id);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'settings/updateSettingsDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.settings[index].value = value;

                $('#editSettings').modal('hide');

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


        }
    }


});

/*===================================================================================================================================
 Manage CMS Page Controller   -----
 ====================================================================================================================================*/

adminControllers.controller('manageCmsPageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    console.log("manageCmsPageCtrl");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";

    //To get full active CMS Page list
    $http.post($rootScope.STATIC_URL + 'cmspage/getCmsPageList', {token: token}).success(function (response) {
        console.log("getCmsPageList   ---- inside");
        console.log(response);
        if (response.status == 1) {
            $scope.cmsPages = response.data;
            console.log("***CmsPage Length");
            console.log($scope.cmsPages.length);
            if($scope.cmsPages.length==0){
                $scope.noCmsPageMsg="No Cms Page Found";
            }
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.cmsPages).length / $scope.pageSize);
            }
        } else if (response.status == 3) {

            //$scope.errorMessage = "Token Expired";
            $window.location.href = $rootScope.STATIC_URL + 'admin/login';
        }


    });



// Update Status
    $scope.updateCmsPageStatus = function ($event, cmsPageId) {

        var cmsPageStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to ' + cmsPageStatus + ' this subAdmin?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.cmsPages, function (element, index) {
                return element.id == cmsPageId;
            });

            request = {token: token, cmsPageStatus: cmsPageStatus, returnedData: returnedData[0]};

            $http.post($rootScope.STATIC_URL + 'cmspage/updateCmsPageStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //To get full active Ad Page list
                    $http.post($rootScope.STATIC_URL + 'cmspage/getCmsPageList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.cmsPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.cmsPages).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }


    //Delete CMS Page

    $scope.deleteCmsPage = function ($event, cmsPageId) {

        if (!confirm('Are you sure to delete this CMS Page?'))
        {
            $event.preventDefault();
        }
        else
        {
            request = {token: token, cmsPageId: cmsPageId};

            $http.post($rootScope.STATIC_URL + 'cmspage/deleteCmsPage', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    console.log(response);

                    //To get full active CMS Page list
                    $http.post($rootScope.STATIC_URL + 'cmspage/getCmsPageList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.cmsPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.cmsPages).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});


/*===================================================================================================================================
 CMS Page Details Controller   -----
 ====================================================================================================================================*/

adminControllers.controller('cmsPageDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    console.log("cmsPageDetailsCtrl");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var cmsPageId = $routeParams.cmsPageId;

    request = {cmsPageId: cmsPageId};

//get Cms Page Details
    $http.post($rootScope.STATIC_URL + 'cmspage/getCmsPageDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.editCmsPageDetails = response.data;
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


// Image
    $scope.pickImage  = function (_this,type){
        $rootScope.uploadImage(_this,type,function(response){
            if (response.status === 1)
            {
                    $scope.message= response.data;
                    console.log(response.data);
            } else {
                     $scope.errorMessage = "Error in updating user fields.";
            }
        });
    },
    $scope.unlinkImage  = function (file,id,type){
        $rootScope.deleteImage(file,id,type,function(response){
            if (response.status == 1)
                    {
                        $scope.message = response.data;
                        console.log(response.data);

                    } else {
                     $scope.errorMessage = "Error in deleting";
            }
        });
    },



//Update CMS Page details
    $scope.updateCmsPageDetails = function ()
    {
        var id = $scope.editCmsPageDetails.id;
        var pageTitle = $scope.editCmsPageDetails.pageTitle;
        var content = $scope.editCmsPageDetails.content;
        var index = $scope.index;


        if (!pageTitle && !content) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!pageTitle) {
            $scope.errorMessage = "Please Enter a Page Name";
        }
        else if (!content) {
            $scope.errorMessage = "Please Enter a Content";
        }
        else
        {

            var fd = new FormData();
            fd.append('pageTitle', pageTitle);
            fd.append('content', content);
            fd.append('id', id);
            fd.append('token', token);
            console.log("fd--------------");
            console.log(pageTitle);
            $http.post($rootScope.STATIC_URL + 'cmspage/updateCmsPageDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                $scope.message = null;
                $scope.successMessage = "Successfully Updated";
                $timeout(function () {
                    $scope.successMessage = false;
                }, 3000);


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});


/*===================================================================================================================================
   Subscription Reports Controller -----
 ====================================================================================================================================*/
adminControllers.controller('subcriptionReportsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
        $rootScope.adminNavigation = 1;
        $scope.currentPage = 0;
        $scope.pageSize = 10;
        $scope.errorMessage = "";
        var request = "";
        var userRole = "admin";
        console.log(">>>>>>>>>>>>subcriptionReportsCtrl<<<<<<<<<<<<");

         request = {subscriptionReportStartDate: $scope.subscriptionReportStartDate, subscriptionReportEndDate: $scope.subscriptionReportEndDate};
         //To get full Subscription Report
        $http.post($rootScope.STATIC_URL + 'reports/getSubscriptionReport', {request : request}).success(function (response) {
                console.log("getSubscriptionReport   ---- inside");
                console.log(response);
                console.log(response.data);
                console.log(response.csvData);

                if (response.status == 1) {
                    $scope.subscriptionReports      = response.data;
                    $scope.subscriptionReportsCsv   = response.csvData;

                    $scope.subscriptionReportsCsvHeader   = response.header;
                    $scope.subscriptionReportsCsvResult   = response.data;

                    var csvFileName = HELPER_currentDate+"_"+HELPER_currentMonth+"_"+HELPER_currentYear+"_"+HELPER_currentHour+"_"+HELPER_currentMinute+"_"+HELPER_currentSecond;
                      $scope.subscriptionFileName = 'subscriptionReport_'+csvFileName+'.csv' ;
                       console.log("subscriptionFileName =======>>>>>>"+$scope.subscriptionFileName);

                    $scope.numberOfPages = function () {
                        return Math.ceil(($scope.subscriptionReports).length / $scope.pageSize);
                    }
                }
        });


        function getSubscriptionReport(){
                   request = {subscriptionReportStartDate: $scope.subscriptionReportStartDate, subscriptionReportEndDate: $scope.subscriptionReportEndDate};
                   console.log(request);
                   $http.post($rootScope.STATIC_URL + 'reports/getSubscriptionReport',{request : request}).success(function (response) {
                            if (response.status == 1) {
                                $scope.subscriptionReports      = response.data;
                                $scope.subscriptionReportsCsv   = response.csvData;

                                $scope.subscriptionReportsCsvHeader   = response.header;
                                $scope.subscriptionReportsCsvResult   = response.data;
                                var csvFileName = HELPER_currentDate+"_"+HELPER_currentMonth+"_"+HELPER_currentYear+"_"+HELPER_currentHour+"_"+HELPER_currentMinute+"_"+HELPER_currentSecond;
                                $scope.subscriptionFileName = 'subscriptionReport_'+csvFileName+'.csv' ;
                                console.log("subscriptionFileName =======>>>>>>"+$scope.subscriptionFileName);

                                $scope.numberOfPages = function () {
                                    return Math.ceil(($scope.subscriptionReports).length / $scope.pageSize);
                                }
                           }
                    });

        }
        //Download Subscription csv report
        $scope.subscriptionCsvReport = function ()
        {
               if($scope.subscriptionReportStartDate || $scope.subscriptionReportEndDate){
                    console.log("undefined =============================>>>>>>>>>>>>>>>>>>>>>>>>");
                    $scope.subscriptionReportDateErrorMsg = "Please Apply or Reset the dates";
                            $timeout(function () {
                                $scope.subscriptionReportDateErrorMsg = false;
                        }, 3000);
               }else{
                            console.log("$scope.subscriptionReports.length =============== >>");
                            console.log($scope.subscriptionReports.length);
                                if($scope.subscriptionReports.length > 0){
                                	console.log('header '+JSON.stringify($scope.subscriptionReportsCsvHeader));
                                	console.log('result '+JSON.stringify($scope.subscriptionReportsCsvResult));

                                        //getSubscriptionReport();
                                        /*var csvFileName = HELPER_currentDate+"_"+HELPER_currentMonth+"_"+HELPER_currentYear+"_"+HELPER_currentHour+"_"+HELPER_currentMinute+"_"+HELPER_currentSecond;
                                        var anchor = angular.element('<a/>');
                                         anchor.attr({
                                             href: 'data:attachment/csv;charset=utf-8,' + encodeURI($scope.subscriptionReportsCsv),
                                             target: '_blank',
                                             download: 'subscriptionReport_'+csvFileName+'.csv'
                                         })[0].click();*/
                                 }
               }

        }

        //Apply Date Subscription report
        $scope.subscriptionReportApply = function ()
        {

               console.log("subscriptionReportApply ====");
               console.log($scope.subscriptionReportStartDate);
               console.log($scope.subscriptionReportEndDate);
               var first        = new Date($scope.subscriptionReportStartDate).getTime();
               var second       = new Date($scope.subscriptionReportEndDate).getTime();
               console.log(first);
               console.log(second);
                if((typeof($scope.subscriptionReportStartDate) == "undefined" && typeof($scope.subscriptionReportEndDate) == "undefined") || ($scope.subscriptionReportStartDate == "" && $scope.subscriptionReportEndDate == ""))
                {
                        console.log("both missing");
                        $scope.subscriptionReportDateErrorMsg = "Please Select Both Dates";
                            $timeout(function () {
                                $scope.subscriptionReportDateErrorMsg = false;
                            }, 3000);
                }
               else if(((typeof($scope.subscriptionReportStartDate) == "undefined" && typeof($scope.subscriptionReportEndDate) != "undefined") || ($scope.subscriptionReportStartDate == "" && $scope.subscriptionReportEndDate != "")) || ((typeof($scope.subscriptionReportStartDate) != "undefined" && typeof($scope.subscriptionReportEndDate) == "undefined") || ($scope.subscriptionReportStartDate != "" && $scope.subscriptionReportEndDate == "")))
               {

                        console.log("1 missing");
                        $scope.subscriptionReportDateErrorMsg = "Please Select Both Dates";
                            $timeout(function () {
                                $scope.subscriptionReportDateErrorMsg = false;
                            }, 3000);

               }else{
                    console.log("1 missing   ELSE=============");

                        if(first > second){
                            console.log("first > second");
                            $scope.subscriptionReportDateErrorMsg = "First date must be lesser or equal to second date";
                            $timeout(function () {
                                $scope.subscriptionReportDateErrorMsg = false;
                            }, 3000);
                       }
                       else{
                               console.log("first <= second    Success");
                               request = {subscriptionReportStartDate: $scope.subscriptionReportStartDate, subscriptionReportEndDate: $scope.subscriptionReportEndDate};
                               console.log(request);
                               $http.post($rootScope.STATIC_URL + 'reports/getSubscriptionReport',{request : request}).success(function (response) {
                                        if (response.status == 1) {
                                            $scope.subscriptionReportStartDate = "";
                                            $scope.subscriptionReportEndDate   = "";
                                            $scope.subscriptionReports      = response.data;
                                            $scope.subscriptionReportsCsv   = response.csvData;
                                            $scope.numberOfPages = function () {
                                                return Math.ceil(($scope.subscriptionReports).length / $scope.pageSize);
                                            }

                                           /* else{
                                                 console.log("No Length =======>>>");
                                            }*/
                                       }
                                });


                       }

                }
        }
        //Reset  Subscription report
        $scope.subscriptionReportReset = function ()
        {
                $scope.subscriptionReportStartDate = "";
                $scope.subscriptionReportEndDate   = "";
                console.log("subscriptionReportReset");
                getSubscriptionReport();
        }









});
/*===================================================================================================================================
 Manage Ad Page Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('manageAdPageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";

    //To get full active AD Page list
    $http.post($rootScope.STATIC_URL + 'adpage/getAdPageList', {token: token}).success(function (response) {
        console.log("getAdPageList   ---- inside");
        console.log(response);
        if (response.status == 1) {
            $scope.adPages = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adPages).length / $scope.pageSize);
            }
        } else if (response.status == 3) {

            //$scope.errorMessage = "Token Expired";
            $window.location.href = $rootScope.STATIC_URL + 'admin/login';
        }


    });
    /*
     //Add New Ad Page
     $scope.addNewAdPage = function () {

     var fd              = new FormData();
     var name            = $scope.newName;
     var description     = $scope.newDescription;
     var cost            = $scope.newCost;

     if (!name && !description && !cost) {
     $scope.errorMessage = "Please Enter all fields";
     }
     else if (!name) {
     $scope.errorMessage = "Please Enter a Name";
     }
     else if (!description) {
     $scope.errorMessage = "Please Enter a Description";
     }
     else if (!cost) {
     $scope.errorMessage = "Please Enter a Cost";
     }
     else
     {
     fd.append('name', name);
     fd.append('description', description);
     fd.append('cost', cost);
     fd.append('token', token);

     $http.post($rootScope.STATIC_URL + 'adpage/createAdPage', fd, {
     transformRequest: angular.identity,
     headers: {'Content-Type': undefined}

     }).success(function (response) {
     if (response.status == 1)
     {

     //To get full active Ad Page list
     $http.post($rootScope.STATIC_URL + 'adpage/getAdPageList', {token: token}).success(function (response) {
     if (response.status == 1)
     {
     $scope.adPages = response.data;
     $scope.numberOfPages = function () {
     return Math.ceil(($scope.adPages).length / $scope.pageSize);
     }
     }
     });
     var index = $scope.index;

     //console.log($scope.subAdmins.username);
     $('#newAdPage').modal('hide');
     $scope.newName                  = "";
     $scope.newDescription           = "";
     $scope.newCost                  = "";
     $scope.errorMessage             = "";

     }
     }).error(function () {
     $scope.errorMessage = "Please Try Again";
     });

     }
     }
     */
//Edit Ad Page
    $scope.editAdPages = function (adPageId, index, currentPage, pageSize)
    {
        console.log("editAdPages   >>>");

        $scope.errorMessage = "";
        request = {adPageId: adPageId};
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        //get Cms Page Details
        $http.post($rootScope.STATIC_URL + 'adpage/getAdPageDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
            console.log(response);
            if (response.status == 1)
            {
                $scope.editAdPageDetails = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });

    }

//Update Ad Page details
    $scope.updateAdPageDetails = function ()
    {

        var id = $scope.editAdPageDetails.id;
        var name = $scope.editAdPageDetails.name;
        var description = $scope.editAdPageDetails.description;
        var cost = $scope.editAdPageDetails.cost;
        var index = $scope.index;


        if (!cost || isNaN(cost)) {
            $scope.errorMessage = "Please Enter a Valid Cost";
        }
        else
        {

            var fd = new FormData();
            fd.append('name', name);
            fd.append('description', description);
            fd.append('cost', cost);
            fd.append('id', id);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'adpage/updateAdPageDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.adPages[index].name = name;
                $scope.adPages[index].description = description;
                $scope.adPages[index].cost = cost;


                $('#editAdPage').modal('hide');
                $scope.errorMessage = "";

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


        }
    }

    //Delete Ad Page
    $scope.deleteAdPage = function ($event, adPageId) {

        if (!confirm('Are you sure to delete this Ad Page?'))
        {
            $event.preventDefault();
        }
        else
        {
            request = {token: token, adPageId: adPageId};

            $http.post($rootScope.STATIC_URL + 'adpage/deleteAdPage', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    console.log(response);

                    //To get full active Ad Page list
                    $http.post($rootScope.STATIC_URL + 'adpage/getAdPageList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.adPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adPages).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

// Update Status
    $scope.updateAdPageStatus = function ($event, adPageId) {

        var adPageStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to  ' + adPageStatus + '?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adPages, function (element, index) {
                return element.id == adPageId;
            });

            request = {token: token, adPageStatus: adPageStatus, returnedData: returnedData[0]};
            console.log(adPageStatus);
            console.log(returnedData[0]);
            $http.post($rootScope.STATIC_URL + 'adpage/updateAdPageStatus', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    //To get full active Ad Page list
                    $http.post($rootScope.STATIC_URL + 'adpage/getAdPageList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.adPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adPages).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }



});


/*===================================================================================================================================
 Ad in Page Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('adInPageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var adPageId = $routeParams.adPageId;
    console.log("Ad IN Page Controller------>>>>>>>");
    request = {adPageId: adPageId};

    //get all ads in this page
    $http.post($rootScope.STATIC_URL + 'adpage/getAdInPage', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.adInPages = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adInPages).length / $scope.pageSize);
            }
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });



    // Update Status
    $scope.updateAdUserStatus = function ($event, adUserId) {

        var adUserStatus = $event.currentTarget.id;
        request = {adUserId: adUserId}

        if (!confirm('Are you sure to change status to ' + adUserStatus + '?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adInPages, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adUserStatus: adUserStatus, returnedData: returnedData[0]};
            console.log("returnData");
            console.log(returnedData[0]);
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdUserStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    request = {adPageId: adPageId};
                    //get all ads in this page
                    $http.post($rootScope.STATIC_URL + 'adpage/getAdInPage', {request: request, token: token, userRole: userRole}).success(function (response) {

                        console.log(response);
                        if (response.status == 1)
                        {
                            $scope.adInPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adInPages).length / $scope.pageSize);
                            }

                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

    // Update BannerType
    $scope.updateAdBannerType = function ($event, adUserId) {

        var adBannerType = $event.currentTarget.id;

        if (!confirm('Do you want to mark it as a ' + adBannerType + ' Ad?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adInPages, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adBannerType: adBannerType, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdBannerType', {request: request}).success(function (response) {
                console.log("updateAdBannerType     response ");
                console.log(response);
                if (response.status == 1)
                {
                    request = {adPageId: adPageId};
                    //get all ads in this page
                    $http.post($rootScope.STATIC_URL + 'adpage/getAdInPage', {request: request, token: token, userRole: userRole}).success(function (response) {

                        console.log(response);
                        if (response.status == 1)
                        {
                            $scope.adInPages = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adInPages).length / $scope.pageSize);
                            }

                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});
/*===================================================================================================================================
 Manage Ad Position Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('manageAdPositionCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";


    //To get full active AD Position list
    $http.post($rootScope.STATIC_URL + 'adposition/getAdPositionList', {token: token}).success(function (response) {
        if (response.status == 1) {
            $scope.adPositions = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adPositions).length / $scope.pageSize);
            }
        } else if (response.status == 3) {

            //$scope.errorMessage = "Token Expired";
            $window.location.href = $rootScope.STATIC_URL + 'admin/login';
        }


    });

//Edit Ad Page

    $scope.editAdPositions = function (adPositionId, index, currentPage, pageSize)
    {

        $scope.errorMessage = "";
        request = {adPositionId: adPositionId};
        $scope.index = index;
        $scope.extra = parseInt(currentPage) * parseInt(pageSize);

        //get Cms Page Details
        $http.post($rootScope.STATIC_URL + 'adposition/getAdPositionDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
            console.log(response);
            if (response.status == 1)
            {
                $scope.editAdPositionDetails = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });

    }

//Update Ad Position details
    $scope.updateAdPositionDetails = function ()
    {

        var id = $scope.editAdPositionDetails.id;
        var name = $scope.editAdPositionDetails.name;
        var description = $scope.editAdPositionDetails.description;
        var cost = $scope.editAdPositionDetails.cost;
        var index = $scope.index;


        if (!cost || isNaN(cost)) {
            $scope.errorMessage = "Please Enter a Valid Cost";
        }
        else
        {

            var fd = new FormData();
            fd.append('name', name);
            fd.append('description', description);
            fd.append('cost', cost);
            fd.append('id', id);
            fd.append('token', token);

            $http.post($rootScope.STATIC_URL + 'adposition/updateAdPositionDetails', fd,
                    {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}
                    }).success(function (response) {

                index = $scope.index + $scope.extra;
                $scope.adPages[index].name = name;
                $scope.adPages[index].description = description;
                $scope.adPages[index].cost = cost;


                $('#editAdPosition').modal('hide');
                $scope.errorMessage = "";

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


        }
    }

    //Delete Ad Position
    $scope.deleteAdPosition = function ($event, adPositionId) {

        if (!confirm('Are you sure to delete this Ad Position?'))
        {
            $event.preventDefault();
        }
        else
        {
            request = {token: token, adPositionId: adPositionId};

            $http.post($rootScope.STATIC_URL + 'adposition/deleteAdPosition', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    console.log(response);

                    //To get full active Ad Position list
                    $http.post($rootScope.STATIC_URL + 'adposition/getAdPositionList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.adPositions = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adPositions).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

// Update Status
    $scope.updateAdPositionStatus = function ($event, adPositionId) {

        var adPositionStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to ' + adPositionStatus + '?'))
        //if (!confirm('Do you want to mark it as a '+adBannerType+' Ad?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adPositions, function (element, index) {
                return element.id == adPositionId;
            });

            request = {token: token, adPositionStatus: adPositionStatus, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'adposition/updateAdPositionStatus', {request: request}).success(function (response) {

                if (response.status == 1)
                {
                    //To get full active Ad Position list
                    $http.post($rootScope.STATIC_URL + 'adposition/getAdPositionList', {token: token}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.adPositions = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adPositions).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }



});

/*===================================================================================================================================
 Ad in Position Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('adInPositionCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var adPositionId = $routeParams.adPositionId;
    console.log("Ad IN Page Controller------>>>>>>>");
    request = {adPositionId: adPositionId};

    //get all ads in this position
    $http.post($rootScope.STATIC_URL + 'adposition/getAdInPosition', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.adInPositions = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adInPositions).length / $scope.pageSize);
            }
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });



    // Update Status
    $scope.updateAdUserStatus = function ($event, adUserId) {

        var adUserStatus = $event.currentTarget.id;
        request = {adUserId: adUserId}

        if (!confirm('Are you sure to change status to ' + adUserStatus + '?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adInPositions, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adUserStatus: adUserStatus, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdUserStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    request = {adPositionId: adPositionId};
                    //get all ads in this position
                    $http.post($rootScope.STATIC_URL + 'adposition/getAdInPosition', {request: request, token: token, userRole: userRole}).success(function (response) {
                        console.log(response);
                        if (response.status == 1)
                        {
                            $scope.adInPositions = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adInPositions).length / $scope.pageSize);
                            }
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

    // Update BannerType
    $scope.updateAdBannerType = function ($event, adUserId) {

        var adBannerType = $event.currentTarget.id;

        if (!confirm('Do you want to mark it as a ' + adBannerType + ' Ad?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adInPositions, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adBannerType: adBannerType, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdBannerType', {request: request}).success(function (response) {
                console.log("updateAdBannerType     response ");
                console.log(response);
                if (response.status == 1)
                {
                    request = {adPositionId: adPositionId};
                    //get all ads in this position
                    $http.post($rootScope.STATIC_URL + 'adposition/getAdInPosition', {request: request, token: token, userRole: userRole}).success(function (response) {
                        console.log(response);
                        if (response.status == 1)
                        {
                            $scope.adInPositions = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adInPositions).length / $scope.pageSize);
                            }
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});


/*===================================================================================================================================
 Manage Ad Cost Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('manageAdCostCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $compile, $timeout) {
    console.log("manageAdCostCtrl   >>>>>>>>>>>");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";

    //To get full Ad Cost list
    $http.post($rootScope.STATIC_URL + 'adcost/getAdCostList', {token: token}).success(function (response) {

        if (response.status == 1) {
            console.log(response);
            $scope.adCosts = response.data;
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adUsers).length / $scope.pageSize);
            }
        }

    });


   //get adCost Details
   $scope.editCostAd = function (adCostId, index, currentPage, pageSize) {

            console.log("editcostAdeditcostAd --------");
          request = {adCostId:adCostId};
          $http.post($rootScope.STATIC_URL + 'adcost/getAdCostDetails', {request: request, token: token}).success(function (response) {
                console.log(response);
                if (response.status == 1)
                {
                    $scope.editAdCostDetails = response.data;
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });

   }

   //Update Cost Details
   $scope.updateAdCostDetails = function () {

       if (!$scope.editAdCostDetails.cost || isNaN($scope.editAdCostDetails.cost)) {
                 $scope.errorMessage = "Please Enter a Valid Cost";
            $timeout(function () {
                 $scope.errorMessage = false;
             }, 3000);
       }else{

           request = {adCostId:$scope.editAdCostDetails.id, cost: $scope.editAdCostDetails.cost};
          $http.post($rootScope.STATIC_URL + 'adcost/updateAdCostDetails', {request: request, token: token}).success(function (response) {
                console.log(response);
                if (response.status == 1)
                {
                        //To get full Ad Cost list
                        $http.post($rootScope.STATIC_URL + 'adcost/getAdCostList', {token: token}).success(function (response) {

                            if (response.status == 1) {
                                console.log(response);
                                $scope.adCosts = response.data;
                                $scope.numberOfPages = function () {
                                    return Math.ceil(($scope.adCosts).length / $scope.pageSize);
                                }
                            }

                        });

                        $('#editAdCost').modal('hide');
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });

       }

   }

   /* $scope.getAdPagePosition = function () {

            //To get full active AD Page list
            $http.post($rootScope.STATIC_URL + 'adpage/getAdPageList', {token: token}).success(function (response) {
                if (response.status == 1) {
                    $scope.adPages = response.data;
                    $scope.numberOfPages = function () {
                        return Math.ceil(($scope.adPages).length / $scope.pageSize);
                    }
                }
            });


             //To get full active AD Position list
            $http.post($rootScope.STATIC_URL + 'adposition/getAdPositionList', {token: token}).success(function (response) {
                if (response.status == 1) {
                    $scope.adPositions = response.data;
                    $scope.numberOfPages = function () {
                        return Math.ceil(($scope.adPositions).length / $scope.pageSize);
                    }
                }
            });

     }


     $scope.addNewCost = function () {

           selectAdPage
           selectAdPosition
           adCost
             console.log("Submit");
           if(!$scope.selectAdPage && !$scope.selectAdPosition && !$scope.adCost){
               $scope.errorMessage ="All fields are Required";
           }else if(!$scope.selectAdPage){
                 $scope.errorMessage ="Please select a Page";
           }else if(!$scope.selectAdPosition){
                 $scope.errorMessage ="Please select a Position";
           }else if(!$scope.adCost){
                 $scope.errorMessage ="Please enter valid cost";
           }
     }*/

});

/*===================================================================================================================================
 Manage Ad User Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('manageAdUserCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $compile,  $timeout) {


    console.log("manageAdUserCtrl   >>>>>>>>>>>");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";

    //To get full User Ad list
    $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {
console.log("User Add Response");
        if (response.status == 1) {
            console.log("User Add Response");
            console.log(response);
            $scope.adUsers = response.data;
            console.log("Banner Data Length");
            console.log(response.data.length);
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.adUsers).length / $scope.pageSize);
            }
        } else if (response.status == 3) {

            //$scope.errorMessage = "Token Expired";
            $window.location.href = $rootScope.STATIC_URL + 'admin/login';
        }


    });



// Update Status
    $scope.updateAdUserStatus = function ($event, adUserId) {

        var adUserStatus = $event.currentTarget.id;

       if (!confirm('Are you sure to change this Advertisement as  ' + adUserStatus + '?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adUsers, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adUserStatus: adUserStatus, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdUserStatus', {request: request}).success(function (response) {
                console.log("updateAdUserStatus     response ");
                console.log(response);
                if (response.status == 1)
                {
                    //To get full User Ad list
                    $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {
                        if (response.status == 1) {
                            $scope.adUsers = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adUsers).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

// Update BannerType
    $scope.updateAdBannerType = function ($event, adUserId) {

        var adBannerType = $event.currentTarget.id;

        if (!confirm('Do you want to mark it as a '+adBannerType+' Ad?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.adUsers, function (element, index) {
                return element.id == adUserId;
            });

            request = {token: token, adBannerType: adBannerType, returnedData: returnedData[0]};
            $http.post($rootScope.STATIC_URL + 'aduser/updateAdBannerType', {request: request}).success(function (response) {
                console.log("updateAdBannerType     response ");
                console.log(response);
                if (response.status == 1)
                {
                    //To get full User Ad list
                    $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {
                        if (response.status == 1) {
                            $scope.adUsers = response.data;
                            $scope.numberOfPages = function () {
                                return Math.ceil(($scope.adUsers).length / $scope.pageSize);
                            }
                        }
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }


     $scope.addAdvertisement = function () {

           console.log("Entered PAge POsition");


             //To get full active AD Cost list
            $http.post($rootScope.STATIC_URL + 'adcost/getAdCostList', {token: token}).success(function (response) {
                if (response.status == 1) {
                    $scope.adCosts = response.data;
                    $scope.numberOfPages = function () {
                        return Math.ceil(($scope.adCosts).length / $scope.pageSize);
                    }
                }
            });

     }

    //Get Search Users and append
        $scope.searchUser = function () {
            $scope.appendName = false;
            var newElement = angular.element(document.querySelector('#appendNameOfUser'));
            newElement.empty();

            var nameOfUser = $scope.adUserName;
            request = {userRole: userRole, nameOfUser: nameOfUser};
            console.log(request);
            $http.post($rootScope.STATIC_URL + 'users/getSearchUsers', {token: token, request: request}).success(function (response) {
                if (response.status == 1)
                {
                    console.log(response);
                    //to photo key start
                	$scope.mailSearchUsers = response.data;
                	//to photo key end
                    for (var i = 0; i < response.data.length; i++) {
                        var html = "<div id=" + response.data[i].id + " data-id= '" + response.data[i].username + "' ng-click='nameClick($event)'>" + response.data[i].username + "</div>";
                        newElement.append($compile(html)($scope));
                    }

                }

            });
        }

        //Click After, dynamically generated nameOfUser
        $scope.nameClick = function ($event) {
            console.log("userId =========");
            //console.log(adUsername);
            //console.log(adUserId);

            //console.log(userId);
            //console.log("$event.currentTarget.id ==============");
            //console.log($event.currentTarget.id);
            $scope.appendName = true;
            $scope.adUserName = $event.currentTarget.attributes[1].nodeValue;
            $scope.adUserId = $event.currentTarget.id;
            //$scope.adUserName    = adUsername;
            //$scope.adUserId      = adUserId;
        }

/*$scope.bannerImg = function (event) {
    console.log("Bannerrrrr Image");
    console.log(event.files);
    var reader = new FileReader();
    //console.log(bannerImg.files[0]);
    reader.readAsDataURL(bannerImg.files[0]);
}
*/


     //Add New Ad Submission
     $scope.addNewAdSubmit = function () {
console.log("xxxxxxxxxxxxxxxxxxxx");

                  $scope.errorMessage = "";
                  var fd = new FormData();

                    if(!$scope.adUserId && (typeof($scope.selectBannerType) === "undefined" || $scope.selectBannerType === "") && (typeof($scope.selectAdPosition) === "undefined" ||  $scope.selectAdPosition === "") && (typeof($scope.bannerPic) === "undefined" || $scope.bannerPic === "" )) {
                            $scope.errorMessage = "All fields are Mandatory";
                            $timeout(function () {
                                 $scope.errorMessage = false;
                             }, 3000);
                    }else if(!$scope.adUserId){
                            $scope.errorMessage = "Please enter a valid user";
                            $timeout(function () {
                                 $scope.errorMessage = false;
                             }, 3000);
                    }else if(typeof($scope.selectBannerType) === "undefined" || $scope.selectBannerType === ""){
                            $scope.errorMessage = "Please Select a Banner Type";
                            $timeout(function () {
                                 $scope.errorMessage = false;
                             }, 3000);
                    }else if(typeof($scope.selectAdPosition) === "undefined" || $scope.selectAdPosition === ""){
                            $scope.errorMessage = "Please Select an Ad Position";
                            $timeout(function () {
                                 $scope.errorMessage = false;
                             }, 3000);
                    }else if(typeof($scope.bannerPic) === "undefined" || $scope.bannerPic === ""){
                            $scope.errorMessage = "Please Select a banner";
                            $timeout(function () {
                                 $scope.errorMessage = false;
                             }, 3000);
                    }else{


                   console.log($scope.bannerPic);
                   console.log(token);
                   console.log($scope.adUrlLink);
                   console.log($scope.validDays)
                        fd.append('adminToken', $window.localStorage.adminToken);
                        fd.append('adPositionId', $scope.selectAdPosition);
                        fd.append('userId', $scope.adUserId);
                        fd.append('bannerType', $scope.selectBannerType);
                        fd.append('adUrlLink',$scope.adUrlLink);
                        fd.append('validDays',$scope.validDays);
                        fd.append('bannerPic', $scope.bannerPic);

                        $http.post($rootScope.STATIC_URL + 'aduser/createAdUser', fd, {
                            transformRequest: angular.identity,
                            token:$window.localStorage.adminToken,
                            headers: {'Content-Type': undefined}

                        }).success(function (response) {
                             if (response.status == 1) {

                                $('#addnewAd').modal('hide');

                                //$scope.bannerPic            = "";
                                $scope.selectAdPosition     = "";
                                $scope.adUserId             = "";
                                $scope.adUserName           = "";
                                $scope.selectBannerType     = "";

                                //To get full User Ad list
                                    $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {
                                        if (response.status == 1) {
                                            $scope.adUsers = response.data;
                                            $scope.numberOfPages = function () {
                                                return Math.ceil(($scope.adUsers).length / $scope.pageSize);
                                            }
                                        }
                                    });
                            }
                       });

                    }
     }

     //adCost Click
      $scope.adCostClick = function (){

          //To get full active AD Cost list
            $http.post($rootScope.STATIC_URL + 'adcost/getAdCostList', {token: token}).success(function (response) {
                if (response.status == 1) {
                    $scope.adCosts = response.data;
                    $scope.numberOfPages = function () {
                        return Math.ceil(($scope.adCosts).length / $scope.pageSize);
                    }
                }
            });

      }

     //Edit AdUser
     $scope.editAdUsers = function (adUserId,  index, currentPage, pageSize) {

            console.log("Edit User -------");
            $scope.errorMessage = "";
            request = {adUserId: adUserId};
            $scope.index = index;
            $scope.extra = parseInt(currentPage) * parseInt(pageSize);



            //get Cms Page Details
            $http.post($rootScope.STATIC_URL + 'aduser/getAdUserDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
                console.log(response);
                if (response.status == 1)
                {
                    $scope.editAdUserDetails = response.data;
                }
                console.log($scope.editAdUserDetails)

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });


     }

   //Update AdUser Details
   $scope.updateAdUserDetails = function () {

       var fd = new FormData();
       /*if ((typeof($scope.selectAdPosition) === "undefined" || $scope.selectAdPosition === "" || typeof($scope.editAdUserDetails.position) === "undefined" || $scope.editAdUserDetails.position === "") && (typeof($scope.bannerPic) === "undefined" || $scope.bannerPic === "") &&  !$scope.editAdUserDetails.bannerValidityDays) {
                 $scope.errorMessage = "All fields are Mandatory";
                    $timeout(function () {
                         $scope.errorMessage = false;
                     }, 3000);*/
        /*}else if(typeof($scope.selectAdPosition) === "undefined" || typeof($scope.editAdUserDetails.position) === "undefined"){
                $scope.errorMessage = "Please Select an Ad Position";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);*/
          /*}else if(typeof($scope.selectAdPosition) === "undefined" || typeof($scope.editAdUserDetails.position) === "undefined"){
                $scope.errorMessage = "Please Select an Ad Position";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
       }*/
        /*if(typeof($scope.bannerPic) === "undefined" || $scope.bannerPic === ""){
                $scope.errorMessage = "Please Select a Banner";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
        }else*/
        if(!$scope.editAdUserDetails.bannerValidityDays || isNaN($scope.editAdUserDetails.bannerValidityDays)){
                $scope.errorMessage = "Please Enter a valid Banner Validity Days";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
        }
         else{

               var adCostId;
               if($scope.selectAdPosition){
                    adCostId = $scope.selectAdPosition;
               }else if($scope.editAdUserDetails.position){
                       /*console.log("======$scope.selectAdPosition==========");
                       console.log($scope.selectAdPosition);
                      console.log(typeof($scope.selectAdPosition));
                     if($scope.selectAdPosition === ""){
                            $scope.errorMessage = "Please Select an Ad Position";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                            return false;

                      }else{*/
                         adCostId = $scope.editAdUserDetails.adCostId;
                       //}
               }

                console.log("adCostId >>>>>>>>>>");
               console.log(adCostId);

             /*  request = {
                            adUserId                    :   $scope.editAdUserDetails.id,
                            bannerValidityDays          :   $scope.editAdUserDetails.bannerValidityDays,
                            adCostId                    :   adCostId
                        };
              $http.post($rootScope.STATIC_URL + 'aduser/updateAdUserDetails', {request: request, token: token}).success(function (response) {
                    console.log(response);
                    if (response.status == 1)
                    {

                        $('#editAdUser').modal('hide');
                            //To get full Ad User list
                            $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {

                                if (response.status == 1) {
                                    console.log(response);
                                    $scope.adUsers = response.data;
                                    $scope.numberOfPages = function () {
                                        return Math.ceil(($scope.adUsers).length / $scope.pageSize);
                                    }
                                }

                            });


                    }

                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                });*/

                fd.append('adUserId', $scope.editAdUserDetails.id);
                fd.append('bannerValidityDays', $scope.editAdUserDetails.bannerValidityDays);
                fd.append('adCostId', adCostId);
                fd.append('bannerPic', $scope.bannerPic);
                fd.append('token', token);

                $http.post($rootScope.STATIC_URL + 'aduser/updateAdUserDetails', fd, {
                    transformRequest: angular.identity,
                    headers: {'Content-Type': undefined}

                }).success(function (response) {
                     if (response.status == 1) {

                          console.log(response);
                        $('#editAdUser').modal('hide');

                        //$scope.bannerPic            = "";
                        $scope.editAdUserDetails.id                             = "";
                        $scope.editAdUserDetails.bannerValidityDays             = "";
                        //$scope.selectAdPosition                                 = "undefined";
                        $scope.bannerPic                                        = "";

                        //To get full User Ad list
                            $http.post($rootScope.STATIC_URL + 'aduser/getAdUserList', {token: token, userRole: userRole}).success(function (response) {
                                if (response.status == 1) {
                                    $scope.adUsers = response.data;
                                    $scope.numberOfPages = function () {
                                        return Math.ceil(($scope.adUsers).length / $scope.pageSize);
                                    }
                                }
                            });
                    }
               });

       }

   }


});

/*===================================================================================================================================
 Ad User Details Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('adUserDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    console.log("adUserDetailsCtrl   >>>>>>>>>>>");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var userAdId = $routeParams.userAdId;


    request = {userAdId: userAdId};

    //get Ad User Details
    $http.post($rootScope.STATIC_URL + 'aduser/getAdUserDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            //$scope.editCmsPageDetails = response.data;
            $scope.adUsersDetails = response.data;
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });

});



/*===================================================================================================================================
 Manage Blog Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('manageBlogCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {


    console.log("manageBlogCtrl   >>>>>>>>>>>");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";


    //get all Blog List
    $http.post($rootScope.STATIC_URL + 'blog/getBlogList', {token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.blogs = response.data;
            console.log("****Blog Length****");
            console.log($scope.blogs.length);
            if($scope.blogs.length==0){
                $scope.noBlogMsg="No Blog Found";
            }
            $scope.numberOfPages = function () {
                return Math.ceil(($scope.blogs).length / $scope.pageSize);
            }

        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });



// Update Status
    $scope.updateBlogStatus = function ($event, blogId) {

        var blogStatus = $event.currentTarget.id;


		var msg = 'Are you sure to ' + blogStatus + ' this blog?';
		if(blogStatus == 'delete'){
			msg = 'Do you really want to delete this blog permanently ?';
		}

        if (!confirm(msg))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.blogs, function (element, index) {
                return element.id == blogId;
            });

            request = {token: token, blogStatus: blogStatus, returnedData: returnedData[0]};

            $http.post($rootScope.STATIC_URL + 'blog/updateBlogStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //get all Blog List
                    $http.post($rootScope.STATIC_URL + 'blog/getBlogList', {token: token, userRole: userRole}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.blogs = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

    // Update ApprovalStatus
    $scope.updateApprovalStatus = function ($event, blogId,status) {
        console.log("blog_status"+status);
        var statusUpdated=status;
        var approvalStatus = $event.currentTarget.id;

		var msg = 'Are you sure ?';
		if(status == 'approved'){
			msg = 'Do you want to approve this blog';
		}
		if(status == 'rejected'){
			msg = 'Do you really want to reject this blog';
		}
        if (!confirm(msg))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.blogs, function (element, index) {
                return element.id == blogId;
            });
              console.log("****returnedData***");
            console.log(returnedData[0]);
            request = {token: token, approvalStatus: approvalStatus, returnedData: returnedData[0],status:statusUpdated};
             console.log(request);
            $http.post($rootScope.STATIC_URL + 'blog/updateApprovalStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //get all Blog List
                    $http.post($rootScope.STATIC_URL + 'blog/getBlogList', {token: token, userRole: userRole}).success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.blogs = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});

/*===================================================================================================================================
 Add New Blog  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('addNewBlogCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    console.log("addNewBlogCtrl");
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";


    // Image
    $scope.pickImage  = function (_this,type){
        $rootScope.uploadImage(_this,type,function(response){
            if (response.status === 1)
            {
                    $scope.message= response.data;
                    console.log(response.data);
            } else {
                     $scope.errorMessage = "Error in updating user fields.";
            }
        });
    },
    $scope.unlinkImage  = function (file,id,type){
        $rootScope.deleteImage(file,id,type,function(response){
            if (response.status == 1)
                    {
                        $scope.message = response.data;
                        console.log(response.data);

                    } else {
                     $scope.errorMessage = "Error in deleting";
            }
        });
    },
    //Add New Blog
    $scope.addNewBlog = function () {
        $scope.errorMessage = "";
        var fd = new FormData();
        var fd1 = new FormData();
        var title = $scope.newTitle;
        var description = $scope.newDescription;
        var featuredImage = $scope.newFeaturedImage;
        console.log("blog short desc");
    console.log($scope.shortDescription);

        if (!title && !description) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!title || !isNaN(title)) {
            $scope.errorMessage = "Please Enter a valid Title";
        }
        else if (!description) {
            $scope.errorMessage = "Please Enter a Description";
        }
        else if(!$scope.shortDescription){
            $scope.errorMessage = "Please Enter a Short Description";
        }

        else
        {
            fd.append('title', title);
            fd.append('description', description);
            fd.append('shortDesc',$scope.shortDescription);
            fd1.append('attachments',featuredImage);
            fd.append('userRole', userRole);
            fd.append('token', token);
            $http.post($rootScope.STATIC_URL + 'blog/uploadImage',fd1,{
                    transformRequest: angular.identity,
                    headers: {'Content-Type': undefined}
                    }).success(function (response) {
                        fd.append('featuredImage',response.data[0].fname);
                        if (response.status === 1)
                        {
                            $http.post($rootScope.STATIC_URL + 'blog/addBlog', fd, {
                                transformRequest: angular.identity,
                                headers: {'Content-Type': undefined}

                            }).success(function (response) {
                                if (response.status == 1)
                                {
                                    $window.history.back();

                                }
                            }).error(function () {
                                $scope.errorMessage = "Please Try Again";
                            });
                        }
                    });


        }

    }
});

/*===================================================================================================================================
 Edit Blog  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('editBlogCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
         console.log("editBlogCtrl");

         $scope.errorMessage = "";
         var request = "";
         var token = $window.localStorage.adminToken;
         var userRole = "admin";
        request = {blogId: $routeParams.blogId};
            // Image Uploading in Blog

    // Image
    $scope.pickImage  = function (_this,type){
        $rootScope.uploadImage(_this,type,function(response){
            if (response.status === 1)
            {
                    $scope.message= response.data;
                    console.log(response.data);
            } else {
                     $scope.errorMessage = "Error in updating user fields.";
            }
        });
    },
    $scope.unlinkImage  = function (file,id,type){
        $rootScope.deleteImage(file,id,type,function(response){
            if (response.status == 1)
                    {
                        $scope.message = response.data;
                        console.log(response.data);

                    } else {
                     $scope.errorMessage = "Error in deleting";
            }
        });
    },
    // Delete the uploaded image

    $scope.deleteBlogImage = function (data,id) {
            var msg=confirm("Are you sure you want to delete");
            if(msg===true)
            {

                $http.post($rootScope.STATIC_URL + 'blog/deleteImage', {request: request, token: token, data: data, id:id}).success(function (response) {
                    if (response.status == 1)
                    {
                        $scope.message = response.data;
                        console.log(response.data);

                    }

                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                });
            }
    },
        //get Blog Details
        $http.post($rootScope.STATIC_URL + 'blog/getBlogDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
            console.log("get blog Details >>>>>>>>>>>");
            console.log(response);

            if (response.status == 1)
            {
                $scope.editBlogDetails = response.data;

            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });



    //Update Blog details

    $scope.updateBlogDetails = function ()
    {
        var id = $scope.editBlogDetails.id;
        var title = $scope.editBlogDetails.title;
        var description = $scope.editBlogDetails.description;
        var featuredImage = $scope.editBlogDetails.featuredImage;
        var index = $scope.index;

        if (!title && !description) {
            $scope.errorMessage = "Please Enter all fields";
            $timeout(function () {
                    $scope.errorMessage = false;
             }, 3000);
        }
        else if (!title || !isNaN(title))
        {
            $scope.errorMessage = "Please Enter a valid Title";
            $timeout(function () {
                    $scope.errorMessage = false;
             }, 3000);
        }
        else if (!description)
        {
            $scope.errorMessage = "Please Enter a Description";
            $timeout(function () {
                    $scope.errorMessage = false;
             }, 3000);
        }
        else
        {

            var fd = new FormData();
            var fd1 = new FormData();
            fd.append('title', title);
            fd.append('description', description);
             fd1.append('attachments',featuredImage);
            fd.append('id', id);
            fd.append('token', token);
              console.log("featuredImage-------------------?");
            console.log(typeof $scope.editBlogDetails.featuredImage);
            if(typeof $scope.editBlogDetails.featuredImage == 'object')
            {
                $http.post($rootScope.STATIC_URL + 'blog/uploadImage',fd1,{
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
                }).success(function (response) {

                	if(typeof response.data[0] !=='undefined'){
                		fd.append('featuredImage',response.data[0].fname);
                	}
                    
                    if (response.status === 1)
                    {

                        $http.post($rootScope.STATIC_URL + 'blog/updateBlogDetails', fd,
                                {
                                    transformRequest: angular.identity,
                                    headers: {'Content-Type': undefined}
                                }).success(function (response) {

                            if (response.status == 1)
		                     {
		                        $window.history.back();

		                    }
                            /*$location.path('admin/blog/editBlog/'+response.data[0].urlTitle);
                            $scope.successMessage = "Succesfully updated";
                            $scope.message = null;
                            $timeout(function () {
                                $scope.successMessage = false;
                            }, 3000);

                            $scope.errorMessage = "";*/

                        }).error(function () {
                            $scope.errorMessage = "Please Try Again";
                        });
                    }
                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                });
            }
            else
            {
                $http.post($rootScope.STATIC_URL + 'blog/updateBlogDetails', fd,
                                {
                                    transformRequest: angular.identity,
                                    headers: {'Content-Type': undefined}
                                }).success(function (response) {

                                	if (response.status == 1)
				                     {
				                        $window.history.back();

				                    }
                            /*$location.path('admin/blog/editBlog/'+response.data[0].urlTitle);
                            $scope.successMessage = "Succesfully updated";
                            $scope.message = null;
                            $timeout(function () {
                                $scope.successMessage = false;
                            }, 3000);

                            $scope.errorMessage = "";*/

                        }).error(function () {
                            $scope.errorMessage = "Please Try Again";
                        });
            }


        }
    }
});


/*===================================================================================================================================
 Blog Details  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('blogDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var blogId = $routeParams.blogId;


    request = {blogId: blogId};


    //get Blog Details
    $http.post($rootScope.STATIC_URL + 'blog/getBlogDetails', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.blogDetails = response.data;
        }


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


});


/*===================================================================================================================================
 Blog Comments  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('blogCommentsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var blogId = $routeParams.blogId;


    request = {blogId: blogId};

    //get Comment List
    $http.post($rootScope.STATIC_URL + 'blog/getBlogcommentList', {request: request, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.blogComments = response.data;

            $scope.numberOfPages = function () {
                return Math.ceil(($scope.blogComments).length / $scope.pageSize);
            }
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


// Update ApprovalStatus
    $scope.updateBlogCommentApprovalStatus = function ($event, blogCommentId) {


        var approvalStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to ' + approvalStatus + ' this blog?'))
        {
            $event.preventDefault();
        }
        else
        {

            request = {token: token, approvalStatus: approvalStatus, blogCommentId: blogCommentId};

            $http.post($rootScope.STATIC_URL + 'blog/updateBlogCommentApprovalStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {

                    request = {blogId: blogId};
                    //get Comment List
                    $http.post($rootScope.STATIC_URL + 'blog/getBlogcommentList', {request: request, token: token, userRole: userRole}).success(function (response) {

                        if (response.status == 1)
                        {
                            $scope.blogComments = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });


                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }


});

/*===================================================================================================================================
 Manage Poll  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('managePollCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    $scope.pollResponseList     = [];
    $scope.pollResponse         = {
        currentPage: 0,
        pollId     : null
    };

    //get all Poll List
    $scope.getAllPolls = function(){
        $http.post($rootScope.STATIC_URL + 'userpoll/getpolls', {request: request, token: token, userRole: userRole, ITEMS_PER_PAGE: 10000000 }).success(function (response) {
            if (response.status == 1)
            {
                $scope.polls = response.data;
                console.log("****All Polls****");
                console.log($scope.polls.length);
                if($scope.polls.length==0){
                    $scope.noPollsMsg="No Poll Found";
                }
                $scope.numberOfPages = function () {
                    return Math.ceil(($scope.polls).length / $scope.pageSize);
                }

            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });
    }
    $scope.getAllPolls();

    // Function to get all responses of a poll by poll id
    $scope.getPollResponses = function(pollId){
        //$scope.pollResponse.pollId = pollId;
        console.log("fgdgag");
        console.log(pollId);
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpollresponses', {pollId: pollId});
        promise.then(
            function(response) {
                $rootScope.addAlert(response.data);
                if(response.data.status){
                    $scope.pollResponseList = response.data;
                    console.log("***pollResponse***");
                    console.log($scope.pollResponseList.length);
                }else{
                    console.log("*****No one answered****");
                    $scope.noOneAnswered="No responses found";
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
        );
    }
    // Get all responses of a poll by poll id
    if($routeParams.pid){
        $scope.getPollResponses($routeParams.pid);
    }

// Update Status
    $scope.updatePollStatus = function ($event, pollId) {
        var pollStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to ' + pollStatus + ' this Poll?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.polls, function (element, index) {
                return element.id == pollId;
            });


            request = { token: token, pollStatus: pollStatus, returnedData: returnedData[0] };

            $http.post($rootScope.STATIC_URL + 'userpoll/updatePollStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //get all Poll List
                    $scope.getAllPolls();
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

//update poll status reject and send mail

$scope.updateApprovalStatusReject = function ($event, pollId,status) {
         var statusUpdated=status;
        var approvalStatus = $event.currentTarget.id;
          console.log("approvalstatus_poll"+approvalStatus);
        if (!confirm('Are you sure to ' + statusUpdated + ' this poll?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.polls, function (element, index) {
                return element.id == pollId;
            });
            console.log("****returnedData***");
            console.log(returnedData[0]);
           var request = {token: token, approvalStatus: approvalStatus, returnedData: returnedData[0],status:statusUpdated};

            $http.post($rootScope.STATIC_URL + 'userpoll/updateApprovalStatus ', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //get all Poll List
                    $scope.getAllPolls();
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }
// Update ApprovalStatus
    $scope.updateApprovalStatus = function ($event, pollId,status) {
         var statusUpdated=status;
        var approvalStatus = $event.currentTarget.id;
          console.log("approvalstatus_poll"+approvalStatus);
        if (!confirm('Are you sure to ' + statusUpdated + ' this poll?'))
        {
            $event.preventDefault();
        }
        else
        {
            var returnedData = $.grep($scope.polls, function (element, index) {
                return element.id == pollId;
            });
            console.log("****returnedData***");
            console.log(returnedData[0]);
           var request = {token: token, approvalStatus: approvalStatus, returnedData: returnedData[0],status:statusUpdated};

            $http.post($rootScope.STATIC_URL + 'userpoll/updateApprovalStatus', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    //get all Poll List
                    $scope.getAllPolls();
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});

/*===================================================================================================================================
 Add New Poll  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('addNewPollCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {


    $rootScope.adminNavigation = 1;
    $scope.newpoll             = {};
    $scope.currentPage         = 0;
    $scope.pageSize            = 10;
    $scope.errorMessage        = "";
    var request                = "";
    var token                  = $window.localStorage.adminToken;
    var userRole               = "admin";
    $scope.qoptions = [];

    //Add new Dynamic Row
    $scope.addRow = function () {
        if ($scope.newAnswer !== '') {
            $scope.qoptions.push({'newAnswer': $scope.newAnswer});
            $scope.newAnswer = '';
        }
        $scope.newpoll.answer_options = $scope.qoptions;
    };

    //Remove Dynamic Row
    $scope.removeRow = function (newAnswer) {
        var index = -1;
        var comArr = eval($scope.qoptions);
        for (var i = 0; i < comArr.length; i++) {
            if (comArr[i].newAnswer === newAnswer) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            alert("Something gone wrong");
        }
        $scope.qoptions.splice(index, 1);
        $scope.newpoll.answer_options = $scope.qoptions;
    };

    //Add New Poll
    $scope.addNewPoll = function () {
        console.log($scope.newpoll);
        $scope.newpoll.token    = token;
        $scope.newpoll.userRole = userRole;
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/addpoll', $scope.newpoll);
        promise.then(
            function(response) {
                $rootScope.addAlert(response.data);
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
        );
    }

});

/*===================================================================================================================================
 Poll Details Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('pollDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.errorMessage = "";
    $scope.successMessage = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    var pollId = $routeParams.pollId;

    //get Poll Details
    $http.post($rootScope.STATIC_URL + 'userpoll/getpollbyid', { id: pollId, token: token, userRole: userRole}).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.pollDetails = response.data;
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });

});


/*===================================================================================================================================
 Poll Comments  Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('pollCommentsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;
    $scope.pagination          = [];
    $scope.poll_comments       = [];
    $scope.currentPage         = 0;
    $scope.pageSize            = 10;
    $scope.errorMessage        = "";
    var token                  = $window.localStorage.adminToken;
    var userRole               = "admin";
    var pollId                 = $routeParams.pollId;

    //get a comments by poll id
    $scope.getCommentsByPollId = function (poll_id) {

        var data = {
            token: token,
            userRole: userRole,
            id: poll_id,
            ITEMS_PER_PAGE: 100000
        };

        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpollcomments', data);
        promise.then(
            function(response) {
                if(response.data.status){
                    $scope.poll_comments = response.data.data;
                    $scope.pagination = response.data.pagination;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
        );
    }
    if($routeParams.pollId)
    {
        $scope.getCommentsByPollId($routeParams.pollId);
    }

    // Update ApprovalStatus
    $scope.updatePollCommentApprovalStatus = function ($event, pollCommentId) {

        var approvalStatus = $event.currentTarget.id;

        if (!confirm('Are you sure to ' + approvalStatus + ' this poll?'))
        {
            $event.preventDefault();
        }
        else
        {
            var data = {
                token: token,
                approvalStatus: approvalStatus,
                pollCommentId: pollCommentId,
                ITEMS_PER_PAGE: 100000,
                pollId:$routeParams.pollId
            };

            $http.post($rootScope.STATIC_URL + 'userpoll/updatePollCommentApprovalStatus', data ).success(function (response) {
                if (response.status)
                {
                    $scope.getCommentsByPollId($routeParams.pollId);
                }
            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }


});


/*===================================================================================================================================
 Edit Poll Controller   -----
 ====================================================================================================================================*/
adminControllers.controller('editPollsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    $rootScope.adminNavigation = 1;
    $scope.respAnsOptions      = [];
    $scope.errorMessage        = "";
    $scope.successMessage      = "";
    $scope.errorMessage        = "";
    var token                  = $window.localStorage.adminToken;
    var userRole               = "admin";
    var pollId                 = $routeParams.pollId;

    //get Poll Details
    $http.post($rootScope.STATIC_URL + 'userpoll/getpollbyid', { id: pollId, token: token, userRole: userRole}).success(function (response) {

        if (response.status)
        {
            $scope.editPollDetails = response.data;
            $scope.respAnsOptions  = $scope.editPollDetails.Answer_options;
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });

    //Update Poll details
    $scope.updatePollDetails = function ()
    {

        var id            = $scope.editPollDetails.id;
        var title         = $scope.editPollDetails.title;
        var question      = $scope.editPollDetails.question;
        var ansOptionType = $scope.editPollDetails.ansOptionType;
        var answerOptions = $scope.respAnsOptions;

        if (!title)
        {
            $scope.errorMessage = "Please Enter a Title";
        }
        else if (!question)
        {
            $scope.errorMessage = "Please Enter a Question";
        }
        else if (!ansOptionType)
        {
            $scope.errorMessage = "Please Select a Option Type";
        }
        else
        {
            console.log($scope.editPollDetails);
            $scope.editPollDetails.token = token;
            $http.post($rootScope.STATIC_URL + 'userpoll/updatePollDetails', $scope.editPollDetails ).success(function (response) {
                if(response.status){
                    $scope.successMessage = "Updated Successfully";
                    $timeout(function () {
                        $scope.successMessage = false;
                    }, 3000);
                }else{
                    $scope.errorMessage = response.message;
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }
    }

});

/*==============================================================================
 manage Review controller sulthan
 ================================================================================*/

adminControllers.controller('adminReviewCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
     $scope.errorMessage        = "";
     $scope.successMessage      = "";
     var token                  = $window.localStorage.adminToken;
     var userRole               = "admin";
     $scope.currentPage         = 0;
     $scope.pageSize            = 10;
     console.log("****"+ token);



       $http.post($rootScope.STATIC_URL + 'admins/GetAllMembersReview').success(function (response){
             if(response.status==1)
             {
                 $scope.reviews=response.result;
                 console.log("-------reviews all-------");
                 console.log(response);
                  $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
                }


            }).error(function (err) {
                console.log("ERROR" + err);
            });

    ///***function to update status of all review sulthan
    $scope.statusUpdateReview= function ($event, reviewId, status,email,reviewer,approvalStatus,reviewedOnId,reviewerId,emailofReceiver,user) {

        var params = {
            ReviewId: reviewId,
            status: status,
            token: $window.localStorage.adminToken,
            email:email,
            reviewer:reviewer,
            reviewedOnId:reviewedOnId,
            reviewerId:reviewerId,
            emailofReceiver:emailofReceiver,
            userReceived:user,
        };
      //alert("---params----"+approvalStatus);
      console.log(approvalStatus);

		var msg = 'Are you sure ?';
		if(approvalStatus == 'Approve'){
			msg = 'Do you want to approve this review? Both the Reviewee & Reviewer will be notified if you approve this review';
		}
		if(approvalStatus == 'Disapprove'){
			msg = 'Do you want to disapproved this review? ';
		}

        if (!confirm(msg)) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/UpdateReviewStatus', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'admins/GetAllMembersReview').success(function (data) {

                         if(data.status==1)
             {
                 $scope.reviews=data.result;
                 console.log("-------reviews all-------");
                 console.log(response);
                  $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
                }

                    });
                    $rootScope.addAlert(response,1500);
                }

            });

        }
    }

   ///**** delete  review by admin sulthan allreviews
    $scope.deleteReview= function ($event, reviewId, status,reviewedOnId,reviewerId) {

        var params = {
            ReviewId: reviewId,
            token: $window.localStorage.adminToken,
            reviewedOnId:reviewedOnId,
            reviewerId:reviewerId,
        };
      console.log("---params----");
      console.log(params);


        if (!confirm('Are you sure you want to ' + status + ' this Review?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'admins/deleteReview', params).success(function (response) {

                if (response.status == 1) {
                    $http.post($rootScope.STATIC_URL + 'admins/GetAllMembersReview').success(function (data) {

                         if(data.status==1)
             {
                 $scope.reviews=data.result;
                 console.log("-------reviews all-------");
                 console.log(response);
                  $scope.numberOfPages = function () {
                return Math.ceil(($scope.reviews).length / $scope.pageSize);
            }
                }

                    });
                }

            });

        }
    }
    //**** upto this


});

/*===================================================================================================================================
 Abuse controller
 ====================================================================================================================================*/
adminControllers.controller('abuseUsersCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {


   $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 10;
    var token                  = $window.localStorage.adminToken;
    var userRole               = "admin";


    //get Poll Details
    $http.post($rootScope.STATIC_URL + 'admins/getAllReportedAbuses').success(function (response) {

        if (response.status)
        {
           $scope.reportUserList = response.data;
           console.log($scope.reportUserList);
        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


    $scope.blacklistAMember = function ($event, userId, status) {
        var params = {
            userId: userId,
            status: status,
            token: $window.localStorage.adminToken
        };

        var args = {
            userRole: 'admin',
            token: $window.localStorage.adminToken
        };

        var text = 'blacklist';
        if (status === 'no') {
            text = 'whitelist';
        }

        if (!confirm('Are you sure you want to ' + text + ' this User?')) {
            $event.preventDefault();
        } else {

            $http.post($rootScope.STATIC_URL + 'users/blacklistAMember', params).success(function (response) {

                if (response.status === 1) {
                    var params = {reportId:$routeParams.id}
                    $http.post($rootScope.STATIC_URL + 'admins/getReportedAbusesById',params).success(function (response) {

                        if (response.status)
                        {
                           $scope.reportDetails = response.data[0];
                           console.log($scope.reportDetails);
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                    });
                }

            });

        }
    }


    if($routeParams.id)
    {
        var params = {reportId:$routeParams.id}
        $http.post($rootScope.STATIC_URL + 'admins/getReportedAbusesById',params).success(function (response) {

            if (response.status)
            {
               $scope.reportDetails = response.data[0];
               console.log($scope.reportDetails);
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });
    }

});
/*===================================================================================================================================
 Review Details  Controller   ----- sulthan
 ====================================================================================================================================*/
adminControllers.controller('reviewDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $rootScope.adminNavigation = 1;

    $scope.errorMessage = "";
    var request = "";
    var token = $window.localStorage.adminToken;
    var userRole = "admin";
    console.log("****route params: reviewId*****");
    console.log($routeParams.id);



    request = {reviewid: $routeParams.id,
               token: $window.localStorage.adminToken,
    };


    //get Review Details
    $http.post($rootScope.STATIC_URL + 'admins/getReviewDetails',request).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.reviewDetails = response.result;
            console.log($scope.reviewDetails );
        }


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


});

/*===================================================================================================================================
 Advertisement request  Controller   ----- sulthan
 ====================================================================================================================================*/
 adminControllers.controller('adRequestCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
    console.log("****inside adRequestCtrl");
    $scope.errorMessage        = "";
    $scope.successMessage      = "";
    var token                  = $window.localStorage.adminToken;
    var userRole               = "admin";
    $scope.currentPage         = 0;
    $scope.pageSize            = 10;
    console.log("****"+ token);
    $http.post($rootScope.STATIC_URL + 'admins/getAllAdRequests').success(function (response){
       if(response.status==1)
       {
           $scope.adRequests=response.result;
           console.log("-------adverisement request all-------");
           console.log(($scope.adRequests).length);
           $scope.numberOfPages = function () {
            return Math.ceil(($scope.adRequests).length / $scope.pageSize);
        }
    }
}).error(function (err) {
    console.log("ERROR" + err);
});
            ///**** delete  adRequest by admin sulthan
            $scope.deleteAdRequest= function ($event, adRequestId) {
                var params = {
                    adRequestId: adRequestId
                };
                console.log("---params----");
                console.log(params);
                if (!confirm('Are you sure you want to delete this advertisement request?')) {
                    $event.preventDefault();
                } else {
                    $http.post($rootScope.STATIC_URL + 'admins/deleteAdRequest', params).success(function (response) {
                        if (response.status == 1) {
                            $http.post($rootScope.STATIC_URL + 'admins/getAllAdRequests').success(function (data) {
                               if(data.status==1)
                               {
                                   $scope.adRequests=data.result;
                                   console.log("-------reviews all-------");
                                   console.log(response);
                                   $scope.numberOfPages = function () {
                                    return Math.ceil(($scope.reviews).length / $scope.pageSize);
                                }
                            }
                        });
                        }
                    });
                }
            }
    //**** upto this
});
/*===================================================================================================================================
 Advertisement Request Details  Controller   ----- sulthan
 ====================================================================================================================================*/
 adminControllers.controller('adRequestDetailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
   console.log("** inside adRequestDetailsCtrl");
   $rootScope.adminNavigation = 1;
   $scope.errorMessage = "";
   var request = "";
   var token = $window.localStorage.adminToken;
   var userRole = "admin";
   console.log($routeParams.id);
   request = {adRequestId: $routeParams.id
   };
    //get adRequest Details
    $http.post($rootScope.STATIC_URL + 'admins/adRequestDeails',request).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.adRequestDetails = response.result;
            console.log($scope.adRequestDetails );
        }
    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });
    // change view status to seen
    $http.post($rootScope.STATIC_URL + 'admins/adRequestViewStatus',request).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            console.log("view status successfully changed");
        }
    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });
});
 adminControllers.controller('adRequestTotalNoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {
   console.log("** inside adRequestTotalNoCtrl");
   $http.post($rootScope.STATIC_URL + 'admins/adRequestNumber').success(function (response) {
    console.log(response);
    if (response.status == 1)
    {
        console.log(response);
        $scope.notSeen=response.result[0].count;
        console.log($scope.notSeen);
        console.log("successfully get the number of ad req not seen");
    }
}).error(function () {
    $scope.errorMessage = "Please Try Again";
});
});


'use strict';
/* userControllers */

var userControllers = angular.module('userControllers', ['ui.bootstrap','gm','angularUtils.directives.dirPagination', 'jkuri.timepicker', 'ngSanitize']);

userControllers.controller('errorCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = false;

});

userControllers.controller('homeCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    //$scope.requiresLogin = false;

    $rootScope.signupPage = function () {
       $location.path('/signup');
			  window.open('https://www.zenbrisa.com/signup.html','_self')
    }

});

userControllers.controller('loginHomeCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = true;

    /*$rootScope.signupPage = function () {
        $location.path('/signup');
    }*/

});

userControllers.controller('profileMenuCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.profileMenu = {name: "profileMenu.html", url: "partials/profileMenu.html"};

});

userControllers.controller('footerMenuCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    console.log('footerMenuCtrl')

});

userControllers.controller('favCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = false;

    $rootScope.favouriteSearchList = function () {
        $location.path('/favouritesearchlisting');
    }

});
userControllers.controller('smsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = false;

    $scope.sendSms = function () {

        var to = $scope.to;
        var message = $scope.message;

        var params = {
            to: to,
            message: message
        };

        $http.post($rootScope.STATIC_URL + 'users/smsService', params).success(function (response) {

            if (response.status === 1) {
                console.log('success');
            } else {
                $scope.errorMessage = "Error in sending sms.";
            }

        }).error(function (err) {

            console.log("Error");
            console.log(JSON.stringify(err));

        });

    }

});



userControllers.controller('loginCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, quickSignup) {

	if($routeParams.hash){
		var hashKey = $routeParams.hash;
		quickSignup.verify( { emailVerificationKey: hashKey }, function(response){

			$rootScope.showloader = false;
			if(response){
				$rootScope.addAlert(response);
			}
		});
	}

	console.log("loginCtr ELESEE CONDITION");
	$scope.requiresLogin = false;

	var validateEmail = function (email)
	{
		var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
		if (reg.test(email)) {
			return true;
		} else {
			return false;
		}
	}

    $scope.userLogin = function () {
        var email = $scope.email;
        var password = $scope.password;
        var params = {
            email: email,
            password: password
        };
        console.log("userLogin-->");
        $scope.errorMessage = null;

        if (!email) {

            $scope.errorMessage = "Please enter email.";

        } else if (!validateEmail(email)) {

            $scope.errorMessage = "Please enter correct email format.";

        } else if (!password) {

            $scope.errorMessage = "Please enter password.";

        } else if (validateEmail(email) && password) {
            $rootScope.showloader = true;

            $http.post($rootScope.STATIC_URL + 'users/userLogin', params).success(function (response) {

                console.log("-------->response<--------");

                console.log(response);
                $rootScope.showloader = false;
                if (response.status === 1) {
                    $window.localStorage.userToken  = response.data.token.token;
                    $window.localStorage.uid        = response.data.token.userId;
                    $rootScope.userLoginStatus      = true;
                    var userparams = {
                        userId: response.data.token.userId,
                        userRole: "user",
                        token: response.data.token.token
                    };

                    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', userparams).success(function (user) {
                        console.log(user);


                        if (user.status === 1) {
                                $window.localStorage.isUserAuthenticated        = 'true';
                                $window.localStorage.userType                   = "user";
                                $window.localStorage.setItem("user", JSON.stringify(user.data[0]));
                                $rootScope.username                             = user.data[0].username;
                                $rootScope.afterLoginSuccess();

                                //console.log($rootScope.oldUrl);
                                if($rootScope.oldUrl!=null)
                                {

                                        var dataMatch=/^(https:\/\/www.zenbrisa.com\/#\/profile\/)[0-9]+$/;
                                        var data=$rootScope.oldUrl;
                                        //if(dataMatch.test(data)==true)
                                        var url = data.toString();
                                        if(url.split(window.location.hostname)[1] != ( '' || '/' || '/login' || '/resetpassword') )
                                        {
                                                $window.location.href = $rootScope.oldUrl;
                                        } else {
                                             $window.location.href = $window.location.origin + "/" + $rootScope.hashbang + "landingpage";
                                        }


                                //  $window.location.href = $rootScope.oldUrl;

                                }
                                else
                                {
                                    $window.location.href = $window.location.origin + "/" + $rootScope.hashbang + "landingpage";
                                }

                                //$window.location.href = $rootScope.hashbang + "landingpage";

                            } else {
                               // $scope.errorMessage = "Invalid login credentials.";
                                response.status = 0;
                                response.message = "Oops! Invalid login credentials!";
                                $rootScope.addAlert(response);
                            }

                    }).error(function (err) {
                        console.log("ERROR" + err);
                    });



                } else {
                    //alert(response.message);
                  //  $scope.errorMessage = "Invalid login credentials.";
                    response.status = 0;
                  //  response.message = "Oops! Invalid login credentials!";
                    $rootScope.addAlert(response);
                }

            }).error(function (err) {

                console.log("ERROR" + err);

            });
        }
    };

});

userControllers.controller('dashboardCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    $scope.requiresLogin = true;
    var uid = $window.localStorage.uid;


    var params = {
        userId: uid,

    };

    $http.post($rootScope.STATIC_URL + 'users/getUserBasicDetails', params).success(function (response) {
        if (response.status === 1) {
            $window.localStorage.isUserAuthenticated        = 'true';
            $window.localStorage.userType                   = "user";
            $window.localStorage.setItem("user", JSON.stringify(response.data[0]));
            $scope.username                                 = response.data[0].username;
        }
    }).error(function (err) {
       console.log("ERROR" + err);
   });

    if ($rootScope.profileUpdated === true) {
        $timeout(function () {
            $rootScope.profileUpdated = false;
        }, 3000);
    }

    if ($rootScope.searchUpdated === true) {
        $timeout(function () {
            $rootScope.searchUpdated = false;
        }, 3000);
    }

});
/* upload area  to test */

userControllers.controller('uploadCtrl', ['$scope','$rootScope','$http', function($scope,$rootScope,$http){

    $scope.uploadFile = function(event){
        var files = [];
        var fd = new FormData();
        if (event.files) {
            for (var i = 0; i < event.files.length; i++) {
                files.push(event.files[i]);
            }
        }
        if (files) {
            for (var i = 0; i < files.length; i++) {
                fd.append('attachments', files[i]);
            }
        }

        $http.post($rootScope.STATIC_URL + 'users/uploadPhoto',fd,{
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        }).success(function(){
            console.log("success");
        })
        .error(function(){
         console.log("errorzz");
     });
    };

}]);




userControllers.controller('profileCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $interval,$uibModal) {

    $scope.requiresLogin = true;
    $rootScope.profileUpdated = false;

    $scope.formOneData = {};
  $scope.lat                            = undefined;
  $scope.lng                            = undefined;
  $scope.formattedAddress               = undefined;
  $scope.errorMessage                   = "";
  $scope.selectedCountryPresentErrorMsg = "";
    $scope.MapLoading=function($scope){}

         /*   $scope.deleteProfilePhoto = function(){
                        $rootScope.deleteProfilePhoto();

            };
            */
         $scope.$on('gmPlacesAutocomplete::placeChanged', function(){

                    console.log($scope.formOneData.autocompleteData);
                      var location = $scope.formOneData.autocompleteData.getPlace().geometry.location;
                      $scope.lat = location.lat();
                      $scope.lng = location.lng();


                $scope.formattedAddress = $scope.formOneData.autocompleteData.getPlace().formatted_address;
                var add= $scope.formattedAddress;
                var place=   $scope.formOneData.autocompleteData.getPlace().address_components;
                var placeLength=place.length;
                console.log("This will be the addresse");
                console.log(place);
                 $scope.formOneData.country='';
                  $scope.formOneData.state='';
                   $scope.formOneData.city='';
                for (var i = 0; i < placeLength; i++)
                {

                    if(place[i].types[0]=='country')
                    {
                        $scope.formOneData.country=place[i].long_name;
                    }

                    else if(place[i].types[0]=='administrative_area_level_1')
                    {
                        $scope.formOneData.state=place[i].long_name;
                    }

                    else if(place[i].types[0]=='locality')
                    {
                        $scope.formOneData.city=place[i].long_name;
                    }


                }
              $scope.formOneData.latitude =location.lat();
              $scope.formOneData.longitude = location.lng();
$scope.formOneData.autocompleteData='';
              $scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+location.lat()+","+location.lng()+"&z=14&output=embed";
              $scope.$apply();
          });

    $scope.checkTelephoneNumber = (function () {
        var regex = /^([+]{1})?[0-9]{10}([0-9]+)?$/;
        return {
            test: function (value) {
                return (value.length > 0) ? regex.test(value) : true;
            }
        };
    })();

     $scope.getYears = (function () {
          var today = new Date();
          var years=[];
          // var dd = today.getDate();
          //  var mm = today.getMonth()+1; //January is 0!
            var currentYear = today.getFullYear();
            var yearLimit=currentYear-18;
        for (var i=yearLimit;i>1930;i--)
        {
            years.push(i);
        }

        $scope.year=years;

    });

   //----------------------------------------------LOCATION FUNCTIONALITIES END-------------------------------------------------------------------
    var uid = $window.localStorage.uid;
    var params = {
        userId: uid,

    };
//***Api calls for getting different counts
//***get limit of videos
$http.post($rootScope.STATIC_URL + 'users/checkLimit', {userId: uid }).success(function (response) {

    console.log("Test");
    console.log(response.data.data);
    $scope.limit = response.data;
    $scope.videoCount=response.data.data;


}).error(function () {
    $scope.errorMessage = "Please Try Again";
});
 $scope.checkAll = function () {

        if($scope.formOneData.therapeuticMassageOne===true)
        {
            $scope.formOneData.therapeuticMassageOne=false;
        }
        if($scope.formOneData.sensualMassageOne===true)
        {
            $scope.formOneData.sensualMassageOne=false;
        }
    };
     $scope.checkTwoAll = function () {
        if($scope.formOneData.therapeuticMassageTwo===true)
        {
            $scope.formOneData.therapeuticMassageTwo=false;
        }
        if($scope.formOneData.sensualMassageTwo===true)
        {
            $scope.formOneData.sensualMassageTwo=false;
        }
    };
     $scope.uncheckType = function () {

       if($scope.formOneData.personOneMassageType_both===true)
       {
        $scope.formOneData.personOneMassageType_both=false;
        }

    };
    $scope.uncheckTwoType = function () {
       if($scope.formOneData.personTwoMassageType_both===true)
       {
            $scope.formOneData.personTwoMassageType_both=false;
       }
    };



        $http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {



        $scope.getYears();
            if (response.status === 1) {
                var userData = response.data[0];
$scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+userData.latitude+","+userData.longitude+"&z=14&output=embed";
                $scope.formOneData.profilePic = userData.profilePic;

                $scope.formOneData.username = userData.username;
                $scope.formOneData.email = userData.email;
            //$scope.formOneData.password = userData.password;
            $scope.formOneData.gender = userData.gender;
            $scope.formOneData.telephone = userData.telephone;
            $scope.formOneData.country = userData.country;
//                $scope.getStates();
            $scope.formOneData.state = userData.state;
            //    $scope.getCities();
            $scope.formOneData.city = userData.city;


            $scope.formOneData.zipcode = userData.zipcode;
            $scope.formOneData.latitude = userData.latitude;
            $scope.formOneData.longitude = userData.longitude;

            if (userData.therapeuticMassageOne === 'therapeutic') {

                $scope.formOneData.therapeuticMassageOne = true;
            }
            $scope.formOneData.therapeuticMassageOneDesc = userData.therapeuticMassageOneDesc;
            if (userData.sensualMassageOne === 'sensual') {
                $scope.formOneData.sensualMassageOne = true;
            }

            $scope.formOneData.sensualMassageOneDesc = userData.sensualMassageOneDesc;

            var dobOne = new Date(userData.dobOne)
            $scope.formOneData.dayOne = dobOne.getDate();
            $scope.formOneData.monthOne =(dobOne.getMonth() + 1);
            $scope.formOneData.yearOne = dobOne.getFullYear();
            //$scope.formOneData.dobOne = dobOne.getFullYear() + "-" + (dobOne.getMonth() + 1) + "-" + dobOne.getDate();
            $scope.formOneData.languageOne = userData.languageOne;
            $scope.formOneData.languageTwo = userData.languageTwo;
            $scope.formOneData.bodyTypeOne = userData.bodyTypeOne;
            $scope.formOneData.heightOne = userData.heightOne;
            $scope.formOneData.drinkingHabitOne = userData.drinkingHabitOne;
            $scope.formOneData.smokingHabitOne = userData.smokingHabitOne;
            $scope.formOneData.massageFrequencyOne = userData.massageFrequencyOne;
            $scope.formOneData.levelTypeOne = userData.levelTypeOne;
            if(userData.levelTypeOne== 'professional_cmt'){
                $scope.formOneData.professionalType = userData.professionalType;
                if (userData.professionalType === 'free') {
                    $scope.formOneData.professionalType = 'free';
                }
                if (userData.professionalType === 'paid') {
                    $scope.formOneData.professionalType = 'paid';
                }
                if (userData.professionalType === 'both') {
                    $scope.formOneData.professionalType = 'both';
                }
            }

            $scope.formOneData.levelTypeOneOther = userData.levelTypeOneOther;
            $scope.formOneData.experienceOne = userData.experienceOne;
           // $scope.formOneData.massageStylesOne = userData.massageStylesOne;
           var data=userData.massageStylesOne;
           if(data!=null){
               var str=data.split(','),
               massStyle1Data={};
               for(var i=0;i<str.length;i++)
                if(str[i]== 'deep_tissue/strong'){
                    massStyle1Data['deep_tissue_strong']=str[i];
                }else
                {
                  massStyle1Data[str[i]]=str[i];
              }
          }
          $scope.formOneData.massageStylesOne=massStyle1Data;
          $scope.formOneData.massageStylesOneOther = userData.massageStylesOneOther;
          $scope.formOneData.trainingHoursOne = userData.trainingHoursOne;

        if (userData.therapeuticMassageTwo === 'therapeutic') {
            $scope.formOneData.therapeuticMassageTwo = true;
        }
        $scope.formOneData.therapeuticMassageTwoDesc = userData.therapeuticMassageTwoDesc;
        if (userData.sensualMassageTwo === 'sensual') {
            $scope.formOneData.sensualMassageTwo = true;
        }
        $scope.formOneData.sensualMassageTwoDesc = userData.sensualMassageTwoDesc;

        var dobTwo = new Date(userData.dobTwo)
        //$scope.formOneData.dobTwo = dobTwo.getFullYear() + "-" + (dobTwo.getMonth() + 1) + "-" + dobTwo.getDate();
            $scope.formOneData.dayTwo = dobTwo.getDate();
            $scope.formOneData.monthTwo =(dobTwo.getMonth() + 1);
            $scope.formOneData.yearTwo = dobTwo.getFullYear();
        $scope.formOneData.languageTwo = userData.languageTwo;
        $scope.formOneData.bodyTypeTwo = userData.bodyTypeTwo;
        $scope.formOneData.heightTwo = userData.heightTwo;
        $scope.formOneData.drinkingHabitTwo = userData.drinkingHabitTwo;
        $scope.formOneData.smokingHabitTwo = userData.smokingHabitTwo;
        $scope.formOneData.massageFrequencyTwo = userData.massageFrequencyTwo;
        $scope.formOneData.levelTypeTwo = userData.levelTypeTwo;

        if(userData.levelTypeOne== 'professional_cmt'){
            $scope.formOneData.professionalTypeTwo = userData.professionalTypeTwo;
            if (userData.professionalTypeTwo === 'free') {
                $scope.formOneData.professionalTypeTwo = 'free';
            }
            if (userData.professionalTypeTwo === 'paid') {
                $scope.formOneData.professionalTypeTwo = 'paid';
            }
            if (userData.professionalTypeTwo === 'both') {
                $scope.formOneData.professionalTypeTwo = 'both';
            }
         }
        $scope.formOneData.levelTypeTwoOther = userData.levelTypeTwoOther;
        $scope.formOneData.experienceTwo = userData.experienceTwo;
           // $scope.formOneData.massageStylesTwo = userData.massageStylesTwo;
           var data2=userData.massageStylesTwo;
           if(data2!=null){
            var str=data2.split(','),
            massStyleData={};
            for(var i=0;i<str.length;i++){
            if(str[i]== 'deep_tissue/strong'){
                    massStyleData['deep_tissue_strong']=str[i];
                }
                else
                {
                    massStyleData[str[i]]=str[i];
                }
          }
      }

      $scope.formOneData.massageStylesTwo = massStyleData;
      $scope.formOneData.massageStylesTwoOther = userData.massageStylesTwoOther;
      $scope.formOneData.trainingHoursTwo = userData.trainingHoursTwo;
      console.log($scope.formOneData);
  }
}).error(function (err) {
    console.log("ERROR" + err);
});


$scope.profileFormSubmit = function (isValid, formOneData, profileForm) {


    if (isValid === true) {
//        $scope.geoCode();
        $rootScope.showloader = true;
        $scope.buttonDisabled = true;
        console.log("params------>");
        var params = {};
        var userinfo = {};
        var fileData=null;
        var dataResult="false";
        /* upload area   */

        var file = $scope.profilePicture;
        var uploadUrl = $rootScope.STATIC_URL+ 'assets/images/';
        var fd = new FormData();
        fd.append('userId',$window.localStorage.uid);
        fd.append('profilePic1', file);
        userinfo.profilePic = formOneData.profilePic;
        console.log("file -------->");
        console.log(file);
        userinfo.gender = formOneData.gender;
        userinfo.telephone = formOneData.telephone;
        userinfo.city = formOneData.city;
        userinfo.country = formOneData.country;
        userinfo.state = formOneData.state;
        userinfo.zipcode = formOneData.zipcode;
        //alert(formOneData.city);
         if(formOneData.city==='null' || formOneData.city===null)
        {
            userinfo.address=formOneData.state+", "+formOneData.country;
        }else
        {
            userinfo.address= formOneData.city+", "+formOneData.state+", "+formOneData.country;

        }
        userinfo.latitude = $scope.formOneData.latitude;
        userinfo.longitude = $scope.formOneData.longitude;
        if(formOneData.personOneMassageType_both === true)
        {

            formOneData.therapeuticMassageOne =true;
            formOneData.sensualMassageOne =true;
        }

        userinfo.therapeuticMassageOne = (formOneData.therapeuticMassageOne === true) ? 'therapeutic' : '';
        userinfo.therapeuticMassageOneDesc = (formOneData.therapeuticMassageOne === true) ? formOneData.therapeuticMassageOneDesc: '';
        userinfo.sensualMassageOne = (formOneData.sensualMassageOne === true) ? 'sensual' : '';
        userinfo.sensualMassageOneDesc = (formOneData.sensualMassageOne === true) ? formOneData.sensualMassageOneDesc: '';

      //  userinfo.dobOne = formOneData.dobOne;
      userinfo.dayOne = formOneData.dayOne;
      userinfo.monthOne = formOneData.monthOne;
      userinfo.yearOne = formOneData.yearOne;
        userinfo.dobOne = formOneData.yearOne+'-'+formOneData.monthOne+'-'+formOneData.dayOne;

        userinfo.ageOne = getAge(userinfo.dobOne);
        userinfo.languageOne = formOneData.languageOne;
        userinfo.bodyTypeOne = formOneData.bodyTypeOne;
        userinfo.heightOne = formOneData.heightOne;
        userinfo.drinkingHabitOne = formOneData.drinkingHabitOne;
        userinfo.smokingHabitOne = formOneData.smokingHabitOne;

        if(typeof formOneData.massageFrequencyOne == undefined ||formOneData.massageFrequencyOne == false  )
        {
            userinfo.massageFrequencyOne= null;
        }else
		{
			     userinfo.massageFrequencyOne = formOneData.massageFrequencyOne;
		}
		userinfo.levelTypeOne = formOneData.levelTypeOne;
        if(formOneData.levelTypeOne== 'professional_cmt' )
        {

              userinfo.professionalType = formOneData.professionalType;
        }
        else
        {

             userinfo.professionalType = '';
        }
        userinfo.levelTypeOneOther = formOneData.levelTypeOneOther;
//  userinfo.professionalType = formOneData.professionalType;
        userinfo.experienceOne = formOneData.experienceOne;
        userinfo.trainingHoursOne = formOneData.trainingHoursOne;
           // userinfo.massageStylesOne = formOneData.massageStylesOne;
		if(formOneData.massageStylesOne)
        {
			if(typeof formOneData.massageStylesOne.deep_tissue_strong == undefined || formOneData.massageStylesOne.deep_tissue_strong == false ||  formOneData.massageStylesOne.deep_tissue_strong == 'null'){
				formOneData.massageStylesOne.deep_tissue_strong= null;
			}
			if(typeof formOneData.massageStylesOne.thai == undefined || formOneData.massageStylesOne.thai == false || formOneData.massageStylesOne.thai == 'null'){
				formOneData.massageStylesOne.thai= null;
			}
			if(typeof formOneData.massageStylesOne.reflexology == undefined || formOneData.massageStylesOne.reflexology == false || formOneData.massageStylesOne.reflexology == 'null'){
			   formOneData.massageStylesOne.reflexology= null;
			}
			if(typeof formOneData.massageStylesOne.swedish == undefined || formOneData.massageStylesOne.swedish == false  || formOneData.massageStylesOne.swedish == 'null'){
				formOneData.massageStylesOne.swedish= null;
			}
			if(typeof formOneData.massageStylesOne.chinese == undefined || formOneData.massageStylesOne.chinese == false || formOneData.massageStylesOne.chinese == 'null'){
				formOneData.massageStylesOne.chinese= null;
			}
			if(typeof formOneData.massageStylesOne.others == undefined || formOneData.massageStylesOne.others == false || formOneData.massageStylesOne.others == 'null' ){
				formOneData.massageStylesOne.others= null;
			}

			userinfo.massageStylesOneOther  = (formOneData.massageStylesOne.others === 'others') ? formOneData.massageStylesOneOther : '';
			var string =formOneData.massageStylesOne;
			var res = Object.keys(string).map(function(v) {
			  return string[v];
		  }).join();
			userinfo.massageStylesOne = res.replace(/([,])+/g, ",");
		}
//userinfo.massageStylesOne =userinfo.massageStylesOne.replace(/(,$)/g, " ");
//userinfo.massageStylesOne =userinfo.massageStylesOne.replace(/(^,)/g, " ");

if (formOneData.gender !== 'male' && formOneData.gender !== 'female') {



       if(formOneData.personTwoMassageType_both === true)
        {
            formOneData.therapeuticMassageTwo =true;
            formOneData.sensualMassageTwo =true;
        }
        userinfo.therapeuticMassageTwo = (formOneData.therapeuticMassageTwo === true) ? 'therapeutic' : '';
    userinfo.therapeuticMassageTwoDesc = (formOneData.therapeuticMassageTwo === true) ? formOneData.therapeuticMassageTwoDesc: '';
    userinfo.sensualMassageTwo = (formOneData.sensualMassageTwo === true) ? 'sensual' : '';
    userinfo.sensualMassageTwoDesc = (formOneData.sensualMassageTwo === true) ? formOneData.sensualMassageTwoDesc: '';
    userinfo.dobTwo = formOneData.dobTwo;
        userinfo.dayTwo = formOneData.dayTwo;
        userinfo.monthTwo = formOneData.monthTwo;
        userinfo.yearTwo = formOneData.yearTwo;
        userinfo.dobTwo = formOneData.yearTwo+'-'+formOneData.monthTwo+'-'+formOneData.dayTwo;

        userinfo.ageTwo = getAge(userinfo.dobTwo);
    userinfo.languageTwo = formOneData.languageTwo;
    userinfo.bodyTypeTwo = formOneData.bodyTypeTwo;
    userinfo.heightTwo = formOneData.heightTwo;
    userinfo.drinkingHabitTwo = formOneData.drinkingHabitTwo;
    userinfo.smokingHabitTwo = formOneData.smokingHabitTwo;
	if(typeof formOneData.massageFrequencyTwo == undefined ||formOneData.massageFrequencyTwo == false  )
	{
		userinfo.massageFrequencyTwo= null;
	}else
	{
			 userinfo.massageFrequencyTwo = formOneData.massageFrequencyTwo;
	}
    userinfo.levelTypeTwo = formOneData.levelTypeTwo;
      if(formOneData.levelTypeTwo== 'professional_cmt' )
        {
              userinfo.professionalTypeTwo = formOneData.professionalTypeTwo;
        }
        else
        {
             userinfo.professionalTypeTwo = '';
        }
    userinfo.levelTypeTwoOther = formOneData.levelTypeTwoOther;
    userinfo.experienceTwo = formOneData.experienceTwo;
    userinfo.trainingHoursTwo = formOneData.trainingHoursTwo;
               // userinfo.massageStylesTwo = formOneData.massageStylesTwo;


          /*     var massageStylesTwo =formOneData.massageStylesTwo;
               var massageStylesTwo = Object.keys(massageStylesTwo).map(function(v) {
                  return massageStylesTwo[v];
              }).join();
*/
		if(formOneData.massageStylesOne)
		{

            if(formOneData.massageStylesTwo.deep_tissue_strong == undefined || formOneData.massageStylesTwo.deep_tissue_strong == false ||  formOneData.massageStylesTwo.deep_tissue_strong == 'null'){
                formOneData.massageStylesTwo.deep_tissue_strong= null;
                //formOneData.massageStylesTwo.deep_tissue/strong= null;
            }
            if(formOneData.massageStylesTwo.thai == undefined || formOneData.massageStylesTwo.thai == false || formOneData.massageStylesTwo.thai == 'null'){
                formOneData.massageStylesTwo.thai= null;
            }
            if(formOneData.massageStylesTwo.reflexology == undefined || formOneData.massageStylesTwo.reflexology == false || formOneData.massageStylesTwo.reflexology == 'null'){
               formOneData.massageStylesTwo.reflexology= null;
            }
            if(formOneData.massageStylesTwo.swedish == undefined || formOneData.massageStylesTwo.swedish == false  || formOneData.massageStylesTwo.swedish == 'null'){
                formOneData.massageStylesTwo.swedish= null;
            }
            if(formOneData.massageStylesTwo.chinese == undefined || formOneData.massageStylesTwo.chinese == false || formOneData.massageStylesTwo.chinese == 'null'){
                formOneData.massageStylesTwo.chinese= null;
            }
            if(formOneData.massageStylesTwo.others == undefined || formOneData.massageStylesTwo.others == false || formOneData.massageStylesTwo.others == 'null' ){
                formOneData.massageStylesTwo.others= null;
            }
			userinfo.massageStylesTwoOther  = (formOneData.massageStylesTwo.others === 'others') ? formOneData.massageStylesTwoOther : '';
			var string1 =formOneData.massageStylesTwo;
			var res1 = Object.keys(string1).map(function(v1) {
				return string1[v1];
			}).join();

			userinfo.massageStylesTwo = res1.replace(/([,])+/g, ",");
		}
   // alert(userinfo.massageStylesTwo);
//userinfo.massageStylesTwo =userinfo.massageStylesTwo.replace(/(,$)/g, " ");
//userinfo.massageStylesTwo =userinfo.massageStylesTwo.replace(/(^,)/g, " ");
//userinfo.massageStylesTwoOther = formOneData.massageStylesTwoOther;

}


 // Instance Modal End
var uid = $window.localStorage.uid;
   // $scope.geoCode();
var params = {
                userinfo: userinfo,
                userId: uid,
             };

if(typeof $scope.profilePicture=='undefined')
{

    $http.post($rootScope.STATIC_URL + 'users/userProfileEdit', params).success(function (response) {
        $rootScope.showloader = false;
        if (response.status === 1)
        {
            $rootScope.profileUpdated = true;
            $scope.buttonDisabled = false;
            console.log("==================");
            console.log(response.data);
            $scope.errorMessage = "Profile details updated successfully.";
            reConnectSocket();
            $location.path('/myprofile');
        }

    }).error(function (err) {
        console.log("ERROR" + err);
    });
}
else
{
    $http.post($rootScope.STATIC_URL + 'users/uploadProPic',fd,{
        transformRequest: angular.identity,
        headers: {'Content-Type': undefined}
    }).success(function (response) {

        if (response.status === 1)
        {
            var loader = false;
            $rootScope.updateUserInfo();

            params.userinfo.profilePic=response.data;


            var json_object = JSON.parse($window.localStorage.user);
            json_object["profilePic"] = response.data;
            localStorage["user"] = JSON.stringify(json_object);
            console.log($window.localStorage.user);

            $http.post($rootScope.STATIC_URL + 'users/userProfileEdit', params).success(function (response) {

                if (response.status === 1) {
                       reConnectSocket();
                       $timeout(function () {

                            $rootScope.showloader = false;
                            $scope.buttonDisabled = false;
                            $rootScope.profileUpdated = true;
                            $scope.errorMessage = "Profile details updated successfully.";
                            $location.path('/myprofile');
                        }, 8000);
                    }

             }).error(function (err) {
                    console.log("ERROR" + err);
                });


        } else {
            $scope.errorMessage = "Error in updating user fields.";
        }

    }).error(function (err) {
        console.log("ERROR" + err);
    });
}
console.log("dataRes==");
console.log(dataResult);

/*
                 if(dataResult=="true")
                 {
                     console.log("=====================params========================");
                    console.log(params);
                        $http.post($rootScope.STATIC_URL + 'users/userProfileEdit', params).success(function (response) {

                            if (response.status === 1) {
                                $rootScope.profileUpdated = true;
                                $scope.errorMessage = "Profile details updated successfully.";
                                $location.path('/landingpage');
                            }

                                }).error(function (err) {
                                    console.log("ERROR" + err);
                                });
                }
                */

            } else {
                $timeout(function () {
                    angular.element("[name='" + profileForm.$name + "']").find('.ng-invalid:visible:first').focus();
                },1000);
            }
        }




    });

userControllers.controller('editSearchCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
    $scope.height  = HELPER_heightData;
  //   $scope.maxHeight  = HELPER_heightData;

    $scope.requiresLogin = true;
    $scope.formTwoData = {};
    $rootScope.searchUpdated = false;

    $scope.minimumAge = function (min) {
        if(min == 18)
        {
         $scope.formTwoData.maxAge=20;
     }
     else{
        $scope.formTwoData.maxAge = parseInt(min, 10) + 10;
    }
};
$scope.minimumHeight = function (min) {

  // $scope.formTwoData.maxHeight = parseFloat(min,100) +0.02;
    var heightLen=HELPER_heightData.length;
    var maxHeight=[];
    console.log(HELPER_heightData[min].value);

    for(var i=min;i<heightLen;i++)
    {
        console.log(i);
        //$scope.maxheight=HELPER_heightData[i];
        maxHeight.push({
            id: HELPER_heightData[i].id,
            name: HELPER_heightData[i].name,
            value: HELPER_heightData[i].value
        });
    }

    $scope.formTwoData.maxHeight=HELPER_heightData[min].value;
    console.log(maxHeight);
    $scope.maxHeight=maxHeight;


};
$scope.checkAll = function () {

   if($scope.formTwoData.genderMale)
   {
        $scope.formTwoData.genderMale=false;
    }
    if($scope.formTwoData.genderFemale)
    {
        $scope.formTwoData.genderFemale=false;

    }
    if($scope.formTwoData.genderMaleFemaleCouple)
    {
        $scope.formTwoData.genderMaleFemaleCouple=false;

    }
    if($scope.formTwoData.genderGayCouple)
    {
        $scope.formTwoData.genderGayCouple=false;

    }
    if($scope.formTwoData.genderLesbianCouple)
    {
        $scope.formTwoData.genderLesbianCouple=false;

    }

};
$scope.uncheckGender = function () {

   if($scope.formTwoData.anyGender)
   {
        $scope.formTwoData.anyGender=false;
    }


};
var uid = $window.localStorage.uid;

var params = {
    userId: uid,
};

$http.post($rootScope.STATIC_URL + 'users/getUserSearchPreferences', params).success(function (response) {

    if (response.status === 1) {
        var searchData = response.data;
          var heightData= searchData.height;
            if(heightData)
              {
                //  height=HELPER_heightData[height2Id].id;
                  var heightLen=HELPER_heightData.length;
                  for(var i=0;i<heightLen;i++)
                        {
                            if(HELPER_heightData[i].value==heightData)
                            {
                                var heightId=HELPER_heightData[i].id;
                            }
                        }
                        $scope.minimumHeight(heightId);
                        //minimumHeight(heightId);
              }

        if(searchData.genderMale && searchData.genderFemale && searchData.genderMaleFemaleCouple && searchData.genderGayCouple && searchData.genderLesbianCouple)
        {

            $scope.formTwoData.anyGender = 'anyGender';
        }
        else{

            $scope.formTwoData.genderMale = searchData.genderMale;
            $scope.formTwoData.genderFemale = searchData.genderFemale;
            $scope.formTwoData.genderMaleFemaleCouple = searchData.genderMaleFemaleCouple;
            $scope.formTwoData.genderGayCouple = searchData.genderGayCouple;
            $scope.formTwoData.genderLesbianCouple = searchData.genderLesbianCouple;
        }
        $scope.formTwoData.therapeuticMassage = searchData.therapeuticMassage;
        $scope.formTwoData.sensualMassage = searchData.sensualMassage;
        $scope.formTwoData.minAge = searchData.minAge;
        $scope.formTwoData.maxAge = searchData.maxAge;
        $scope.formTwoData.language = searchData.language;
           // $scope.formTwoData.bodyType = searchData.bodyType;

           var bodyType=searchData.bodyType;
           if(bodyType!=null){
            var str=bodyType.split(','),
            bodyData={};
            for(var i=0;i<str.length;i++)
            {
                if(str[i]== 'slim/petite'){
                    bodyData['slim']=str[i];
                }else
                {
                  bodyData[str[i]]=str[i];
              }

            }
      }

      $scope.formTwoData.bodyType = bodyData;
        var heightData=searchData.height;
    //  alert(heightData);
     if(heightData)
      {
        //  height=HELPER_heightData[height2Id].id;
          var heightLen=HELPER_heightData.length;
          for(var i=0;i<heightLen;i++)
                {
                    if(HELPER_heightData[i].value==heightData)
                    {
                        $scope.formTwoData.height=HELPER_heightData[i].id;
                    }
                }
      }

      $scope.formTwoData.maxHeight = searchData.maxHeight;
      $scope.formTwoData.smokingHabit = searchData.smokingHabit;
      $scope.formTwoData.drinkingHabit = searchData.drinkingHabit;
          //$scope.formTwoData.levelType = searchData.levelType;
          var levelType=searchData.levelType;
          if(levelType!=null){

            var str=levelType.split(','),
            levelData={};
            for(var i=0;i<str.length;i++)
            if(str[i]=='Aficionado or Amateur')
            {

                levelData['aficionado']='aficionado';
            }else
            {
                 levelData[str[i]]=str[i];
            }
      }
      $scope.formTwoData.levelType = levelData;

      $scope.formTwoData.levelTypeOther = searchData.levelTypeOther;
            //$scope.formTwoData.massageStyle = searchData.massageStyle;

            var massageStyle=searchData.massageStyle;
            if(massageStyle!=null)
            {

                var str=massageStyle.split(','),
                styleData={};
                for(var i=0;i<str.length;i++)
                    if(str[i]== 'deep_tissue/strong'){
                    styleData['deep_tissue_strong']=str[i];
                }else{
                  styleData[str[i]]=str[i];
              }
          }
          $scope.formTwoData.massageStyle = styleData;

          $scope.formTwoData.massageStyleOther = searchData.massageStyleOther;


          $scope.formTwoData.serviceReceiveOnly = searchData.serviceReceiveOnly;
          $scope.formTwoData.serviceGiveOnly = searchData.serviceGiveOnly;
          $scope.formTwoData.serviceExchange = searchData.serviceExchange;
          $scope.formTwoData.servicePayRightMasseur = searchData.servicePayRightMasseur;
          $scope.formTwoData.relationshipPartner = searchData.relationshipPartner;
          $scope.formTwoData.relationshipFriendship = searchData.relationshipFriendship;
          $scope.formTwoData.relationshipIntimate = searchData.relationshipIntimate;
          $scope.formTwoData.relationshipRomance = searchData.relationshipRomance;
          $scope.formTwoData.massageFrequency = searchData.massageFrequency;
          console.log($scope.formTwoData);
      }

  }).error(function (err) {
    console.log("ERROR" + err);
});


  $scope.editSearchFormSubmit = function (isValid, formTwoData, editSearchForm) {

    if (isValid === true) {
        var searchPreference = {};
        searchPreference.therapeuticMassage = formTwoData.therapeuticMassage;
        searchPreference.sensualMassage = formTwoData.sensualMassage;
        searchPreference.genderMale = formTwoData.genderMale;
        searchPreference.genderFemale = formTwoData.genderFemale;
        searchPreference.genderMaleFemaleCouple = formTwoData.genderMaleFemaleCouple;
        searchPreference.genderGayCouple = formTwoData.genderGayCouple;
        searchPreference.genderLesbianCouple = formTwoData.genderLesbianCouple;
        if(searchPreference.genderMale == undefined || searchPreference.genderMale == false){
            searchPreference.genderMale= null;
        }
        if(searchPreference.genderGayCouple == undefined || searchPreference.genderGayCouple == false){
            searchPreference.genderGayCouple= null;
        }
        if(searchPreference.genderFemale == undefined || searchPreference.genderFemale == false){
            searchPreference.genderFemale= null;
        }
        if(searchPreference.genderMaleFemaleCouple == undefined || searchPreference.genderMaleFemaleCouple == false ){
            searchPreference.genderMaleFemaleCouple= null;
        }
        if(searchPreference.genderLesbianCouple == undefined || searchPreference.genderLesbianCouple == false ){
            searchPreference.genderLesbianCouple= null;
        }

        if (formTwoData.anyGender == 'anyGender') {
            console.log("formTwoData.anyGender");
            searchPreference.genderMale = 'male';
            searchPreference.genderFemale = 'female';
            searchPreference.genderMaleFemaleCouple = 'male_female_couple';
            searchPreference.genderGayCouple = 'gay_couple';
            searchPreference.genderLesbianCouple = 'lesbian_couple';
        }
        searchPreference.minAge = formTwoData.minAge;
        searchPreference.maxAge = formTwoData.maxAge;
        searchPreference.language = formTwoData.language;
        searchPreference.bodyType = formTwoData.bodyType;
        var bodyType =formTwoData.bodyType;
        var bodyTypeSearch = Object.keys(bodyType).map(function(v) {
          return bodyType[v];
      }).join();

        searchPreference.bodyType = bodyTypeSearch.replace(/([,])+/g, ",");
        if(formTwoData.height)
        {
            var minHeight=HELPER_heightData[formTwoData.height-1].value;

        }
        searchPreference.height = minHeight;
        searchPreference.maxHeight = formTwoData.maxHeight;
        searchPreference.drinkingHabit = formTwoData.drinkingHabit;
        searchPreference.smokingHabit = formTwoData.smokingHabit;
           // searchPreference.levelType = formTwoData.levelType;
           if(formTwoData.levelType!= undefined)
           {
                var levelType =formTwoData.levelType;

                var levelTypeSearch = Object.keys(levelType).map(function(v) {

                     if(v=='aficionado')
                    {
                        //alert(JSON.stringify(levelType.aficionado));
                        if(JSON.stringify(levelType.aficionado)=='null' || JSON.stringify(levelType.aficionado)==null)
                        {

                                 return levelType[v];
                        }
                        else
                        {
                            return 'Aficionado or Amateur';
                        }
                    }
                    else
                    {
                         return levelType[v];
                    }

            }).join();

            searchPreference.levelType = levelTypeSearch.replace(/([,])+/g, ",");
        }
        else
        {
            searchPreference.levelType = '';
        }

        searchPreference.levelType = levelTypeSearch;
        searchPreference.levelTypeOther = formTwoData.levelTypeOther;
           // searchPreference.massageStyle = formTwoData.massageStyle;
	if(formTwoData.massageStyle){
           searchPreference.massageStyleOther = (formTwoData.massageStyle.others === 'others') ? formTwoData.massageStyleOther : '';
           var massageStyle =formTwoData.massageStyle;

           var massageStyleSearch = Object.keys(massageStyle).map(function(v) {
              return massageStyle[v];
          }).join();

           searchPreference.massageStyle = massageStyleSearch;
}
           searchPreference.serviceReceiveOnly = formTwoData.serviceReceiveOnly;
           searchPreference.serviceGiveOnly = formTwoData.serviceGiveOnly;
           searchPreference.serviceExchange = formTwoData.serviceExchange;

           if(searchPreference.serviceReceiveOnly == undefined || searchPreference.serviceReceiveOnly == false ){
            searchPreference.serviceReceiveOnly= null;
        }
        if(searchPreference.serviceGiveOnly == undefined || searchPreference.serviceGiveOnly == false ){
            searchPreference.serviceGiveOnly= null;
        }
        if(searchPreference.serviceExchange == undefined || searchPreference.serviceExchange == false ){
            searchPreference.serviceExchange= null;
        }
        if(searchPreference.servicePayRightMasseur == undefined || searchPreference.servicePayRightMasseur == false){
            searchPreference.servicePayRightMasseur= null;
        }


        searchPreference.servicePayRightMasseur = formTwoData.servicePayRightMasseur;
        searchPreference.relationshipPartner = formTwoData.relationshipPartner;
        searchPreference.relationshipFriendship = formTwoData.relationshipFriendship;
        searchPreference.relationshipIntimate = formTwoData.relationshipIntimate;
        searchPreference.relationshipRomance = formTwoData.relationshipRomance;

        if(searchPreference.servicePayRightMasseur == undefined || searchPreference.servicePayRightMasseur == false){
            searchPreference.servicePayRightMasseur= null;
        }
        if(searchPreference.relationshipPartner == undefined || searchPreference.relationshipPartner == false ){
            searchPreference.relationshipPartner= null;
        }
        if(searchPreference.relationshipFriendship == undefined || searchPreference.relationshipFriendship == false){
            searchPreference.relationshipFriendship= null;
        }
        if(searchPreference.relationshipIntimate == undefined || searchPreference.relationshipIntimate == false){
            searchPreference.relationshipIntimate= null;
        }
        if(searchPreference.relationshipRomance == undefined || searchPreference.relationshipRomance == false){
            searchPreference.relationshipRomance= null;
        }

        searchPreference.massageFrequency = formTwoData.massageFrequency;

        var params = {
            userId: uid,
            searchPreference: searchPreference
        };
        console.log(params);
        $http.post($rootScope.STATIC_URL + 'users/updateSearchPreference', params).success(function (response) {

            if (response.status === 1) {
                $rootScope.searchUpdated = true;
                $location.path('/landingpage');
            } else {
                $scope.errorMessage = "Error in upation of user search preferences.";
            }

        }).error(function (err) {
            console.log("ERROR" + err);
        });

    } else {
        $timeout(function () {
            angular.element("[name='" + editSearchForm.$name + "']").find('.ng-invalid:visible:first').focus();
        }, 0);
    }

}

});


userControllers.controller('preSignupCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = false;
    $scope.emailSending = false;

    if($window.localStorage.userToken){
      console.log("loginCtrl IFFFF CONDITION");
      $window.location.href = $rootScope.hashbang + "myprofile";
  }else{
    $scope.userPreSignup = function (isValid) {
            $scope.buttonDisabled = true;
        if (isValid === true) {
            $rootScope.showloader = true;
            $scope.emailSending = true;

            var signupEmail = $scope.signupEmail;
            var params = {
                email: signupEmail
            };

            $http.post($rootScope.STATIC_URL + 'users/preSignup', params).success(function (response) {
                $rootScope.showloader = false;
                $scope.emailSending = false;
                //$scope.buttonDisabled = false;
                console.log(response);
            /*      if (response.status === 1) {

                  if (response.message == 'signupcompleted') {

                        response.status = 0;
                        response.message  = "You have already created an account with this email address. Please sign in!";


                    } else {

                        response.message  = "Thank you for signing up with Zenbrisa! The verification email has been sent to your email address.";

                    }



                } else {

                    response.message = "Invalid email";
                }
*/
                $rootScope.addAlert(response);

            }).error(function (err) {

                console.log("ERROR" + err);

            });

        }

    }
}

});



userControllers.controller('referCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.submitReferral=function(){

        var advSuccessMsg="Thanks for referring Zenbrisa to your friend!"
        var advErrMsg="Please fill in the mandatory fields";
        var advServerErrMsg="Sorry!Some issues with sending your invitation.";
        var userName=JSON.parse($window.localStorage.user).username;
        var userId=JSON.parse($window.localStorage.user).id;
        var userEmail=JSON.parse($window.localStorage.user).email;
        var senderName=$scope.senderName;
        var referName=$scope.referName;
        var referEmail=$scope.referEmail;
        var userEmail=JSON.parse($window.localStorage.user).email;
        console.log("****userEmail****");
        console.log(userEmail);
        var message=$scope.message;
        var viewStatus="NotSeen";
        var params={
            userId:  userId,
            senderName: senderName,
            referName     :referName,
            referEmail:referEmail,
            message :message,
            userName : userName
        };
        if(userEmail != referEmail){
        if(referName && referEmail){
            console.log("val id=" + userId + ",name=" + referName +",email=" + referEmail +",msg=" + message);
            $http.post($rootScope.STATIC_URL + 'users/referFriend',params).success(function(response){

                if(response.status==1){
                    console.log("**********refer invitation");
                    console.log(response);
                    var Successresponse={status:true,message:advSuccessMsg};
                    $rootScope.addAlert(Successresponse);

                    $scope.senderName="";
                    $scope.referName="";
                    $scope.referEmail="";
                    $scope.message="";
                }

            }).error(function(err){
                console.log("Error"+err);
                var Successresponse={status:true,message:advServerErrMsg};
                $rootScope.addAlert(Successresponse);

            });
        }
        else{
            console.log("-------else--------------");
            var Successresponse={status:false,message:advErrMsg};
            $rootScope.addAlert(Successresponse);
        }
    }
    else{
        alert("Oops! You can't invite yourself!");
        $scope.referEmail="";
    }
    };
});




userControllers.controller('signupOneCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout,$compile) {

  $scope.lat                            = undefined;
  $scope.lng                            = undefined;
  $scope.formattedAddress               = undefined;
  $scope.errorMessage                   = "";
  $scope.selectedCountryPresentErrorMsg = "";

function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition);
    } else {
        x.innerHTML = "Geolocation is not supported by this browser.";
    }
}


function showPosition(position) {


    var test= "Latitude: " + position.coords.latitude +  "Longitude: " + position.coords.longitude;
    console.log("-------><-------");
    console.log(test);
     $timeout(function(){
             $scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+position.coords.latitude+","+position.coords.longitude+"&z=14&output=embed";
        },1000);


}

    getLocation();
            $scope.$on('gmPlacesAutocomplete::placeChanged', function(){

                var location = $scope.formOneData.autocompleteData.getPlace().geometry.location;
                $scope.formattedAddress = $scope.formOneData.autocompleteData.getPlace().formatted_address;
                var add= $scope.formattedAddress;
                var place=   $scope.formOneData.autocompleteData.getPlace().address_components;
                var placeLength=place.length;
                console.log("This will be the addresse");
                console.log(place[0].long_name);
                   $scope.formOneData.country='';
                  $scope.formOneData.state='';
                   $scope.formOneData.city='';
                for (var i = 0; i < placeLength; i++)
                {


                   if(place[i].types[0]=='locality')
                    {
                        $scope.formOneData.city=place[i].long_name;
                    }

                    else if(place[i].types[0]=='administrative_area_level_1')
                    {
                        $scope.formOneData.state=place[i].long_name;
                    }

                    else if(place[i].types[0]=='country')
                    {
                        $scope.formOneData.country=place[i].long_name;
                    }


                }
              $scope.formOneData.latitude =location.lat();
              $scope.formOneData.longitude = location.lng();
$scope.formOneData.autocompleteData='';
              $scope.iframeSrc = "https://maps.google.com/maps?language=ru-RU&q="+location.lat()+","+location.lng()+"&z=14&output=embed";
              $scope.$apply();
          });

     $scope.getYears = (function () {
          var today = new Date();
          var years=[];
          // var dd = today.getDate();
          //  var mm = today.getMonth()+1; //January is 0!
            var currentYear = today.getFullYear();
            var yearLimit=currentYear-18;
        for (var i=yearLimit;i>1930;i--)
        {
            years.push(i);
        }

        $scope.year=years;

    });
$scope.getYears();

    $scope.requiresLogin = false;
    $scope.formOneData = {};
    $scope.checkKey = false;
    $scope.formOneData.email = '';
    $rootScope.showloader = true;
    $window.localStorage.formOneSubmit = false;


    $scope.checkAll = function () {

       if($scope.formOneData.therapeuticMassageOne===true)
       {
            $scope.formOneData.therapeuticMassageOne=false;
        }
        if($scope.formOneData.sensualMassageOne===true)
        {
            $scope.formOneData.sensualMassageOne=false;

        }

    };
     $scope.checkTwoAll = function () {

       if($scope.formOneData.therapeuticMassageTwo===true)
       {

            $scope.formOneData.therapeuticMassageTwo=false;
        }
        if($scope.formOneData.sensualMassageTwo===true)
        {
            $scope.formOneData.sensualMassageTwo=false;

        }



    };
     $scope.uncheckType = function () {

       if($scope.formOneData.personOneMassageType_both===true)
       {

        $scope.formOneData.personOneMassageType_both=false;
        }


    };
    $scope.uncheckTwoType = function () {


       if($scope.formOneData.personTwoMassageType_both===true)
       {

        $scope.formOneData.personTwoMassageType_both=false;
        }


    };

if ($window.localStorage.formOneData) {


    var formData = {};
    formData = JSON.parse($window.localStorage.formOneData);
        //$scope.formOneData.username = formData.username;
        $scope.formOneData.gender = formData.gender;
        $scope.formOneData.telephone = formData.telephone;
        $scope.formOneData.city = formData.city;
        $scope.formOneData.state = formData.state;
        $scope.formOneData.country = formData.country;
        $scope.formOneData.zipcode = formData.zipcode;
        $scope.formOneData.terms = formData.terms;

        // Person 1
        $scope.formOneData.therapeuticMassageOne = formData.therapeuticMassageOne;
        $scope.formOneData.therapeuticMassageOneDesc = formData.therapeuticMassageOneDesc;
        $scope.formOneData.sensualMassageOne = formData.sensualMassageOne;
        $scope.formOneData.sensualMassageOneDesc = formData.sensualMassageOneDesc;
        if (formData.personOneMassageType_both === true) {
            $scope.formOneData.therapeuticMassageOne = true;
            $scope.formOneData.sensualMassageOne = true;
        }
            var dobOne = new Date(formData.dobOne)
            $scope.formOneData.dayOne = dobOne.getDate();
            $scope.formOneData.monthOne =(dobOne.getMonth() + 1);
            $scope.formOneData.yearOne = dobOne.getFullYear();

        $scope.formOneData.languageOne = formData.languageOne;
        $scope.formOneData.bodyTypeOne = formData.bodyTypeOne;
        $scope.formOneData.heightOne = formData.heightOne;
        $scope.formOneData.drinkingHabitOne = formData.drinkingHabitOne;
        $scope.formOneData.smokingHabitOne = formData.smokingHabitOne;
        $scope.formOneData.massageFrequencyOne = formData.massageFrequencyOne;
        $scope.formOneData.levelTypeOne = formData.levelTypeOne;
        $scope.formOneData.levelTypeOneOther = formData.levelTypeOneOther;
        $scope.formOneData.professionalType = formData.professionalType;
        $scope.formOneData.experienceOne = formData.experienceOne;
        $scope.formOneData.trainingHoursOne = formData.trainingHoursOne;

        $scope.formOneData.massageStylesOne = formData.massageStylesOne;
         /*   if(typeof formOneData.massageStylesOne.deep_tissue_strong == undefined || formOneData.massageStylesOne.deep_tissue_strong == false ||  formOneData.massageStylesOne.deep_tissue_strong == 'null'){
				formOneData.massageStylesOne.deep_tissue_strong= null;
			}
			if(typeof formOneData.massageStylesOne.thai == undefined || formOneData.massageStylesOne.thai == false || formOneData.massageStylesOne.thai == 'null'){
				formOneData.massageStylesOne.thai= null;
			}
			if(typeof formOneData.massageStylesOne.reflexology == undefined || formOneData.massageStylesOne.reflexology == false || formOneData.massageStylesOne.reflexology == 'null'){
			   formOneData.massageStylesOne.reflexology= null;
		    }
		    if(typeof formOneData.massageStylesOne.swedish == undefined || formOneData.massageStylesOne.swedish == false  || formOneData.massageStylesOne.swedish == 'null'){
				formOneData.massageStylesOne.swedish= null;
			}
			if(typeof formOneData.massageStylesOne.chinese == undefined || formOneData.massageStylesOne.chinese == false || formOneData.massageStylesOne.chinese == 'null'){
				formOneData.massageStylesOne.chinese= null;
			}
			if(typeof formOneData.massageStylesOne.others == undefined || formOneData.massageStylesOne.others == false || formOneData.massageStylesOne.others == 'null' ){
				formOneData.massageStylesOne.others= null;
			}

		//userinfo.massageStylesOneOther  = (formOneData.massageStylesOne.others === 'others') ? formOneData.massageStylesOneOther : '';
			var string =formOneData.massageStylesOne;
			var res = Object.keys(string).map(function(v) {
			  return string[v];
			}).join();

			$scope.formOneData.massageStylesOne = res.replace(/([,])+/g, ",");
			*/
            $scope.formOneData.massageStylesOneOther = formData.massageStylesOneOther;

        // Person 2
        $scope.formOneData.therapeuticMassageTwo = formData.therapeuticMassageTwo;
        $scope.formOneData.therapeuticMassageTwoDesc = formData.therapeuticMassageTwoDesc;
        $scope.formOneData.sensualMassageTwo = formData.sensualMassageTwo;
        $scope.formOneData.sensualMassageTwoDesc = formData.sensualMassageTwoDesc;
        if (formData.personTwoMassageType_both === true) {
            $scope.formOneData.therapeuticMassageTwo = true;
            $scope.formOneData.sensualMassageTwo = true;
        }
          var dobTwo = new Date(formData.dobTwo)
            $scope.formOneData.dayTwo = dobTwo.getDate();
            $scope.formOneData.monthTwo =(dobTwo.getMonth() + 1);
            $scope.formOneData.yearTwo = dobTwo.getFullYear();
        //$scope.formOneData.dobTwo = formData.dobTwo;
        $scope.formOneData.languageTwo = formData.languageTwo;
        $scope.formOneData.bodyTypeTwo = formData.bodyTypeTwo;
        $scope.formOneData.heightTwo = formData.heightTwo;
        $scope.formOneData.drinkingHabitTwo = formData.drinkingHabitTwo;
        $scope.formOneData.smokingHabitTwo = formData.smokingHabitTwo;
        $scope.formOneData.massageFrequencyTwo = formData.massageFrequencyTwo;
        $scope.formOneData.levelTypeTwo = formData.levelTypeTwo;
        $scope.formOneData.professionalTypeTwo = formData.professionalTypeTwo;
        $scope.formOneData.levelTypeTwoOther = formData.levelTypeTwoOther;
        $scope.formOneData.experienceTwo = formData.experienceTwo;
        $scope.formOneData.trainingHoursTwo = formData.trainingHoursTwo;
        $scope.formOneData.massageStylesTwo = formData.massageStylesTwo;
        $scope.formOneData.massageStylesTwoOther = formData.massageStylesTwoOther;

    } else {
        //Person 1 - Default
      //  $scope.formOneData.gender = 'male';
      $scope.formOneData.languageOne = '';
      $scope.formOneData.bodyTypeOne = '';
      $scope.formOneData.heightOne = '';
      $scope.formOneData.drinkingHabitOne = '';
      $scope.formOneData.smokingHabitOne = '';
      $scope.formOneData.massageFrequencyOne = '';
      $scope.formOneData.levelTypeOne = '';
   //   $scope.formOneData.experienceOne = 'none_at_all';
  //    $scope.formOneData.trainingHoursOne = 'no_formal_training';
 //       $scope.formOneData.massageStylesOne = 'deep_tissue_strong';

        //Person 2 - Default
        $scope.formOneData.languageTwo = '';
        $scope.formOneData.bodyTypeTwo = '';
        $scope.formOneData.heightTwo = null;
        $scope.formOneData.drinkingHabitTwo = '';
        $scope.formOneData.smokingHabitTwo = '';
        $scope.formOneData.massageFrequencyTwo = '';
        $scope.formOneData.levelTypeTwo = '';
    //    $scope.formOneData.experienceTwo = 'none_at_all';
     //   $scope.formOneData.trainingHoursTwo = 'no_formal_training';
      //  $scope.formOneData.massageStylesTwo = 'deep_tissue_strong';
  }

  var hashKey = $routeParams.hash;
  if (typeof hashKey === 'undefined' || hashKey === '') {
    $window.location.href = $rootScope.hashbang + "signup";
} else {

    $http.post($rootScope.STATIC_URL + 'users/checkSignupKey', {emailVerificationKey: hashKey}).success(function (response) {
        $rootScope.showloader = false;
        if (response.status === 1) {
            $scope.checkKey = true;
            $scope.formOneData.email = response.data.email;
        } else {
            $scope.checkKey = false;
            $window.location.href = $rootScope.hashbang + "signup";
        }

    }).error(function (err) {
        console.log("ERROR" + err);
    });
}

$scope.checkTelephoneNumber = (function () {
    var regex = /^([+]{1})?[0-9]{10}([0-9]+)?$/;
    return {
        test: function (value) {
            return (value.length > 0) ? regex.test(value) : true;
        }
    };
})();

$scope.resetUsernameFlags = function () {
    $scope.usernameExists = false;
    $scope.validUsername = false;
}

$scope.checkUsername = function () {

    var uname = $scope.formOneData.username;
    if ((typeof uname !== 'undefined') && (uname.length >= 6) && (uname.length <= 10)) {

        $http.post($rootScope.STATIC_URL + 'users/checkUsername', {username: uname}).success(function (response) {

            if (response.status === 1 && response.message === 'username_exists') {
                        //$scope.formOneData.username.$setValidity('invalid', true);
                        $scope.usernameExists = true;
                    } else {
                        $scope.validUsername = true;
                    }

                }).error(function (err) {
                    console.log("ERROR" + err);
                });

            } else {
                console.log('no');
            }

        }

    $scope.signupOneFormSubmit = function (isValid, formOneData, signupOneForm) {
        if (isValid === true && $scope.validUsername) {
            //$scope.geoCode();
            $window.localStorage.formOneData = JSON.stringify(formOneData);
            $window.localStorage.formOneSubmit  = true;
            $location.path('/signup_two/' + hashKey);


        } else {
            $timeout(function () {
                console.log(angular.element("[name='" + signupOneForm.$name + "']"));
                angular.element("[name='" + signupOneForm.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            }, 0);
        }
    }

});




var getAge = function (dateString) {
    var today = new Date();
    var birthDate = new Date(dateString);
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    return age;
}


userControllers.controller('signupTwoCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {
   console.log($window.localStorage.formOneSubmit);
        $scope.height  = HELPER_heightData;
     $scope.maxHeight  = HELPER_heightData;

   $scope.requiresLogin = false;
   $scope.formTwoData = {};
   $rootScope.showloader = true;
   $scope.minimumAge = function (min) {
    if(min == 18)
    {
     $scope.formTwoData.maxAge=20;
 }
 else{
    $scope.formTwoData.maxAge = parseInt(min, 10) + 10;
}
};
$scope.minimumHeight = function (min) {
  // $scope.formTwoData.maxHeight = parseFloat(min,100) +0.02;
    var heightLen=HELPER_heightData.length;
    var maxHeight=[];
    console.log(HELPER_heightData[min].value);

    for(var i=min;i<heightLen;i++)
    {
        console.log(i);
        //$scope.maxheight=HELPER_heightData[i];
        maxHeight.push({
            id: HELPER_heightData[i].id,
            name: HELPER_heightData[i].name,
            value: HELPER_heightData[i].value
        });
    }

    $scope.formTwoData.maxHeight=HELPER_heightData[min].value;
    console.log(maxHeight);
    $scope.maxHeight=maxHeight;
};
$scope.checkKey = false;

var hashKey = $routeParams.hash;
if (typeof hashKey === 'undefined' || hashKey === '') {
    $window.location.href = $rootScope.hashbang + "signup";
} else {

    if ($window.localStorage.formOneSubmit  === false) {
        $location.path('/signup_one/' + hashKey);
    } else {

        $http.post($rootScope.STATIC_URL + 'users/checkSignupKey', {emailVerificationKey: hashKey}).success(function (response) {
            $rootScope.showloader = false;
            if (response.status === 1) {
                $scope.checkKey = true;
            } else {
                $scope.checkKey = false;
                $window.location.href = $rootScope.hashbang + "signup";
            }

        }).error(function (err) {
            console.log("ERROR" + err);
        });
    }
}
$scope.checkAll = function () {

   if($scope.formTwoData.genderMale)
   {
        $scope.formTwoData.genderMale=false;
    }
    if($scope.formTwoData.genderFemale)
    {
        $scope.formTwoData.genderFemale=false;

    }
    if($scope.formTwoData.genderMaleFemaleCouple)
    {
        $scope.formTwoData.genderMaleFemaleCouple=false;

    }
    if($scope.formTwoData.genderGayCouple)
    {
        $scope.formTwoData.genderGayCouple=false;

    }
    if($scope.formTwoData.genderLesbianCouple)
    {
        $scope.formTwoData.genderLesbianCouple=false;

    }

};
$scope.uncheckGender = function () {

   if($scope.formTwoData.anyGender)
   {
        $scope.formTwoData.anyGender=false;
    }


};
$scope.signupTwoFormSubmit = function (isValid, formTwoData, signupTwoForm) {
    /*
        var file = $rootScope.STATIC_URL+ 'assets/images/profilePics/default/default.png';
        var fd = new FormData();
        fd.append('userId',$window.localStorage.uid);
        fd.append('profilePic1', file);
    */

    console.log($window.localStorage.formOneSubmit);

    if (isValid === true && $window.localStorage.formOneSubmit  === 'true') {


        $rootScope.showloader = true;
        $scope.buttonDisabled = true;
        var formOneData = {};
        var user = {};
        var userinfo = {};
        var searchPreference = {};

        formOneData = JSON.parse($window.localStorage.formOneData);

        user.username = formOneData.username;
        user.email = formOneData.email;
        user.password = formOneData.password;

        userinfo.gender = formOneData.gender;
        userinfo.telephone = formOneData.telephone;
        userinfo.city = formOneData.city;
        userinfo.country = formOneData.country;
        userinfo.state = formOneData.state;
        if(formOneData.city==='null' || formOneData.city===null)
        {

            userinfo.address=formOneData.state+", "+formOneData.country;
        }else
        {
            userinfo.address= formOneData.city+", "+formOneData.state+", "+formOneData.country;

        }
        userinfo.zipcode = formOneData.zipcode;
        userinfo.latitude = formOneData.latitude
        userinfo.longitude = formOneData.longitude;

        if (formOneData.personOneMassageType_both === true) {
            formOneData.therapeuticMassageOne = true;
            formOneData.sensualMassageOne = true;
        }
        userinfo.therapeuticMassageOne = (formOneData.therapeuticMassageOne === true) ? 'therapeutic' : '';
        userinfo.therapeuticMassageOneDesc = (formOneData.therapeuticMassageOne === true) ? formOneData.therapeuticMassageOneDesc: '';
        userinfo.sensualMassageOne = (formOneData.sensualMassageOne === true) ? 'sensual' : '';
        userinfo.sensualMassageOneDesc = (formOneData.sensualMassageOne === true) ? formOneData.sensualMassageOneDesc: '';


      userinfo.dayOne = formOneData.dayOne;
      userinfo.monthOne = formOneData.monthOne;
      userinfo.yearOne = formOneData.yearOne;
        userinfo.dobOne = formOneData.yearOne+'-'+formOneData.monthOne+'-'+formOneData.dayOne;

        userinfo.ageOne = getAge(userinfo.dobOne);

        userinfo.languageOne = formOneData.languageOne;
        userinfo.bodyTypeOne = formOneData.bodyTypeOne;
        userinfo.heightOne = formOneData.heightOne;
        userinfo.drinkingHabitOne = formOneData.drinkingHabitOne;
        userinfo.smokingHabitOne = formOneData.smokingHabitOne;
        userinfo.massageFrequencyOne = formOneData.massageFrequencyOne;
        userinfo.levelTypeOne = formOneData.levelTypeOne;
        userinfo.professionalType = formOneData.professionalType;
        userinfo.levelTypeOneOther = formOneData.levelTypeOneOther;
        userinfo.levelTypeTwo = formOneData.levelTypeTwo;
        userinfo.professionalTypeTwo = formOneData.professionalTypeTwo;
        userinfo.experienceOne = formOneData.experienceOne;
        userinfo.trainingHoursOne = formOneData.trainingHoursOne;
           // userinfo.massageStylesOne = formOneData.massageStylesOne;
        if (formOneData.massageStylesOne) {
           var string =formOneData.massageStylesOne;
           var res = Object.keys(string).map(function(v) {
              return string[v];
          }).join();
           userinfo.massageStylesOne = res;
	   }else
	   {
			userinfo.massageStylesOne='';
	   }

           userinfo.massageStylesOneOther = formOneData.massageStylesOneOther;
            if (formOneData.personTwoMassageType_both === true) {
                    userinfo.therapeuticMassageTwo = true;
                    userinfo.sensualMassageTwo = true;
                }
           userinfo.therapeuticMassageTwo = (formOneData.therapeuticMassageTwo === true) ? 'therapeutic' : '';
           userinfo.therapeuticMassageTwoDesc = (formOneData.therapeuticMassageTwo === true) ? formOneData.therapeuticMassageTwoDesc : '';
           userinfo.sensualMassageTwo = (formOneData.sensualMassageTwo === true) ? 'sensual' : '';
           userinfo.sensualMassageTwoDesc = (formOneData.sensualMassageTwo === true) ? formOneData.sensualMassageTwoDesc: '';


          if(formOneData.dayTwo==null || typeof formOneData.dayTwo=='undefined'  || formOneData.monthTwo==null || typeof formOneData.monthTwo=='undefined' || formOneData.yearTwo==null || typeof formOneData.yearTwo=='undefined' )
        {

                userinfo.dobTwo = null;
                userinfo.ageTwo=null;

        }else{
                userinfo.dayTwo = formOneData.dayTwo;
                userinfo.monthTwo = formOneData.monthTwo;
                userinfo.yearTwo = formOneData.yearTwo;
                userinfo.dobTwo = formOneData.yearTwo+'-'+formOneData.monthTwo+'-'+formOneData.dayTwo;
                userinfo.ageTwo = getAge(userinfo.dobTwo);
        }
        userinfo.languageTwo = formOneData.languageTwo;
        userinfo.bodyTypeTwo = formOneData.bodyTypeTwo;
        userinfo.heightTwo = formOneData.heightTwo;
        userinfo.drinkingHabitTwo = formOneData.drinkingHabitTwo;
        userinfo.smokingHabitTwo = formOneData.smokingHabitTwo;
        userinfo.massageFrequencyTwo = formOneData.massageFrequencyTwo;
        userinfo.levelTypeTwo = formOneData.levelTypeTwo;
        userinfo.levelTypeTwoOther = formOneData.levelTypeTwoOther;
        userinfo.experienceTwo = formOneData.experienceTwo;
        userinfo.trainingHoursTwo = formOneData.trainingHoursTwo;
            //userinfo.massageStylesTwo = formOneData.massageStylesTwo;
            if(formOneData.massageStylesTwo)
            {
                var string2 =formOneData.massageStylesTwo;
                var res2 = Object.keys(string2).map(function(v) {
                  return string2[v];
              }).join();

                userinfo.massageStylesTwo = res2;
            }else
			   {
					userinfo.massageStylesTwo='';

			   }

            userinfo.massageStylesTwoOther = formOneData.massageStylesTwoOther;

            searchPreference.therapeuticMassage = formTwoData.therapeuticMassage;
            searchPreference.sensualMassage = formTwoData.sensualMassage;

            if (formTwoData.massageType_both === true) {
                searchPreference.therapeuticMassage = 'therapeutic';
                searchPreference.sensualMassage = 'sensual';
            }

            searchPreference.genderMale = formTwoData.genderMale;
            searchPreference.genderFemale = formTwoData.genderFemale;
            searchPreference.genderMaleFemaleCouple = formTwoData.genderMaleFemaleCouple;
            searchPreference.genderGayCouple = formTwoData.genderGayCouple;
            searchPreference.genderLesbianCouple = formTwoData.genderLesbianCouple;
            if(searchPreference.genderMale==false)
            {
                searchPreference.genderMale= null;
            }
            if(searchPreference.genderFemale==false)
            {
                searchPreference.genderFemale= null;
            }
            if(searchPreference.genderMaleFemaleCouple==false)
            {
                searchPreference.genderMaleFemaleCouple= null;
            }
            if(searchPreference.genderGayCouple==false)
            {
                searchPreference.genderGayCouple= null;
            }if(searchPreference.genderLesbianCouple==false)
            {
                searchPreference.genderLesbianCouple= null;
            }
            if (formTwoData.anyGender == 'anyGender') {
                console.log("formTwoData.anyGender");
                searchPreference.genderMale = 'male';
                searchPreference.genderFemale = 'female';
                searchPreference.genderMaleFemaleCouple = 'male_female_couple';
                searchPreference.genderGayCouple = 'gay_couple';
                searchPreference.genderLesbianCouple = 'lesbian_couple';
            }
            searchPreference.minAge = formTwoData.minAge;
            searchPreference.maxAge = formTwoData.maxAge;
            searchPreference.language = formTwoData.language;
            //searchPreference.bodyType = formTwoData.bodyType;
            var bodyType =formTwoData.bodyType;
            var bodyTypeSearch = Object.keys(bodyType).map(function(v) {
              return bodyType[v];
          }).join();

            searchPreference.bodyType = bodyTypeSearch;
            if(formTwoData.height)
            {
                var minHeight=HELPER_heightData[formTwoData.height-1].value;

            }
            searchPreference.height = minHeight;

            searchPreference.maxHeight = formTwoData.maxHeight;
            searchPreference.drinkingHabit = formTwoData.drinkingHabit;
            searchPreference.smokingHabit = formTwoData.smokingHabit;
           // searchPreference.levelType = formTwoData.levelType;
           console.log("formTwoData.levelType=>");
           console.log(formTwoData.levelType);
           if(formTwoData.levelType!= undefined)
           {
            var levelType =formTwoData.levelType;
            var levelTypeSearch = Object.keys(levelType).map(function(v) {
                     if(v=='aficionado')
                    {
                        //alert(JSON.stringify(levelType.aficionado));
                        if(JSON.stringify(levelType.aficionado)=='null' || JSON.stringify(levelType.aficionado)==null)
                        {
                                 return levelType[v];
                        }
                        else
                        {
                            return 'Aficionado or Amateur';
                        }
                    }
                    else
                    {
                         return levelType[v];
                    }

          }).join();
            searchPreference.levelType = levelTypeSearch;
        }
        else
        {
            searchPreference.levelType = '';
        }
        searchPreference.levelTypeOther = formTwoData.levelTypeOther;
            //searchPreference.massageStyle = formTwoData.massageStyle;
            if(formTwoData.massageStyle){
					var massageStyle =formTwoData.massageStyle;
					var massageStyleSearch = Object.keys(massageStyle).map(function(v) {
					  return massageStyle[v];
				  }).join();
				 searchPreference.massageStyle = massageStyleSearch;
			}

            searchPreference.massageStyleOther = formTwoData.massageStyleOther;
            searchPreference.serviceReceiveOnly = formTwoData.serviceReceiveOnly;
            searchPreference.serviceGiveOnly = formTwoData.serviceGiveOnly;
            searchPreference.serviceExchange = formTwoData.serviceExchange;

            if(searchPreference.serviceReceiveOnly == undefined || searchPreference.serviceReceiveOnly == false ){
                searchPreference.serviceReceiveOnly= null;
            }
            if(searchPreference.serviceGiveOnly == undefined || searchPreference.serviceGiveOnly == false ){
                searchPreference.serviceGiveOnly= null;
            }
            if(searchPreference.serviceExchange == undefined || searchPreference.serviceExchange == false ){
                searchPreference.serviceExchange= null;
            }
            if(searchPreference.servicePayRightMasseur == undefined || searchPreference.servicePayRightMasseur == false){
                searchPreference.servicePayRightMasseur= null;
            }


            searchPreference.servicePayRightMasseur = formTwoData.servicePayRightMasseur;
            searchPreference.relationshipPartner = formTwoData.relationshipPartner;
            searchPreference.relationshipFriendship = formTwoData.relationshipFriendship;
            searchPreference.relationshipIntimate = formTwoData.relationshipIntimate;
            searchPreference.relationshipRomance = formTwoData.relationshipRomance;

            if(searchPreference.servicePayRightMasseur == undefined || searchPreference.servicePayRightMasseur == false){
                searchPreference.servicePayRightMasseur= null;
            }
            if(searchPreference.relationshipPartner == undefined || searchPreference.relationshipPartner == false ){
                searchPreference.relationshipPartner= null;
            }
            if(searchPreference.relationshipFriendship == undefined || searchPreference.relationshipFriendship == false){
                searchPreference.relationshipFriendship= null;
            }
            if(searchPreference.relationshipIntimate == undefined || searchPreference.relationshipIntimate == false){
                searchPreference.relationshipIntimate= null;
            }
            if(searchPreference.relationshipRomance == undefined || searchPreference.relationshipRomance == false){
                searchPreference.relationshipRomance= null;
            }

            var params = {
                user: user,
                userinfo: userinfo,
                searchPreference: searchPreference,
                userRole: 'user'
            }
            console.log(params);
                                        $rootScope.signUpModal();           //pop up message beta
            $http.post($rootScope.STATIC_URL + 'users/userSignup', params).success(function (response) {

                if (response.status === 1) {
                    $rootScope.showloader = true;
                    $window.localStorage.isUserAuthenticated            = 'true';
                    $window.localStorage.userToken                      = response.data.token.token.token;
                    $window.localStorage.uid                            = response.data.token.token.userId;
                    $window.localStorage.userType                       = "user";
                    $window.localStorage.setItem("user", JSON.stringify(response.data.user));
                    $rootScope.username                                 = response.data.user.username;
                    delete $window.localStorage.formOneData;
                    delete $window.localStorage.formOneSubmit;

                    $scope.succMessage = "Successfully Registered";
                    $rootScope.userLoginStatus = true;
                    $rootScope.afterLoginSuccess();
                    $location.path('/landingpage');





                } else {
                    $scope.errorMessage = "Error in signup.";

                    $window.localStorage.isUserAuthenticated = 'false';

                    delete $window.localStorage.userToken;
                    delete $window.localStorage.userType;

                    delete $window.localStorage.privMembers;
                    delete $window.localStorage.privPackages;
                    delete $window.localStorage.privSettings;
                    delete $window.localStorage.privCmsPages;
                    delete $window.localStorage.privAdvertisements;
                    delete $window.localStorage.privBlog;
                    delete $window.localStorage.privPoll;


                }

            }).error(function (err) {

                console.log("ERROR" + err);

            });


        } else {
            $timeout(function () {
                angular.element("[name='" + signupTwoForm.$name + "']").find('.ng-invalid:visible:first').focus();
            }, 0);
        }

    }

});
userControllers.controller('forgotPasswordCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    $scope.requiresLogin = false;

    $scope.resetFlags = function () {
        $scope.errorMessage = "";
    }

    $scope.forgotPassword = function (isValid) {
        if (isValid === true) {
            $rootScope.showloader = true;
            $scope.buttonDisabled = true;
            var forgotPassEmail = $scope.forgotEmail;
            var params = {
                email: forgotPassEmail
            };
            $scope.emailSending = true;
            $scope.errorMessage = "";

            $http.post($rootScope.STATIC_URL + 'users/forgotPassword', params).success(function (response) {
                $rootScope.showloader = false;
                $scope.buttonDisabled = false;
                if (response.status === 1 && response.message === 'email_notexist') {
                    $scope.emailSending = false;
                    response.status = 0;
                    response.message = "Sorry! We weren't able to identify you by the information provided.";
                } else {
                    $scope.emailSending = false;
                    response.message  = "You will receive an email from us with instructions for resetting your password. If you don't receive this email, please check your junk mail folder or visit our Help pages to contact Customer Service for further assistance.";
                }
                $rootScope.addAlert(response);

            }).error(function (err) {
                console.log("ERROR" + err);
            });
        }
    }

});


userControllers.controller('resetPasswordCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = false;

    var hashKey = $routeParams.resetkey;
    if (typeof hashKey === 'undefined' || hashKey === '') {

    } else {
        var params = {
            hashKey: hashKey
        };
    }

    $http.post($rootScope.STATIC_URL + 'users/checkPasswordResetKey', params).success(function (response) {

        if (response.status === 1) {
            $scope.errorData = "valid_link";
        } else if (response.status === 3) {
            $scope.errorData = "expired_link";
        }

    }).error(function (err) {
        console.log("ERROR" + err);
    });


    $scope.changePassword = function (isValid) {

        if (isValid === true) {

            if (typeof hashKey === 'undefined' || hashKey === '') {
                $window.location.href = $rootScope.hashbang + "login";
            } else {
                var params = {
                    password: $scope.password,
                    hashKey: hashKey
                };
            }

            $http.post($rootScope.STATIC_URL + 'users/changeOldPassword', params).success(function (response) {

                if (response.status === 1) {
                    response.message = "Password successfully updated!!! Please Login to Continue";
                    $scope.errorData = "password_changed";
                } else {
                    $scope.errorMessage = response.message;
                }

                $rootScope.addAlert(response);
            }).error(function (err) {
                console.log("ERROR" + err);
            });
        }
    }

});

userControllers.controller('changePasswordCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    $scope.requiresLogin = true;
    // CHANGE PASSWORD FOR LOGINED USERS

    $scope.changePassword = function (isValid) {

       if (isValid === true) {
        var uid = $window.localStorage.uid;
        $rootScope.showloader = true;
        var params = {
            oldpassword: $scope.oldpassword,
            newpassword: $scope.newpassword,
            userId: uid,

        };


        $http.post($rootScope.STATIC_URL + 'users/changePassword', params).success(function (response) {
            $rootScope.showloader = false;
            if (response.status === 1) {
                response.message = "Your password has been updated successfully!";
                    //$scope.errorData = "password_changed";
                } else {
                    $scope.errorMessage = response.message;
                }

                $rootScope.addAlert(response);
            }).error(function (err) {
                console.log("ERROR" + err);
            });
        }
    }

});
/*=========================================================================
                Contact Us Controller
                * ==========================================================================*/
                userControllers.controller('contactUsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout) {
                    $rootScope.showloader = true;

                 console.log("IN----->");
                 if(typeof $window.localStorage.uid!="undefined"){
                                  var uid = $window.localStorage.uid;
                                  var params = {
                                    userId: uid,

                                };


                                $http.post($rootScope.STATIC_URL + 'users/getUserDetails', params).success(function (response) {
                                    $rootScope.showloader = false;
                                    if (response.status === 1) {
                                        var userData = response.data[0];
                                        $scope.username = userData.username;
                                        $scope.email = userData.email;
                        /*  $scope.fullname = '';
                            $scope.telephone = '';
                            $scope.country = '';
                            $scope.subject = '';
                            $scope.message = '';  */
                        }

                                }).error(function (err) {
                                    console.log("ERROR" + err);
                                });

                }
                else
                {
                    $rootScope.showloader = false;
                }

        $scope.contactFormSubmit = function (isValid,contact) {
            console.log();
            if (isValid === true) {
                $rootScope.showloader = true;
                if($window.localStorage.uid!=null){
                    var username=$scope.username;
                    var email= $scope.email;
                    var country=contact.country;
                }
                else
                {
                    var username= angular.element(document.querySelector('#username')).val();
                    var email= angular.element(document.querySelector('#email')).val();
                    var country= angular.element(document.querySelector('#country')).val();
                }
                var params = {
                 username:username,
                 email:email,
                 fullname: contact.fullname,
                 telephone: contact.telephone,
                 country: country,
                 subject: contact.subject,
                 message: contact.message,
                 url:$rootScope.STATIC_URL_EMAILTEMP,

             };
             console.log(params);
             $http.post($rootScope.STATIC_URL + 'users/contactusMail', params).success(function (response) {

                if (response.status === 1) {
                    $rootScope.showloader = false;
                    $scope.errorMessage = "emailSend";
                    $scope.succMessage = "emailSend";
                            //$scope.errorData = "password_changed";
                        } else {
                            $rootScope.showloader = false;
                            $scope.errMessage = "emailNotSend";
                            $scope.errorMessage = "emailNotSend";
                        }

                    }).error(function (err) {
                        console.log("ERROR" + err);
                    });

                }

            }

});









                /*          End Contact US         ===========================*/
/*=========================================================================
                Account Settings
                * ==========================================================================*/
                userControllers.controller('accountSettingCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

                    $scope.requiresLogin = true;

                    $scope.checkPassword = function (isValid) {

                         console.log("in ide check password**************");

                        if (isValid === true) {
                            $rootScope.showloader = true;
                            $scope.loader = true;

                            var uid = $window.localStorage.uid;

                            var params = {
                                password: $scope.password,
                                userId: uid,
                            };


                            $http.post($rootScope.STATIC_URL + 'users/checkPassword', params).success(function (response) {
                                    $rootScope.showloader = false;
                                if (response.status === 1) {
                                    $rootScope.showloader = true;

                                  $http.post($rootScope.STATIC_URL + 'users/deleteAMember', params).success(function (response) {
                                              $rootScope.showloader = false;
                                    if (response.status === 1) {
                                       $scope.loader = false;
                                       $rootScope.deleteAccModal();
                                        //response.message='Your account has been deleted. Please contact Admin for further assistance.';
                                        //alert("Your account has been deleted. Please contact Admin for further assistance.");
                                        // $rootScope.addAlert(response);
                                        $rootScope.userLogout();

                                    } else {

                                        $scope.loader = false;
                                        $scope.errorMessage = response.message;

                                    }

                                }).error(function (err) {
                                    $scope.loader = false;
                                    console.log("ERROR" + err);

                                });

                            } else {
                                $rootScope.addAlert(response);
                               // $scope.errorMessage = response.message;
                            }

                        }).error(function (err) {
                            console.log("ERROR" + err);

                        });
                    }

                }

            });
/*===================================================================================================================================
 Manage CMS Page Controller   -----
 ====================================================================================================================================*/

 userControllers.controller('cmsPagesList', function ($scope, $routeParams, $rootScope, $http) {
    //$scope.requiresLogin = false;
    $rootScope.showloader = true;
    var cmsPageId = $routeParams.cmsPageId;
 $rootScope.showloader = true;

    $scope.userPageLog=$rootScope.page;
    //  alert($scope.userPageLog);
    $http.post($rootScope.STATIC_URL + 'cmspage/cmsPageData', {request: cmsPageId}).success(function (response) {

 $rootScope.showloader = false;

        if (response.status == 1)
        {
            $scope.pageData = response.data;
            console.log('page data '+JSON.stringify(response.data.content));

        }
    });


//Accordion Part
          $scope.oneAtATime = true;
          $scope.groups = [
            {
              title: 'Dynamic Group Header - 1',
              content: 'Dynamic Group Body - 1'
            },
            {
              title: 'Dynamic Group Header - 2',
              content: 'Dynamic Group Body - 2'
            }
          ];

          $scope.items = ['Item 1', 'Item 2', 'Item 3'];

          $scope.addItem = function() {
            var newItemNo = $scope.items.length + 1;
            $scope.items.push('Item ' + newItemNo);
          };

          $scope.status = {
            isCustomHeaderOpen: false,
            isFirstOpen: true,
            isFirstDisabled: false
          };

});
//                                  Video Gallery

userControllers.controller('videogalleryCtrl', function ($scope, $routeParams, $rootScope, $window, $http) {
    var userId = $window.localStorage.uid;


        $http.post($rootScope.STATIC_URL + 'users/getVideosByUserId', {userId: userId }).success(function (response) {

            if (response.status == 1)
            {
                console.log("All Videos");
                console.log(response.data);
                $scope.videos = response.data;
            }
        }).error(function () {
            $scope.errorMessage = "Please Try Again";
        });




//$rootScope.getAllCountMyprofile();
        $scope.isEmpty = function (obj) {
            for (var i in obj) if (obj.hasOwnProperty(i)) return false;
                return true;
        };
    //Add New Video
     $scope.addVideo = function () {
    /*
                var youTubeValid = function (url)
                {
                    var reg ="/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/";
                    if (reg.test(url)) {
                        return true;
                    } else {
                        return false;
                    }
                }
*/
        var title= $scope.newTitle;
        var desc=$scope.newDesc;
        var urlInvalid=$scope.videoURL;
      //  youTubeValid(urlInvalid);
                         //          Embedding URL should be inserted, so it must be converted
        var url = urlInvalid.replace("watch?v=", "embed/");
        if(urlInvalid.indexOf("youtu.be")>0){
          var url = urlInvalid.replace("https://youtu.be/", "https://www.youtube.com/embed/");  
        }
        var fd = new FormData();
        fd.append('title', title);
        fd.append('description', desc);
        fd.append('url', url);
        fd.append('userid', userId);
        console.log('url ---- '+JSON.stringify(url));
       
        $http.post($rootScope.STATIC_URL + 'users/addVideo', fd, {transformRequest: angular.identity, headers: {'Content-Type': undefined}
    }).success(function (response) {


            if (response.status == 1)
            {

                $window.location.href = $rootScope.hashbang + "profile/videogallery";
                alert("Successfully Saved!!");
                $scope.message = response.message;
            }
        });
    },

    // Delete Video
    $scope.deleteVideo = function(videoId){

        if(confirm('Are you sure ?')){

             $http.post($rootScope.STATIC_URL + 'users/deleteVideo', { videoId: videoId }).success(function (response) {
                        if (response.status === 1) {

                            //$scope.message = response.message;
                         //   $scope.errorMessage = response.message;
                            //$rootScope.addAlert(response);

                             $window.location.reload();

                            //$scope.message = response.message;


                        } else {
                            $scope.errorMessage = response.message;
                        }

                    }).error(function (err) {
                        console.log("ERROR" + err);

                    });

        }
    };

$http.post($rootScope.STATIC_URL + 'users/checkLimit', {userId: userId }).success(function (response) {

    console.log("Test");
    console.log(response.data.data);
    $scope.limit = response.data;
    $scope.videoCount=response.data.data;


}).error(function () {
    $scope.errorMessage = "Please Try Again";
});


});
/*          OTHER Users videos   */
userControllers.controller('otherVideosCtrl', function ($scope, $routeParams, $rootScope, $window, $http) {
    var userId = $routeParams.id;

    $http.post($rootScope.STATIC_URL + 'users/getVideosByUserId', {userId: userId }).success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            console.log("All Videos");
            console.log(response.data);
            $scope.videos = response.data;
        }
    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });


$http.post($rootScope.STATIC_URL + 'users/getOtherUserDetails', {objectUserId:$routeParams.id}).success(function (response) {
    console.log("--------------------------->");
    if (response.status === 1) {
        $scope.profile           = response.data[0];
        console.log($scope.profile);
       // alert($scope.profile.profilePic);
        if($scope.profile.profilePic)
        {

            $rootScope.otherProfilePic = Config.STATIC_URL+'/images/profilePics/'+$scope.profile.username+'/thumb/'+$scope.profile.profilePic;
            $rootScope.otherProfilePicExist=1;
             //$rootScope.otherProfilePicNoThumb = Config.STATIC_URL+'images/profilePics/'+$scope.profile.username+'/'+$scope.profile.profilePic;

        }
        else
        {
            $rootScope.otherProfilePic = Config.STATIC_URL+'/images/profilePics/default/default.png';


            $rootScope.otherProfilePicExist=0;
        }
    }
});

//*****function to check review post is possible or not
$http.post($rootScope.STATIC_URL + 'users/postReviewOrNot', {reviewedOnId:$routeParams.id}).success(function (response) {
    console.log("checkkkkkkk");
    console.log(response.status);
    if(response.status==4){
        $scope.postNot=true;
    }
    else{
       $scope.postYes=true;
   }
}).error(function (err) {
    console.log("ERROR" + err);
});
//to get the video count
$http.post($rootScope.STATIC_URL + 'users/checkLimit', {userId: userId }).success(function (response) {

    console.log("Test");
    console.log(response.data.data);
    $scope.limit = response.data;
    $scope.videoCount=response.data.data;


}).error(function () {
    $scope.errorMessage = "Please Try Again";
});

//*** upto this


});

/*===================================================================================================================================
 mailboxMailsCtrl
 ====================================================================================================================================*/
//entryId = Id of Mail table
//'mailboxMailsCtrl' start
userControllers.controller('mailboxMailsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $compile, $timeout, $interval) {

    /* ================  Count of Unread Inbox Messages ON an interval of time =========*/
	//Count of Unread Inbox Messages
	function getUnreadInboxCount() {
			$http.post($rootScope.STATIC_URL + 'mail/getUnreadInboxCount').success(function (response) {
				if (response.status == 1)
				{
					$rootScope.unreadInboxMailCount         = response.data;
					//$scope.unreadInboxMailCount             = response.data;

				}

			}).error(function (err) {
				console.log(err);
				/*$scope.errorMessage = "Please Try Again";
				$timeout(function () {
					$scope.errorMessage = false;
				}, 3000);*/
			});
	}

	$interval(getUnreadInboxCount, 7000);
    /* ================  Count of Unread Inbox Messages ON an interval of time =========*/


    $scope.STATIC_ANGULAR_URL                   = $rootScope.STATIC_ANGULAR_URL;
    $scope.STATIC_SAILS_URL                     = $rootScope.STATIC_SAILS_URL;
    $rootScope.adminNavigation                  = 1;
    $scope.currentPage                          = 0;
    $scope.pageSize                             = 15;
    $scope.errorMessage                         = "";
    //var boxArray                              = $location.path().split("/");
    var boxArray                                = $location.path().split("mailbox")[1].split("/");
    var box                                     = boxArray[1];
    var loggedUser                              = $.parseJSON('[' + $rootScope.user + ']');
    loggedUser                                  = loggedUser[0];
    var request                                 = "";
    var folderName                              = $routeParams.folderName;
    // var loggedUser                       = $.parseJSON('[' + $rootScope.user + ']');
    $scope.mailDetailParam                      = $routeParams.mailId;
    $scope.errorMessageComposeMail              = "";
    $scope.successMessageComposeMail            = "";
    $scope.successMessageCommonMail             = "";
    $scope.errorMessageValidUser                = "";
    $scope.errorMessageMailbox                  = "";
    $scope.composeImgLoader                     = false;
    $scope.updateClickDisable                   = false;
    //$scope.keyStatus                            = true;



    if (boxArray[1] == "folder") {//for listing mails in folder
        folderName = folderName.split("_").join(" ");
        request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
    }
    else {
        request = {box: box, mailId: $routeParams.mailId, cnvrUserId: $routeParams.cnvrUserId};
    }


    //List the User created Folders
    $http.post($rootScope.STATIC_URL + 'mail/getUserFolders').success(function (response) {
        if (response.status == 1)
        {
            console.log(response);
            $scope.listUCFolders = response.data;
        }

    }).error(function (err) {
        console.log(err);
        /*$scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);*/
    });


    // Reply Photokey

    $scope.sendPhotoKeyReply = function(compRecId ,composeTo){
    	//console.log('composeTo '+composeTo);
    	//console.log("compRecId------"+compRecId);
    	$rootScope.showloader = true;
	                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: compRecId } );

	                promise.then(

	                    function(response) {

	                        $rootScope.showloader = false;

	                        $scope.modalSubmit = false;

	                        if(response && response.data && response.data.status === 1 ){

	                            $scope.photoKey = response.data.data.key;

	                            $scope.error = false;

	                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


	                            var appendText = '';
	                        //console.log(response);
	                        if(response.data.data.callbackVar !== ''){
	                            var appendText = 'to ' + response.data.data.callbackVar;
	                        }
	                        $rootScope.alert={ status: true, message: 'The Photo Key has been sent ' + appendText };


	                        $rootScope.showloader = false;


	                    }else{

	                        $scope.error = response.data.message;
	                        $rootScope.showloader = false;
	                    }
	                },
	                function(errorresponse) {

	                    $log.error('failure loading data', errorresponse);
	                });
    	
    };
  // Reply Attach

  $scope.replyAttach = function (event) {
                //var i = 0;
                console.log("replyAttach ---- >");
                console.log(event.files);
                console.log(event.target.files);
                console.log("tmppath >>>>>>>");
                console.log(tmppath);

                var replyFiles = [];
                var replyFileArray =[];
       // $scope.replyFileFinalArray =[];

       var attachReplyElement = angular.element(document.querySelector('#appendReplyAttachFile'));

       for (var i = 0; i < event.target.files.length; i++) {

        var tmppath = URL.createObjectURL(event.target.files[i]);
                             // var file = event.files[i];
                             if(!$scope.replyFileFinalArray){
                                replyFileArray.push(event.target.files[i]);
                                $scope.replyFileFinalArray = replyFileArray;
                                /* var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img style="width:100px;height:100px;" class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1">' +
                                                                        '<button id="deleteReplyAttach" class="btn btn-primary" ng-click="removeReply('+$scope.replyFileFinalArray.length+')">' +
                                                                            '<i class="fa fa-trash"></i>' +
                                                                        '</button>' +
                                                                '</div>' +
                                                                '</div>';*/
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            else{
                                                                replyFileArray = $scope.replyFileFinalArray;
                                                                replyFileArray.push(event.target.files[i]);
                                                                $scope.replyFileFinalArray = replyFileArray;
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            console.log("$scope.replyFileArray1 Multiple=======");
                                                            console.log($scope.replyFileFinalArray);

                                                        }

                                                        console.log("........Last and Final $scope.ecount...........");
                                                        console.log($scope.ecount);

            //}//For Multiple Files

   }//Main Function ENDS

   $scope.removeReply = function(item) {


    console.log("Clicked Remove item =======================------------");
    var selectItem = $scope.replyFileFinalArray[item-1];
    $scope.replyFileFinalArray.splice(item-1, 1);
    console.log($scope.replyFileFinalArray);
}

//
 /*$scope.searchUsername = function (event) {
     console.log("hello 11");
                var request = {userRole: userRole, nameOfUser: $scope.composeTo};
                console.log(request);
                $http.post($rootScope.STATIC_URL + 'users/searchUsername', {token: token, request: request}).success(function (response) {
                    console.log(response);
                    console.log("hello  33"+response.data);
                    if (response.status == 1 && response.data.length !== 0 )
                    {
                        console.log("hello  22");
                        console.log(response);
                        console.log(response.data[0].username);
                        console.log("hello  22");
                        //$scope.validUsername = response.data;
                    }else{
                        $scope.validUsername = "";
                    }
                    //console.log(response);

                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });

            }*/




    /*$scope.draftMailFocus = function () {
            $scope.updateClickDisable = true;
    }*/
    $scope.getUserDetails = function(){
       console.log("getUserDetails+________++++++++++---------"); 
       $http.post($rootScope.STATIC_URL + 'users/getUserDetails').success(function (response) {

		console.log("getUserDetails+________++++++++++---------" +JSON.stringify(response)); 
                $scope.getUserRecords = response.data[0];
            }).error(function (err) {
                console.log("ERROR" + err);
            });
    };
    $scope.getUserDetails();
    $scope.sendPhotoKeyMerge = function(entryId,composeTo,sendPhotoKeyModel,event){
     	
     	//$scope.photoKeySenderId = -1 ;
        $scope.keyStatus = true;
     	console.log('1-------- ');
     	console.log('sendPhotoKeyModel '+sendPhotoKeyModel);
     	if(sendPhotoKeyModel === true){
	     		angular.forEach($scope.mailSearchUsers, function(value, key) {
	     		if(value.username === composeTo){
	     			//$rootScope.showloader = true;
		                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKeyMerge', { objectUserId: value.id } );

		                promise.then(

		                    function(response) {

		                        //$rootScope.showloader = false;
                                        //$scope.keyStatus = false;
		                        $scope.modalSubmit = false;

		                        if(response && response.data && response.data.status === 1 ){

		                            $scope.photoKey = response.data.data.composeMessage;
                                            //$scope.photoKeyTemplate = "Photo Key : <span style=\"color:#ff0000\">"+response.data.data.photokey+"</span>";
                                            $scope.photoKeyTemplate = response.data.data.photokey;
                                            $scope.keyStatus = false;
                                            $scope.sendPhotoKeyModel = false ;
                                            $scope.draftMail(event);
                                            console.log('photoKey '+JSON.stringify($scope.photoKey));

		                    }else{

		                        $scope.error = response.data.message;
		                        //$rootScope.showloader = false;
		                    }
		                },
		                function(errorresponse) {

		                    $log.error('failure loading data', errorresponse);
		                }
		                );
	     		}
	     	});
     	}else{
            $scope.photoKeyTemplate = '';                               
            $scope.sendPhotoKeyModel = false ;
        }
     	
     };
 $rootScope.yellowdiv = true ;
$(document.body).on('click','#appendNameOfUser', function(){
   
    $('.composeSearchAppendOuter').hide();
   
});

$scope.newMessageClick = function () {

        $scope.composeTo = "";
        $scope.composeSubject = "";
        $scope.composeMessage = "";
        $rootScope.entryId = "undefined";
        $scope.mailAttachments = "";

        $scope.photoKeyTemplate = '';                               
        $scope.sendPhotoKeyModel = false ;

};


//Onchange /Onkeydown ComposeMail
$scope.draftMail = function (event) {

       $rootScope.disableButton = true;
        console.log("Welcome to draftMail");
        //alert($scope.composeSubject);
        console.log($scope.composeSubject);
        console.log($scope.composeMessage);
        $scope.composeImgLoader = false;
        $scope.updateClickDisable = false;


        //console.log(" $scope.compRecId ");
        //console.log($scope.compRecId);
       // console.log(composeMessage);
       // var composeSubjectPass = $scope.composeSubject;
       // var composeMessagePass = $scope.composeMessage;
       // var eventPass          = event;
       // sendDraftMailFunction(composeSubjectPass, composeMessagePass, eventPass);

        request = {nameOfUser: $scope.composeTo};
                $http.post($rootScope.STATIC_URL + 'users/searchUsername', {request: request}).success(function (response) {

                    if (response.status == 1 && response.data.length !=0 )
                    {
                      console.log("the username =====");
                      console.log(response);
                                          if (typeof $scope.compRecId == "undefined") {
                                            console.log("ffffffffffffffffffff");
                                            //$scope.errorMessageComposeMail = "Please select a valid User";
                                            $scope.errorMessageValidUser = "Please select a valid User";
                                            console.log($scope.compRecId);
                                            console.log($scope.errorMessageComposeMail);

                                            }
                                            else {
                                                console.log("else eeeeeeeee");
                                                console.log("photoKey ---->"+$scope.photoKey);
                                                var fd = new FormData();
                                                var composeTo = $scope.composeTo;
                                                var composeSubject = $scope.composeSubject;
                                                var composeMessage = $scope.composeMessage +"<br><br>"+$scope.photoKey;
                                                if(typeof $scope.photoKey === 'undefined'){
                                                   composeMessage = $scope.composeMessage ;  
                                                }
                                                var receiverId = $scope.compRecId;
                                                console.log($scope.composeTo);
                                                console.log("-----------composeSubject-----------");
                                                console.log(composeSubject);
                                                console.log(composeMessage);
                                                console.log($scope);




                                                    var replyMailStatus;// To save reply as sent
                                                    var entryId = $rootScope.entryId;
                                                    var files = [];

                                                    if (event.files) {// Selected Images in Draft Part
                                                         //$scope.hello = "hellooooooooo";
                                                        for (var i = 0; i < event.files.length; i++) {
                                                            //console.log(event.files[i]);
                                                            var fileType    = event.files[i].type;
                                                            fileType        = fileType.split("/");
                                                            //console.log(fileType);
                                                            if(fileType[0] === "image"){
                                                               files.push(event.files[i]);
                                                           }else{
                                                            $scope.errorMessageComposeMail = "Please select an Image file";
                                                            $timeout(function () {
                                                                $scope.errorMessageComposeMail = false;
                                                            }, 3000);
                                                                //return false;
                                                            }

                                                        }

                                                    }
                                                    else if($scope.replyFileFinalArray){ // Selected Images in Reply Part
                                                      console.log("Entered $scope.replyFileFinalArray ==========))))))))) ");
                                                      for (var i = 0; i < $scope.replyFileFinalArray.length; i++) {

                                                        var fileType    = $scope.replyFileFinalArray[i].type;
                                                        fileType        = fileType.split("/");
                                                        console.log(fileType);
                                                        if(fileType[0] === "image"){
                                                           files.push($scope.replyFileFinalArray[i]);
                                                       }else{
                                                        $scope.errorMessageComposeMail = "Please select an Image file";
                                                        $timeout(function () {
                                                            $scope.errorMessageComposeMail = false;
                                                        }, 3000);
                                                        return false;
                                                            }


                                                        }
                                                        console.log("files Reply Attach");
                                                        console.log(files);
                                                    }
                                            if (box == 'inbox' && $routeParams.mailId) {
                                                replyMailStatus = "sent";
                                            }

                                                    //console.log("files >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                                                    //console.log(files);
                                                    fd.append('composeTo', composeTo);
                                                    fd.append('composeSubject', composeSubject);
                                                    fd.append('composeMessage', composeMessage);
                                                    fd.append('receiverId', receiverId);
                                                    fd.append('replyMailStatus', replyMailStatus);
                                                    fd.append('entryId', entryId);
                                                    if (files) {
                                                        for (var i = 0; i < files.length; i++) {
                                                            fd.append('attachments', files[i]);
                                                        }
                                                    }
                                                    if(files.length > 0){
                                                        $scope.composeImgLoader = true;
                                                    }
                                                  console.log("------------fd------------composeSubject==========");
                                                console.log(composeSubject);

                                                    //console.log("composeTo ========>"+composeTo);
                                                    //console.log("composeSubject ========>"+composeSubject);
                                                    //console.log("composeMessage ========>"+composeMessage);
                                                    //console.log("receiverId ========>"+receiverId);
                                                    //console.log("replyMailStatus ========>"+replyMailStatus);
                                                    //console.log("entryId ========>"+entryId);

                                            //console.log("fd-------------");
                                            //console.log(fd);
                                            $http.post($rootScope.STATIC_URL + 'mail/saveMail', fd, {
                                                transformRequest: angular.identity,
                                                headers: {'Content-Type': undefined}

                                            }).success(function (response) {
                                                console.log(response);
                                                if (response.status == 1)
                                                {
                                                    $rootScope.disableButton = false;

                                                    if (response.data.id) {
                                                        $rootScope.entryId = response.data.id;
                                                    } else {
                                                        console.log("I think Update");
                                                        console.log(response.data[0].id);
                                                        $rootScope.entryId = response.data[0].id;
                                                    }

                                                    console.log($rootScope.entryId);

                                                    request = {mailId: $rootScope.entryId};

                                                            if(!$routeParams.mailId){//display the attached images on compose mail part only
                                                                    //$scope.hello = "Mr pererea";
                                                                    //Get attachments to front end
                                                                    $http.post($rootScope.STATIC_URL + 'mail/getMailAttachments', {request: request}).success(function (response) {
                                                                        if (response.status == 1)
                                                                        {
                                                                            $timeout(function () {
                                                                                    $scope.composeImgLoader = false;
                                                                            }, 100);
                                                                            $scope.mailAttachments = response.data;
                                                                        }

                                                                    }).error(function (err) {
                                                                        console.log(err);

                                                                    });
                                                             }

                                                            if (box == 'inbox' && $routeParams.mailId) {
                                                                $scope.composeMessage = "";
                                                                //$window.location.reload();
                                                                $('.xax').hide();
                                                                $('#reply').show();
                                                                //$scope.mailAttachments = "";
                                                                 //console.log(angular.element( document.querySelector( '#replyComposeMessage' )));
                                                                 //angular.element( document.querySelector( '#replyComposeMessage' ) ).val(" ");
                                                                 //console.log(angular.element( document.querySelector( '#replyComposeMessage' )));
                                                                 //console.log($('.replyinner.replyTo').val());
                                                                 console.log("event ===");
                                                                  console.log(event);
                                                                  console.log(event.replyFileFinalArray);
                                                                $('#appendReplyAttachFile .replyAttachOuter').remove();
                                                                //$scope.successMessageComposeMail = "Your message has been sent";
                                                                $scope.successMessageCommonMail = "Your message has been sent";

                                                                $timeout(function () {
                                                                   // $scope.successMessageComposeMail = false;
                                                                   $window.location.href = $rootScope.hashbang + "mailbox/inbox";
                                                                   $scope.successMessageCommonMail = false;

                                                                }, 3000);

                                                                if(event.replyFileFinalArray){//Only For Reply Mail Success
                                                                        console.log($scope.replyFileFinalArray);
                                                                        $scope.replyFileFinalArray = "";
                                                                }



                                                            }


                                                        }
                                                    })
                                            .error(function (err) {
                                               console.log(err);

                                            });



                                        }

                                    }else{
                                        //$scope.errorMessageComposeMail = "Please select a valid User";
                                        $scope.errorMessageValidUser     = "Please select a valid User";
                                        console.log($scope.errorMessageComposeMail);
                                        $timeout(function () {
                                            $scope.errorMessageComposeMail = false;
                                            $scope.errorMessageValidUser = false;
                                        }, 3000);
                                    }

                                }).error(function (err) {
                                    console.log(err);

                                });

  } //Draft Mail Ends

  //To remove Attached file
    $scope.removeAttachment = function (attachmentId, attachmentName) {

        request = {attachmentId: attachmentId, attachmentName: attachmentName};
        console.log(request);
        //Remove Attachment
        $http.post($rootScope.STATIC_URL + 'mail/removeMailAttachment', {request: request}).success(function (response) {
            if (response.status == 1)
            {

                request = {mailId: $rootScope.entryId};

                //Get attachments to front end
                $http.post($rootScope.STATIC_URL + 'mail/getMailAttachments', {request: request}).success(function (response) {
                    if (response.status == 1)
                    {
                          $scope.mailAttachments = response.data;
                    }

                }).error(function (err) {
                    console.log(err);
                    /*$scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);*/
                });
            }

        }).error(function (err) {
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
            console.log(err);
        });
    }

    /*Start code to pagination*/
//    $scope.mailTotal = '';
//    $scope.mailFilteredTodos = [];
//    $scope.mailCurrentPage = 1;
//    $scope.mailNumPerPage = 10;
//    $scope.mailMaxSize = 5;

    /*End code to pagination*/

function listAllMailboxMails(item){

//console.log("box  listAllMailboxMails  -------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
console.log(box);
/*if(box = "conversationlist"){
   console.log("request  listAllMailboxMails  -------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
   console.log(request);
   request.cnvrUserId = $routeParams.cnvrUserId;
}*/
if(item)
{
    request["currentpage"]=item;
    //alert(item);
}
/*if(sessionStorage["pager"])
{
    request["currentpage"]=sessionStorage["pager"];

} */

$rootScope.showloader=true;
                //List MailBox Mails
                $http.post($rootScope.STATIC_URL + 'mail/mailbox', {request: request}).success(function (response) {
                    if (response.status == 1)
                    {
                        $rootScope.showloader=false;
                        //console.log("box >>>>>>>>>>>>>>>>>");
                        //console.log(box);
                        if (response.data.length == 0) {
                            var switchKey = box;
                            switch(switchKey){

                                    case "inbox":
                                            $scope.errorMessageMailbox = "Your Inbox is empty!";

                                    break;

                                    case "sent":
                                            $scope.errorMessageMailbox = "Your Sent mail is empty!";

                                    break;

                                    case "draft":
                                            $scope.errorMessageMailbox = "Your Draft is empty!";

                                    break;

                                    case "trash":
                                            $scope.errorMessageMailbox = "Your Trash is empty!";

                                    break;

                                    case "conversations":
                                            $scope.errorMessageMailbox = "There are no conversations!";

                                    break;

                                    case "folder":
                                            folderName = folderName.split("_").join(" ");
                                            $scope.errorMessageMailbox = "Your "+switchKey+" "+folderName+" is empty!";

                                    break;
                                    //$scope.errorMessage = "No messages Found";
                            }
                        }
                        //console.log(new Date());
                        //console.log(new Date().toUTCString());


                        $scope.mailboxMails = response.data;

                        $scope.mailTotal = response.total;
                        //$scope.mailCurrentPage=sessionStorage["pager"];
                        /*new development*/
                        if(box === 'conversations'){
                            var receiverIdArray = [];
                            angular.forEach($scope.mailboxMails, function(mail) {
                                var receiverIdObj = {};
                                receiverIdObj.senderId =  mail.senderId;
                                receiverIdObj.receiverId =  mail.receiverId;
                                receiverIdObj.conversationId =  mail.conversationId;
                                receiverIdArray.push(receiverIdObj);
                            });
                            /*get conversation count*/
                            $http.post($rootScope.STATIC_URL + 'mail/countconversation', {receiverIdArray: receiverIdArray}).success(function (conResponse) {
                                 if (response.status === 1){
                                     //console.log('mailboxMails--->>>'+JSON.stringify($scope.mailboxMails)) ;
                                     //console.log('mailboxMails--->>>'+JSON.stringify(conResponse.data)) ;
                                     angular.forEach($scope.mailboxMails, function(mail) {
                                       angular.forEach(conResponse.data, function(conversation) {
                                           if(conversation.conversationId===mail.conversationId){
                                              mail.cnvrCount =  conversation.mail_id_count;
                                           }
                                       });
                                     });
                                   }
                            });

                        }

                        $scope.box = box;
                        if(isMobile())
                        {
                            /*
                            if($scope.box=='sent'){
                                $scope.boxType='Sent Mails';
                            }
                            else if($scope.box=='inbox'){
                                 $scope.boxType='Inbox';
                            }
                            else if($scope.box=='draft'){
                                 $scope.boxType='Drafts';
                            }
                            else if($scope.box=='conversations'){
                                 $scope.boxType='Conversations';
                            }
                            else if($scope.box=='trash'){
                                 $scope.boxType='Trash';
                            }*/
                                    var switchKey = $scope.box;
                                    switch(switchKey){
                                                case "sent":
                                                        $scope.boxType='Sent Mails';
                                                break;

                                                case "inbox":
                                                        $scope.boxType='Inbox';
                                                break;

                                                case "draft":
                                                        $scope.boxType='Drafts';
                                                break;

                                                case "conversations":
                                                        $scope.boxType='Conversations';
                                                break;

                                                case "trash":
                                                        $scope.boxType='Trash';
                                                break;

                                                case "folder":
                                                        folderName = folderName.split("_").join(" ");
                                                        $scope.boxType='Folder - '+folderName;
                                                break;
                                    }
                        }
                        if (folderName) {
                            folderName = folderName.split("_").join(" ");
                            $scope.boxFolder = folderName;
                            //$scope.folderId       = $routeParams.folderId;
                        }

                    }

                }).error(function (err) {
                    console.log(err);
                    /*$scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);*/
                });


}
$scope.getMailData=function(item){
    //alert(item);
    listAllMailboxMails(item);
}
/*$scope.getMailData=function(item)
			{
				console.log("item ----- >>>"+item);
			if(box === 'conversations'){

					sessionStorage["pager"]=item;

			}

    listAllMailboxMails(item);
}*/

/* For All Mails (           route Params not defined =====================>>>>>>>>>>>>>>          ) Starts*/

    if (typeof $routeParams.mailId == "undefined") {//For all mails

       console.log("request ----- for single mail");
       console.log(request);

         //List MailBox Mails
         listAllMailboxMails();



                /*if(box == "inbox"){
                        console.log(box);
                        console.log("box --------------------");

                       function getReadUnreadInboxMsg() {
                               //List MailBox Mails
                                $http.post($rootScope.STATIC_URL + 'mail/mailbox', {request: request}).success(function (response) {
                                    if (response.status == 1)
                                    {
                                        $scope.mailboxMails = response.data;
                                        if($scope.mailboxMails.length != 0){
                                                $scope.errorMessageMailbox = false;

                                        }
                                    }

                                }).error(function (err) {
                                        console.log(err);
                                });
                       }
                       //$interval(getReadUnreadInboxMsg, 10000);

                       // store the interval promise in this variable
                            var promise;

                            // simulated items array
                            $scope.items = [];

                            // starts the interval
                            $scope.start = function() {
                              // stops any running interval to avoid two intervals running at the same time
                              $scope.stop();

                              // store the interval promise
                              promise = $interval(getReadUnreadInboxMsg, 1000);
                            };

                            // stops the interval
                            $scope.stop = function() {
                              $interval.cancel(promise);
                            };

                            // starting the interval by default
                            $scope.start();




                }else{

                    //$interval.cancel(getReadUnreadInboxMsg);
                    // stops the interval when the scope is destroyed,
                            // this usually happens when a route is changed and
                            // the ItemsController $scope gets destroyed. The
                            // destruction of the ItemsController scope does not
                            // guarantee the stopping of any intervals, you must
                            // be responsible of stopping it when the scope is
                            // is destroyed.
                            $scope.$on('$destroy', function() {
                              $scope.stop();
                            });

                }*/


        //Get Checked Mails
        $scope.selectedMail = function () {
            $scope.checkedMail = $filter('filter')($scope.mailboxMails, {checked: true});
            console.log("$scope.checkedMail>>>>>");
            console.log($scope.checkedMail);
        }

        /* ================  List MailBox InboxMails ON an interval of time =========*/
           /* console.log("box -----------------------<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(box);
                if(box = "inbox"){
                    $interval(mailboxInboxMails, 10000);
                    function mailboxInboxMails() {
                            console.log("Interval occurred   ====");
                                request = {box: "inbox"};
                                $http.post($rootScope.STATIC_URL + 'mail/mailbox', {request: request}).success(function (response) {
                                    if (response.status == 1)
                                    {
                                         console.log("mailboxInboxMails ++++++++++++++++++++++++++++++++");
                                         $scope.mailboxMails = response.data;
                                    }
                                }).error(function () {

                                    $scope.errorMessage = "Please Try Again";
                                    $timeout(function () {
                                        $scope.errorMessage = false;
                                    }, 3000);
                                });
                    }
                }*/
        /* ================  List MailBox InboxMails ON an interval of time =========*/

        //select All Mail in the page
        $scope.selectAllMail = function (pageSize) {
            console.log("selectAllMail ===>> ");
            console.log(pageSize);
            console.log($scope.selectedAll);
            //console.log(selectedAll);
            var keepGoing = true;
            var count = 0;
            var selectedAllArray = [];

                    if (!$scope.selectedAll) {//Select All
                        $scope.selectedAll = true;
                        angular.forEach($scope.mailboxMails, function (item) {
                             count++;
                             if(keepGoing) {
                                if(count == pageSize){
                                 keepGoing = false;
                                }
                                 item['checked'] = true;
                                 selectedAllArray.push(item);
                            }
                        });

                        $scope.checkedMail = selectedAllArray;
                    } else {//UnSelect All
                        $scope.selectedAll = false;
                        angular.forEach($scope.mailboxMails, function (item) {
                             count++;
                             if(keepGoing) {
                                if(count == pageSize){
                                 keepGoing = false;
                                }
                                item['checked'] = false;
                            }
                        });
                        $scope.checkedMail = undefined;
                    }

                  console.log($scope.selectedAll);


        }

     //Close Sent Mail Limit
     $scope.successMessageCommonMailLimitClose = function () {
          $scope.successMessageCommonMailLimit = false;

     }

     /*$scope.sendKey = function(userId){
				console.log("userId ---"+userId);
					if(userId){

	                $rootScope.showloader = true;
	                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: userId } );

	                promise.then(

	                    function(response) {

	                        $rootScope.showloader = false;

	                        $scope.modalSubmit = false;

	                        if(response && response.data && response.data.status === 1 ){

	                            $scope.photoKey = response.data.data.key;

	                            $scope.error = false;

	                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


	                            var appendText = '';
	                        //console.log(response);
	                        if(response.data.data.callbackVar !== ''){
	                            var appendText = 'to ' + response.data.data.callbackVar;
	                        }
	                        $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent ' + appendText });

	                        $rootScope.showloader = false;


	                    }else{

	                        $scope.error = response.data.message;
	                        $rootScope.showloader = false;
	                    }
	                },
	                function(errorresponse) {

	                    $log.error('failure loading data', errorresponse);
	                }
	                );
	            }else{
	                $rootScope.addAlert({ status: false, message: 'Invalid Link' });
	                $rootScope.showloader = false;
	            }
			};*/
     /*$scope.sendPhotoKey = function(entryId,composeTo,sendPhotoKeyModel){
     	
     	//$scope.photoKeySenderId = -1 ;
     	console.log('1-------- ');
     	console.log('sendPhotoKeyModel '+sendPhotoKeyModel);
     	if(sendPhotoKeyModel === true){
	     		angular.forEach($scope.mailSearchUsers, function(value, key) {
	     		if(value.username === composeTo){
	     			$rootScope.showloader = true;
		                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: value.id } );

		                promise.then(

		                    function(response) {

		                        $rootScope.showloader = false;

		                        $scope.modalSubmit = false;

		                        if(response && response.data && response.data.status === 1 ){

		                            $scope.photoKey = response.data.data.key;

		                            $scope.error = false;

		                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


		                            var appendText = '';
		                        //console.log(response);
		                        if(response.data.data.callbackVar !== ''){
		                            var appendText = 'to ' + response.data.data.callbackVar;
		                        }
		                        $rootScope.alert={ status: true, message: 'The Photo Key has been sent ' + appendText };
		                       
		                        $rootScope.showloader = false;



		                    }else{

		                        $scope.error = response.data.message;
		                        $rootScope.showloader = false;
		                    }
		                },
		                function(errorresponse) {

		                    $log.error('failure loading data', errorresponse);
		                }
		                );
	     		}
	     	});
     	}
     	
     }*/
    
    
        //Update Mail Status
        $scope.updateMailStatus = function ($event) {
            console.log("Update Mail Status------1");
            console.log('photoKey-- '+JSON.stringify($scope.photoKey));
            //to photo key start
                //$scope.mailSearchUsers = response.data;
                console.log("user------"+JSON.stringify($scope.mailSearchUsers));
            //to photo key end
            console.log($scope.checkedMail);
            $scope.updateClickDisable = true;
            var chkMailArray = $scope.checkedMail;
            var mailStatus   = $event.currentTarget.id;
            var switchKey     = mailStatus;


                                    //to split folderId when moved to folder
                                    var splitMailStatus = mailStatus.split('_');
                                    mailStatus = splitMailStatus[0];
                                    var folderId = splitMailStatus[1];
                                    switch(switchKey)
                                    {
                                        case "sent" :




                                          console.log("typeof $scope.compRecId ");
                                          console.log(typeof $scope.compRecId);
                                                           if (typeof $scope.compRecId == "undefined") {
                                                                    alert("Please select a valid User");
                                                                    $scope.updateClickDisable                   = false;
                                                                    return false;
                                                           }else if(!$scope.composeSubject && !$scope.composeMessage){
                                                                    //console.log("mmmmmmmmmmmm");
                                                                    alert("Please enter any field and then send");
                                                                    //$scope.ErrorMessageAnyCommonMail = "Please enter any field and then send";
                                                                    $scope.updateClickDisable                   = false;
                                                                    return false;
                                                           }
                                                           else{

                                                        $timeout(function () {
                                                               $http.post($rootScope.STATIC_URL + 'mail/distinctUserMailLimit').success(function (response) {
                                                                         if (response.status == 1 && response.message == "failure")
                                                                          {
                                                                               $( "#chat_window_common" ).hide();
                                                                               $scope.closeComposeMailTab();
                                                                               console.log("Limmmmmmmmmmmmmmmmmmmmmmmmmmmitttttttttttttttttttt");
                                                                               $scope.successMessageCommonMailLimit = "Mail Limit Exceeded ";

                                                                          }else{


                                                                        //alert("You can only select a CITY as a Home or Travel location, not a state or country");

                                                                        //var returnCheck;
                                                                        request = {nameOfUser: $scope.composeTo};
                                                                        $http.post($rootScope.STATIC_URL + 'users/searchUsername', {request: request}).success(function (response) {
                                                                            if (response.status == 1 && response.data.length !=0 )
                                                                            {
                                                                                        /*if (typeof $scope.compRecId == "undefined") {//Checking the receiver is a valid user
                                                                                            console.log("undefined ===");
                                                                                            //$scope.errorMessageComposeMail = "Please select a valid User";
                                                                                            $scope.errorMessageValidUser = "Please select a valid User";
                                                                                            return false;
                                                                                            $timeout(function () {
                                                                                                $scope.errorMessageComposeMail = false;
                                                                                                $scope.errorMessageValidUser = false;

                                                                                            }, 3000);


                                                                                        }else{*/
                                                                                        $( "#chat_window_common" ).hide();
                                                                                        $scope.successMessageCommonMail = "Sending...";

console.log("$rootScope.entryId ----------------------))))))))))))))))))))))))((((((((((((((((((((())))))))))))))))))))))))))))))))))))))(");
console.log($rootScope.entryId);
//alert($rootScope.entryId);
                                                                                            request = {mailStatus: mailStatus, receiverId: parseInt($scope.compRecId), entryId: $rootScope.entryId, senderName: loggedUser.username};
                                                                                            //console.log("request --->"+JSON.stringify(request));
                                    
                                                                                            $http.post($rootScope.STATIC_URL + 'mail/updateMailStatus', {request: request}).success(function (response) {
                                                                                                console.log("response >>>>>>>>");
                                                                                                console.log(response);
                                                                                                if (response.status == 1)
                                                                                                {
                                                                                                    console.log(response);

                                                                                                   // $scope.successMessageComposeMail = "Your message has been sent";
                                                                                                   $scope.successMessageCommonMail = "Your message has been sent";

                                                                                                            $scope.composeTo = "";
                                                                                                            $scope.composeSubject = "";
                                                                                                            $scope.composeMessage = "";
                                                                                                            $rootScope.entryId = "undefined";
                                                                                                            $scope.mailAttachments = "";
                                                                                                            $scope.errorMessageMailbox = false;
                                                                                                            $timeout(function () {
                                                                                                               // $scope.successMessageComposeMail = false;
                                                                                                                $scope.successMessageCommonMail = false;
                                                                                                                $("#chat_window_common").hide();
                                                                                                                $scope.updateClickDisable                   = false;

                                                                                                            }, 2000);


                                                                                                            if (boxArray[1] == "folder") {
                                                                                                                folderName = folderName.split("_").join(" ");
                                                                                                                request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                                                            }
                                                                                                            else {
                                                                                                                request = {box: box, mailId: $routeParams.mailId};
                                                                                                            }
                                                                                                        //List MailBox Mails
                                                                                                        //listAllMailboxMails();
                                                                                                        var switchKey  = box;
                                                                                                            switch(switchKey){
                                                                                                                  case "conversations"  :
                                                                                                                        console.log("request  conversations  -------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                                                                                                                        console.log(request);
                                                                                                                        //List MailBox Mails
                                                                                                                        $http.post($rootScope.STATIC_URL + 'mail/mailbox', {request: request}).success(function (response) {
                                                                                                                            if (response.status == 1)
                                                                                                                            {

                                                                                                                                 $scope.mailboxMails = response.data;
                                                                                                                            }
                                                                                                                        });

                                                                                                                  break;

                                                                                                                  case "conversationlist"  :

                                                                                                                                  console.log("request  listAllMailboxMails  -------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                                                                                                                                   console.log(request);
                                                                                                                                   request.cnvrUserId = $routeParams.cnvrUserId;
                                                                                                                                    $scope.box = box;
                                                                                                                                    //List MailBox Mails
                                                                                                                                    $http.post($rootScope.STATIC_URL + 'mail/mailbox', {request: request}).success(function (response) {
                                                                                                                                        if (response.status == 1)
                                                                                                                                        {

                                                                                                                                             $scope.mailboxMails = response.data;
                                                                                                                                        }
                                                                                                                                    });

                                                                                                                  break;


                                                                                                                  default:

                                                                                                                                listAllMailboxMails();
                                                                                                                  break;
                                                                                                            }





                                                                                                }
                                                                                                else{
                                                                                                    //$scope.errorMessage = response.message;
                                                                                                    //$scope.errorMessageMailbox = response.message;
                                                                                                    $scope.successMessageCommonMail = "";
                                                                                                    $timeout(function () {
                                                                                                        $scope.errorMessageMailbox = false;
                                                                                                    }, 1000);
                                                                                                    $scope.updateClickDisable                   = false;
                                                                                                }
                                                                                            }).error(function (err) {
                                                                                                 console.log(err);

                                                                                            });





                                                                                            //}
                                                                                        }else{
                                                                                            //$scope.errorMessageComposeMail = "Please select a valid User";
                                                                                            $scope.updateClickDisable                   = false;
                                                                                            //alert("44444444444");
                                                                                            //$scope.errorMessageValidUser = "Please select a valid User";
                                                                                            alert("Please select a valid User");

                                                                                            $timeout(function () {
                                                                                                $scope.errorMessageComposeMail = false;
                                                                                                //$scope.errorMessageValidUser = false;

                                                                                            }, 3000);
                                                                                            $scope.updateClickDisable                   = false;


                                                                                        }

                                                                                    }).error(function (err) {
                                                                                        console.log(err);
                                                                                       /* $scope.errorMessage = "Please Try Again";
                                                                                        $timeout(function () {
                                                                                            $scope.errorMessage = false;
                                                                                        }, 3000);*/
                                                                                    });



                                                                            }

                                                                     }).error(function (err) {
                                                                             console.log(err);
                                                                            /* $scope.errorMessage = "Please Try Again";
                                                                             $timeout(function () {
                                                                                    $scope.errorMessage = false;
                                                                                }, 3000);*/
                                                                    });

                                                              }, 2000); // Timeo delay to get entry Id
                                                                }


                                                    break;

                                                    default:

                                                          if(typeof(chkMailArray) == "undefined" || chkMailArray == "" || chkMailArray == null){
                                                                console.log("checkbox ------- undefined");
                                                                $scope.errorMessageMailbox = "Please select atleast one message";
                                                                $scope.updateClickDisable                   = false;
                                                                $timeout(function () {
                                                                    $scope.errorMessageMailbox = false;
                                                                }, 3000);
                                                        }else{

                                                                console.log("mailStatus =====>");
                                                                console.log(mailStatus);


                                                            request = {mailStatus: mailStatus, chkMailArray: chkMailArray, folderId: folderId};
                                                            console.log(request);
                                                            $http.post($rootScope.STATIC_URL + 'mail/updateMailStatus', {request: request}).success(function (response) {
                                                            console.log("response >>>>>>>>");
                                                            console.log(response);
                                                                var switchKey = response.status;
                                                                switch(switchKey){

                                                                        case 2:

                                                                                //$scope.errorMessage = response.message;
                                                                                $scope.errorMessageMailbox = response.message;
                                                                                $scope.checkedMail         = "";

                                                                                $timeout(function () {
                                                                                    $scope.errorMessageMailbox = false;
                                                                                }, 3000);
                                                                        break;

                                                                        case 1:

                                                                               //$scope.successMessageCommonMail = "The message has been moving to the "+mailStatus;
                                                                                console.log("switchKey ==============");
                                                                                console.log(boxArray[1]);
                                                                                var switchKey = boxArray[1];
                                                                                switch(switchKey){
                                                                                            case "folder":
                                                                                                            //alert(boxArray[1]);
                                                                                                            //alert(boxArray[2]);
                                                                                                            //alert(" ========  $scope.listUCFolder.name=============");
                                                                                                            //console.log($event);
                                                                                                            //console.log($event.currentTarget.textContent);
                                                                                                            //return false;

                                                                                                            //folderName = folderName.split("_").join(" ");
                                                                                                            //$scope.successMessageCommonMail = "Succefully moved to the "+folderName;
                                                                                                            //request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                                                            if(mailStatus == "folder"){
                                                                                                                    folderName = folderName.split("_").join(" ");
                                                                                                                    $scope.successMessageCommonMail = "Message has been moved to "+$event.currentTarget.textContent;
                                                                                                                    request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                                                            }else{
                                                                                                                    $scope.successMessageCommonMail = "Message has been moved to "+mailStatus;
                                                                                                                    request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                                                            }
                                                                                            break;

                                                                                            case "conversationlist":
                                                                                                            $scope.successMessageCommonMail = "Message has been moved to Trash";
                                                                                                            request = {box: box, cnvrUserId: $routeParams.cnvrUserId};
                                                                                            break;

                                                                                            default:
                                                                                                        //alert("default ====>>>");
                                                                                                        //return false;
                                                                                                            console.log("default.............................");

                                                                                                            //$scope.successMessageCommonMail = "Succefully moved to the "+mailStatus;
                                                                                                            if(mailStatus == "delete"){
                                                                                                                     $scope.successMessageCommonMail = "The message has been permanently deleted";
                                                                                                                     request = {box: box, mailId: $routeParams.mailId};
                                                                                                            }
                                                                                                            else{
                                                                                                                    $scope.successMessageCommonMail = "Message has been moved to "+mailStatus;
                                                                                                                    request = {box: box, mailId: $routeParams.mailId};
                                                                                                            }
                                                                                            break;
                                                                                }
                                                                               /* if (boxArray[1] == "folder") {

                                                                                    folderName = folderName.split("_").join(" ");
                                                                                    $scope.successMessageCommonMail = "Succefully moved to the "+folderName;
                                                                                    request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                                }
                                                                                else if(boxArray[1] == "conversationlist"){
                                                                                    request = {box: box, cnvrUserId: $routeParams.cnvrUserId};
                                                                                }
                                                                                else if(boxArray[1] == "delete"){
                                                                                    $scope.successMessageCommonMail = "The message has been permanently deleted";
                                                                                    request = {box: box, mailId: $routeParams.mailId};
                                                                                }
                                                                                else {
                                                                                    //$scope.successMessageCommonMail = "Succefully moved to the "+mailStatus;
                                                                                    $scope.successMessageCommonMail = "The message has been moving to the "+mailStatus;
                                                                                    request = {box: box, mailId: $routeParams.mailId};
                                                                                }*/
                                                                                console.log(request);
                                                                                   $timeout(function () {
                                                                                        $scope.successMessageCommonMail = false;
                                                                                    }, 3000);
                                                                                    $scope.checkedMail  = "";
                                                                                //List MailBox Mails
                                                                                listAllMailboxMails();
                                                                                $scope.updateClickDisable                   = false;

                                                                        break;

                                                                }
                                                                $scope.updateClickDisable                   = false;

                                                               /* if (response.status == 2){
                                                                    //$scope.errorMessage = response.message;
                                                                    $scope.errorMessageMailbox = response.message;

                                                                    $timeout(function () {
                                                                        $scope.errorMessageMailbox = false;
                                                                    }, 3000);
                                                                }
                                                                else if (response.status == 1)
                                                                {
                                                                    $scope.successMessageCommonMail = "The message has been moving to the "+mailStatus;

                                                                    console.log(boxArray[1]);
                                                                    if (boxArray[1] == "folder") {

                                                                        folderName = folderName.split("_").join(" ");
                                                                        $scope.successMessageCommonMail = "Succefully moved to the "+folderName;
                                                                        request = {box: box, folderName: folderName, mailId: $routeParams.mailId};
                                                                    }
                                                                    else if(boxArray[1] == "conversationlist"){
                                                                        request = {box: box, cnvrUserId: $routeParams.cnvrUserId};
                                                                    }
                                                                    else {
                                                                        $scope.successMessageCommonMail = "Succefully moved to the "+mailStatus;
                                                                        request = {box: box, mailId: $routeParams.mailId};
                                                                    }
                                                                    console.log(request);
                                                                       $timeout(function () {
                                                                            $scope.successMessageCommonMail = false;
                                                                        }, 3000);

                                                                    //List MailBox Mails
                                                                    listAllMailboxMails();

                                                                }*/

                                                            }).error(function (err) {
                                                                console.log(err);
                                                                /*$scope.errorMessage = "Please Try Again";*/
                                                            });
                                                        }

                                                    break;
                                    }

          $scope.photoKeyTemplate = '';                               
          $scope.sendPhotoKeyModel = false ;                          

        }//Update Mail Status Ends





/* For All Mails (           route Params not defined =====================>>>>>>>>>>>>>>          ) Ends*/
    }
    else {

       /* //Count of Unread Inbox Messages
        $http.post($rootScope.STATIC_URL + 'mail/getUnreadInboxCount').success(function (response) {

            if (response.status == 1)
            {
                $scope.unreadInboxMailCount = response.data;
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });*/

         //List MailBox Mail Details
        $http.post($rootScope.STATIC_URL + 'mail/getmailDetails', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                $scope.mailDetails = response.data;

                $scope.box = box;
                if (folderName) {
                    folderName = folderName.split("_").join(" ");
                    $scope.boxFolder = folderName;
                    //$scope.folderId       = $routeParams.folderId;
                }

                if (box == 'inbox' && $routeParams.mailId) {
                    console.log("..........");
console.log(response.data);
                    $scope.composeTo = response.data.username;
                    //$scope.entryId          = response.data.id;
                    $scope.compRecId = response.data.userToId;
                    $scope.composeSubject = "Re: "+response.data.subject;
                }

            }


        }).error(function () {
                console.log(err);
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
        });


       //Get MAil Attachments
       console.log("[[[[[[[[[request");
       console.log(request);
       request = {mailId: $routeParams.mailId};
       $http.post($rootScope.STATIC_URL + 'mail/getMailAttachments', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                $scope.mailAttachments = response.data;
                console.log("mailAttachments.....");
                console.log(response.data);
            }

        }).error(function () {
            console.log(err);
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
        });


        //Update Mail Details Status
        $scope.updateMailStatus = function ($event) {
            console.log("{{{{{ =============>>>>>>>>>");
            var mailStatus = $event.currentTarget.id;
            //to split folderId when moved to folder
            var splitMailStatus = mailStatus.split('_');
            mailStatus = splitMailStatus[0];
            var folderId = splitMailStatus[1];
            var mailId = $scope.mailDetails.id;
            $scope.updateClickDisable                   = true;

            request = {mailId: mailId, mailStatus: mailStatus, folderId: folderId};
            $http.post($rootScope.STATIC_URL + 'mail/updateMailDetailStatus', {request: request}).success(function (response) {

                        var switchKey = response.status;
                        switch(switchKey){
                            case 1:



                                     $window.location.href = $rootScope.hashbang + "mailbox/inbox";

                            break;

                            case 2:
                                        //$scope.errorMessage = response.message;
                                        $scope.errorMessageMailbox = response.message;

                                        $timeout(function () {
                                            $scope.errorMessageMailbox = false;
                                        }, 3000);

                            break;


                        }
                        /*if (response.status == 2) {
                            //$scope.errorMessage = response.message;
                            $scope.errorMessageMailbox = response.message;

                            $timeout(function () {
                                $scope.errorMessageMailbox = false;
                            }, 3000);
                        }
                        else if (response.status == 1)
                        {

                            $window.location.href = $rootScope.hashbang + "mailbox/inbox";

                        }*/
                        $scope.updateClickDisable                   = false;

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });

        }


    }//Checking the view list  of mails or a single mail Ends

    //Get Search Users and append
    $scope.searchUser = function () {

        $(".composeSearchAppendOuter").show();
        $scope.appendName = false;
        var newElement = angular.element(document.querySelector('#appendNameOfUser'));

        console.log(newElement);
        newElement.empty();
        console.log("newElement    ======>     Remove Test");
        console.log(newElement);
        var nameOfUser = $scope.composeTo;
        request = {nameOfUser: nameOfUser};

        $http.post($rootScope.STATIC_URL + 'users/getSearchUsers', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                console.log("LIKE users");
                console.log(response);
                //to photo key start
                $scope.mailSearchUsers = response.data;
                //to photo key end

                for (var i = 0; i < response.data.length; i++) {
                    /*response.data[i].username = response.data[i].username.toLowerCase().replace(/\b[a-z]/g, function(letter) {
                        return letter.toUpperCase();
                    });*/
                    var html = "<div class='hand-symbol appendnameDiv'  ng-click='nameClick(" +response.data[i].id +",\""+ response.data[i].username +"\")'>" + response.data[i].username + "</div>";
                    newElement.append($compile(html)($scope));
                    console.log(response.data[i].username);
                }

            }

        }).error(function (err) {
            console.log(err);
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
        });

    }

    //Click After, dynamically generated nameOfUser
    $scope.nameClick = function (userId, userName) {
       $scope.appendName = true;
       $scope.composeTo = userName;
       $scope.compRecId = userId;
       $('.appendnameDiv').hide();
   }

    //To get Drafted Message
    $scope.getDraftedMessage = function (mailId) {

        request = {mailId: mailId};
        $http.post($rootScope.STATIC_URL + 'mail/getmailDetails', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                $scope.draftedMessageDetails = response.data;
                $rootScope.entryId = response.data.id;
                $scope.compRecId = response.data.userToId;
                $scope.composeTo = response.data.username;
                $scope.composeSubject = response.data.subject;
                $scope.composeMessage = response.data.message;
            }

        }).error(function () {

            console.log(err);
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
        });


        //Get MAil Attachments
        $http.post($rootScope.STATIC_URL + 'mail/getMailAttachments', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                $scope.mailAttachments = response.data;
            }

        }).error(function () {
             console.log(err);
            /*$scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);*/
        });


    }

//To Download Attachments
$scope.downloadMailAttachment=function(attachmentUrl, attachmentName)
{
    console.log("attachmentUrl >>>>>>>>>>>");
    console.log(attachmentUrl);
   //for(var i=0;i<$scope.mailAttachments.length;i++){
       //console.log("i ======---------------->>>>>>>>>ABCD");
       //console.log(i);
       var a = $("<a>").attr("href", attachmentUrl).attr("download", attachmentName).appendTo("body");
        console.log(a);
       a[0].click();
   //}
}
/*
 var links = document.querySelectorAll("a"), i = 0, lnk;
while(lnk = links[i++]) {
  if (lnk.dataset.link.length) lnk.onclick = toBlob;
}

function toBlob(e) {
  e.preventDefault();
  var lnk = this, xhr = new XMLHttpRequest();
  xhr.open("GET", lnk.dataset.link);
  xhr.responseType = "blob";
  xhr.overrideMimeType("octet/stream");
  xhr.onload = function() {
    if (xhr.status === 200)
      window.location = (URL || webkitURL).createObjectURL(xhr.response);
  };
  xhr.send();
  return false
}

 */
//To Download Attachments
$scope.downloadAllMailAttachment=function()
{
        /*   console.log("Download all mails ");
           console.log($scope.mailAttachments);
        var a = $("<a>").attr("href", $rootScope.STATIC_ANGULAR_URL+"zentiera/assets/images/attachments/"+$scope.mailAttachments).attr("download", $scope.mailAttachments[i].attachment).appendTo("body");
         a.click();
         */


     }



   // Close Compose Mail Tab
   $scope.closeComposeMailTab = function () {
        console.log("Entered Close Tab");
       // $scope.composeTo = "";
       // $scope.composeSubject = "";
       // $scope.composeMessage = "";
       // $scope.entryId = "undefined";
       // $scope.mailAttachments = "";
        $('.composeSearchAppendOuter').hide();

  }

 });

//'mailboxMailsCtrl' End
/*===================================================================================================================================
 userSettingsCtrl
 ====================================================================================================================================*/

 userControllers.controller('userSettingsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $compile, $timeout) {

    $scope.settings = 'general';
    $rootScope.adminNavigation = 1;
    $scope.errorMessage = "";
    var request = "";
    var loggedUser = $.parseJSON('[' + $rootScope.user + ']');
    loggedUser = loggedUser[0];

    //List All folders
    $http.post($rootScope.STATIC_URL + 'mail/getUserFolders').success(function (response) {
        if (response.status == 1)
        {
            $scope.listUCFolders = response.data;
        }


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });




    //Add New Folder in userSettings
    $scope.addNewMailFolder = function () {

        var folderName = $scope.newFolderName;
        console.log("$scope.newFolderName =====");
        console.log($scope.newFolderName);
        if (!folderName) {
            $scope.errorPopupMessage = "Please Enter A name";
        } else {

            request = {name: folderName};
            $http.post($rootScope.STATIC_URL + 'mail/createFolder', {request: request}).success(function (response) {
                if (response.status == 1)
                {
                    $('#newMailFolder').modal('hide');
                    $scope.newFolderName = "";
                    //List All folders
                    $http.post($rootScope.STATIC_URL + 'mail/getUserFolders').success(function (response) {
                        if (response.status == 1)
                        {
                            $scope.listUCFolders = response.data;
                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                        $timeout(function () {
                            $scope.errorMessage = false;
                        }, 3000);
                    });
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });

        }
    }

    //Edit  Folder Name in userSettings
    $scope.editFolderName = function (folderId, folderName) {

        request = {folderId: folderId, folderName: folderName};
        $http.post($rootScope.STATIC_URL + 'mail/updateUserFolders', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                console.log("success Update");
            }


        }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });
    }

    //Delete Folder
    $scope.deleteFolder = function (folderId, folderName) {

        if (!confirm('Are you sure to delete this '+folderName+" folder"))
        {
            $event.preventDefault();
        }
        else
        {
            request = {folderId: folderId, userId: loggedUser.id};
            $http.post($rootScope.STATIC_URL + 'mail/deleteUserFolders', {request: request}).success(function (response) {
                if (response.status == 1)
                {

                            //List All folders
                            $http.post($rootScope.STATIC_URL + 'mail/getUserFolders').success(function (response) {
                                if (response.status == 1)
                                {
                                    $scope.listUCFolders = response.data;
                                }
                            }).error(function () {
                                $scope.errorMessage = "Please Try Again";
                                $timeout(function () {
                                    $scope.errorMessage = false;
                                }, 3000);
                            });


                            $scope.successMessage = "Successfully Deleted the Folder";
                            $timeout(function () {
                                $scope.successMessage = false;
                            }, 3000);

                        }

                    }).error(function () {
                        $scope.errorMessage = "Please Try Again";
                        $timeout(function () {
                            $scope.errorMessage = false;
                        }, 3000);
                    });

                }


            }


            /*User Setting (preferences,enable or desable)*/
    //Update user settings
    $scope.update = function(key,value)
    {

                //console.log("key======================>>}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}>>>>>>>>>>");
                console.log(key);
                //console.log("value======================>>}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}>>>>>>>>>>");
                console.log(value);
                var newValue = "";
                var switchKey = key;
                    switch(switchKey){

                        case "searchProfileStatus":
                        case "incognito":
                                   if(value==false)
                                    {
                                        newValue='enable';
                                    }
                                    else
                                    {
                                        newValue='disable';
                                    }

                        break;
                        default:
                                     if(value==false)
                                    {
                                        newValue='disable';
                                    }
                                    else
                                    {
                                        newValue='enable';
                                    }
                        break;

                    }


                console.log("newValue =============");
                console.log(newValue);
                var switchKey = "";
                if(key=="incognito")
                {
                    var params={};
                    params['favouriteMailStatus']=newValue;
                    params['provisitMailStatus']=newValue;
                }
                else
                {
                    var params={};
                    params[key]=newValue;
                }
                console.log("vvvvvvvvvvvvvvvvvvvvalueeeeeeeeeeeeeeeeeeeee");
                console.log(key);
                //console.log(params);
                $http.post($rootScope.STATIC_URL + 'userSettings/updateUserSettings',params).success(function (response) {
                    if (response.status == 1)
                    {
                        //$scope.getUserSettings();
                        reConnectSocket();
                        console.log("success Update");
                    }
                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });
    }

   /* //get user settings
    $scope.getUserSettings = function()
    {*/
    console.log("before user settings");
        $http.post($rootScope.STATIC_URL + 'userSettings/getUserSettings').success(function (response) {
            console.log("user settings response ====================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            console.log(response);
            if (response.status == 1)
            {
                console.log("after user settings");
                angular.forEach(response.data, function(value, key) {
                    console.log("---------------------------------------------------------------------------------key ==== value");
                    console.log(key);
                    console.log(value);

                    var switchKey = key;
                    switch(switchKey){

                        case "searchProfileStatus":
                        case "favouriteMailStatus":
                        case "provisitMailStatus":
                                if(value=='enable')
                                {
                                    response.data[key]= false;
                                }
                                else
                                {
                                    response.data[key]=true;
                                }
                        break;
                        default:
                                if(value=='enable')
                                {
                                    response.data[key] = true;
                                }
                                else
                                {
                                    response.data[key] = false;
                                }
                        break;

                    }
                    /*if(key == "searchProfileStatus" && value == "enable"){
                            response.data[key]= false;
                    }else{
                        response.data[key]=true;
                    }*/
                    /*if(value=='enable')
                    {
                        response.data[key]= false;
                    }
                    else
                    {
                        response.data[key]=true;
                    }*/
                });
                $scope.userSettings=response.data;
                console.log($scope.userSettings);
            }

        }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });
    //}
   // $scope.getUserSettings();

});

/*===================================================================================================================================
 Landing Page Controller
 ====================================================================================================================================*/
 userControllers.controller('landingPageCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout, $log) {

	// show beta popup once in landing page
	try{

		$http.post($rootScope.STATIC_URL + 'phase2/getUserLoginCount')
		.success(function (user) {
			console.log(user);
			if (user.status === 1) {
				if(user.data[0].loginCount == 1){
					$rootScope.signUpModal();
					$rootScope.signUpModalStatus = true;
				}
			}
		});
	}catch(e){
		console.log(e);
	}


    $rootScope.showloader = false;

    var request                          = "";
    var selectCountryArray               = [];
    $scope.selectedCountryArray          = [];
    $scope.errorMessage                  = "";
    $scope.commonMilesArray              = HELPER_commonMilesArray;
    $scope.commonMilesArrayFirst         = $scope.commonMilesArray[0].hideValue;
    $scope.commonCountryPhoneCodeArray   = HELPER_countryPhoneCode;
    console.log('HELPER_countryPhoneCode ++++>>'+JSON.stringify($scope.commonCountryPhoneCodeArray));
    //console.log($scope.commonCountryPhoneCodeArray);
    //console.log($scope.commonCountryPhoneCodeArray[0]);
    //console.log($scope.commonCountryPhoneCodeArray[0].name);
    $scope.commonCountryPhoneCodeArrayFirst = $scope.commonCountryPhoneCodeArray[0].dial_code;
    //$scope.commonCountryPhoneCodeArrayFirst   = "--- Select your country code ---";
    console.log("$rootScope.latestSearchArea ==============================================");
    //console.log($scope.massageNowDetails.currentPhoneCountryCode);
    //console.log($rootScope.latestSearchArea);
    //console.log(parseInt($rootScope.latestSearchArea));
    //console.log($scope.latestSearchArea);
    //$scope.commonMilesArrayFirst         = $scope.latestSearchArea;
    $scope.errorRadiusCitySearchMessage  = "";
    $scope.errorCountrySearchMessage     = "";
    $scope.massageNowSuccess             = "";
    //console.log("HELPER_DATE_TIME_HYPHON ===============================----------------------------------");
    //console.log(HELPER_DATE_TIME_HYPHON);
    //console.log("HELPER_DATE_TIME_HYPHON ===============================----------------------------------");
      //$scope.avlTimeChange                 = "";


      console.log($scope.commonMilesArray);
      console.log($scope.commonMilesArrayFirst);



                  /*  //Get Latest Search Area Travellocation
                        $http.post($scope.STATIC_URL + 'travelLocations/getLatestSearchArea').success(function (response) {
                            if (response.status == 1)
                            {
                                console.log("getLatestSearchArea");
                                console.log(response.data.searchLocation);
                                $scope.latestSearchArea = response.data.searchLocation;
                            }
                        }).error(function () {
                            $scope.errorMessage = "Please Try Again";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                        });*/


      $scope.timePickerChange = function(timeArg){
          console.log("timeArg >>>>>>>>>>>>>????????????");
          console.log(timeArg);
          console.log($scope.massageNowDetails.massageTime);
          $scope.availableTimeError = false;
          $scope.avlTimeChange = timeArg;
      }
             //Check Massage Now Expire
            /*$http.post($rootScope.STATIC_URL + 'massagenow/checkExpireMassageTime').success(function (response) {
                    if (response.status == 1 && response.data == 0)
                    {
                        $scope.massageNowDetails.currentPhoneNo = "";
                        $scope.massageNowDetails.massageTime    = "";
                        $scope.massageNowDetails.checked        = false;

                    }else if (response.status == 1 && response.data == 1)
                    {
                       // console.log(response);

                    }


                }).error(function () {

                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });*/
            var request = {currentDateTime : HELPER_DATE_TIME_HYPHON};
           //Get Massage Now Details
           $http.post($rootScope.STATIC_URL + 'massagenow/getMassageNowDetails', {request: request}).success(function (response) {
            if (response.status == 1)
            {
                    console.log("massage now details =======================");
                    console.log(response);
                    $scope.massageNowDetails       = response.data;

                if(typeof(response.data.avlTime) == 'undefined' || response.data.avlTime == '' || response.data.avlTime == null || response.data.avlTime == "00:00:00")
                {
                            //console.log(response.data.availableTime);
                            $scope.massageNowDetails.checked                 =  false;
                            $scope.massageNowDetails.currentPhoneNo          =  "";
                            $scope.massageNowDetails.massageTime             =   "00:00";
                }
                else{
                                console.log("===============================response.data.avlTime=====================================");
                                console.log(response.data.availableTime);
                                var receivedDateTime = new Date(response.data.availableTime);
                                console.log(receivedDateTime);
                                console.log(receivedDateTime.getHours());
                                console.log("===========receiveDateTime.toUTCString()=================");

                                var receivedDateTimeHours = receivedDateTime.getHours();
                                var receivedDateTimeMinutes = receivedDateTime.getMinutes();
                                if(receivedDateTimeHours<10) {
                                    receivedDateTimeHours= '0'+receivedDateTimeHours;
                                }
                                if(receivedDateTimeMinutes<10) {
                                    receivedDateTimeMinutes= '0'+receivedDateTimeMinutes;
                                }

                                        var availableSplitTime          = response.data.avlTime.split(':');
                                        var availableSplitTimeHour      = availableSplitTime[0];
                                        var availableSplitTimeMinute    = availableSplitTime[1];



                                        //$scope.massageNowDetails.currentPhoneCountryCode        = currentPhoneCountryCode;
                                        var currentPhoneCountryCode    = "";
                                        var currentPhoneNo             = "";
                                        console.log("response.data.currentPhoneNo ============>>>>>");
                                        console.log(response);
                                        console.log(response.data);
                                        console.log(response.data.currentPhoneNo);
                                        if(!response.data.currentPhoneNo){
                                                currentPhoneCountryCode    = "";
                                                currentPhoneNo             = "";
                                                $scope.massageNowDetails.currentPhoneNo                 = currentPhoneNo;
                                                $scope.massageNowDetails.currentPhoneCountryCode        = currentPhoneCountryCode;
                                                $scope.commonCountryPhoneCodeArrayFirst         = $scope.commonCountryPhoneCodeArray[0].dial_code;
                                        }else{

                                               currentPhoneCountryCode                         = response.data.currentPhoneNo.split("|")[0];
                                               currentPhoneNo                                  = response.data.currentPhoneNo.split("|")[1];
                                               $scope.massageNowDetails.currentPhoneNo         = currentPhoneNo;
                                                $scope.commonCountryPhoneCodeArrayFirst         = currentPhoneCountryCode;
                                               //$scope.massageNowDetails.currentPhoneCountryCode        = currentPhoneCountryCode;
                                        }
                                        $scope.massageNowDetails.checked                        = true;
                                        $scope.massageNowDetails.massageTime                    = receivedDateTimeHours +":" + receivedDateTimeMinutes;
                    }


            }


                }).error(function () {
                    console.log("Get Massage Now details Error ?????????????????");
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });





             //Get Home Location
             $http.post($rootScope.STATIC_URL + 'travelLocations/getHomeLocation').success(function (response) {
                if (response.status == 1)
                {
                    console.log("get home Location Response");
                    console.log(response);
                    $scope.homeLocation = response.data;
                }


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });

            //Get All Travel Cities
            $http.post($rootScope.STATIC_URL + 'travelLocations/getTravelCities').success(function (response) {
                if (response.status == 1)
                {
                    console.log("getTravelLocation Response +++++"+JSON.stringify(response));
           			 $scope.myTravelCities = response.data;
                }


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });



   //Select Country from dropdown
   $scope.selectCountryClick  = function(){
       $scope.errorCountrySearchMessage      = false;
      if(selectCountryArray.indexOf($scope.selectCountry) < 0){
        $scope.selectedCountryPresentErrorMsg = false;

        selectCountryArray.push($scope.selectCountry);
        $scope.selectedCountryArray =  selectCountryArray;
    }
    else{
     console.log("Already Present +++++++++++");
     $scope.selectedCountryPresentErrorMsg = "Country Already Selected";
 }



}

   //Remove Selected Country from dropdown
   $scope.removeSelectCountry  = function(item){
     var index = $scope.selectedCountryArray.indexOf(item);
     $scope.selectedCountryArray.splice(index, 1);
     console.log($scope.selectedCountryArray);
 }

   //Mile Select from a dropdown List
   $scope.mileChange = function(mileSearchSelect){
        $scope.errorRadiusCitySearchMessage = false;
        console.log("mileChange");
        console.log(mileSearchSelect);
        $scope.cityMile    = mileSearchSelect;
  }

    // City select from a dropdown List
    $scope.cityChange = function(){
       $scope.errorRadiusCitySearchMessage = false;
       console.log("city changed");
       console.log($scope.citySearchSelect);


           //console.log(event);
          // console.log(event.citySearchSelect);
          var slashSplit = $scope.citySearchSelect;
          slashSplit     = slashSplit.split("/");
          console.log(slashSplit);

          var pipeSplit = $scope.citySearchSelect;
          pipeSplit     = pipeSplit.split("|");
          console.log(pipeSplit);


          if(slashSplit.length > 1){
              console.log("slashSplit have length");
              $window.location.href = $scope.citySearchSelect;
          }


          if(pipeSplit.length > 1){
                  console.log("pipeSplit have length");
                  var cityName             = pipeSplit[0];
                  var cityLat              = pipeSplit[1];
                  var cityLng              = pipeSplit[2];
                  var cityLocType          = pipeSplit[3];
                  if(cityLat == 0 && cityLng == 0){
                       //alert("CountryWide===========");
                       $scope.commonMilesArrayFirst = "countrywide";
                       $scope.cityMile          = "countrywide";
                       $scope.cityName          = cityName;
                       $scope.cityLat           = cityLat;
                       $scope.cityLng           = cityLng;
                       $scope.cityLocType       = cityLocType;
                       //return false;


                  }else{
                        //alert("city===========");
                        //$scope.commonMilesArrayFirst = 0;
                          console.log("cityName =================>>>>>>>>>>>>>>>>>>");
                          console.log(cityName);
                          $scope.cityName          = cityName;
                          $scope.cityLat           = cityLat;
                          $scope.cityLng           = cityLng;
                          $scope.cityLocType       = cityLocType;
                  }

          }
          if($scope.citySearchSelect==='mylocations'){
          	$window.location.href = '/mylocations';
          }
       //this.options[this.selectedIndex].value && (window.location = this.options[this.selectedIndex].value)
   }

  //Radius City Search
  $scope.radiusCitySearch  = function(){
            //console.log("radiusCitySearch ===>");
            console.log($scope.cityName);
            console.log($scope.cityMile);
            console.log($scope.cityLocType);


            if((!$scope.cityName && !$scope.cityMile) ||(typeof $scope.cityName == "undefined") || (typeof $scope.cityMile == "undefined")){
                $scope.errorRadiusCitySearchMessage = "Please select a location and mile";
            }
            else if($scope.cityLocType == "city" && $scope.cityMile == "countrywide"){
                //alert($scope.cityName.split(','));
                        $scope.errorRadiusCitySearchMessage = "Please select a country as location";
            }
            else if(!$scope.cityName){
                $scope.errorRadiusCitySearchMessage = "Please select a location";
            }
            else if(!$scope.cityMile){
                $scope.errorRadiusCitySearchMessage = "Please select a mile";
            }
            else{
                $window.localStorage.search = JSON.stringify({searchField:'city',cityName: $scope.cityName,cityMile: $scope.cityMile,cityLat: $scope.cityLat,cityLng: $scope.cityLng,cityLocType: $scope.cityLocType});
                $window.location.href = $rootScope.hashbang + "searchresults";
            }
}


  //Country Search
  $scope.countrySearch  = function(){
    console.log("countrySearch ===>");
    console.log($scope.selectedCountryArray);


            if($scope.selectedCountryArray.length === 0){
                 $scope.errorCountrySearchMessage = "Please select atleast one country";
            }
            else{
                    $window.localStorage.search = JSON.stringify({searchField:'country',selectedCountryArray: $scope.selectedCountryArray});
                   $window.location.href = $rootScope.hashbang + "searchresults";
                 } //Country Search Results


             }

       /* $scope.availableTimeCheckBoxClick = function () {
            $scope.checkedMail = $filter('filter')($scope.mailboxMails, {checked: true});
            console.log("$scope.checkedMail>>>>>");
            console.log($scope.checkedMail);
        }*/
        $scope.cancelAvailTimeClick  = function(){
           $rootScope.showloader                = true;
           //$scope.massageNowSuccess             =   "";
           //var availableTime = angular.element(document.querySelector('.ng-timepicker-input')).val();
           var availableTime = $scope.avlTimeChange;
           console.log("$scope.availTimeChecking =====");
           console.log($scope.availTimeChecking);
           //console.log($scope.massageNowDetails.massageTime);
           $scope.commonCountryPhoneCodeArrayFirst = $scope.commonCountryPhoneCodeArray[0].dial_code;
           $scope.massageNowDetails.currentPhoneNo         = "";
           $scope.massageNowDetails.checked                = false;
           $scope.massageNowDetails.massageTime            = "00:00";
           $scope.avlTimeChange                            = "00:00";
           $rootScope.showloader                           = false;

          /* var today = new Date();
           var dd = today.getDate();
           var mm = today.getMonth()+1; //January is 0!
           var yyyy = today.getFullYear();

            if(dd<10) {
                dd='0'+dd
            }

            if(mm<10) {
                mm='0'+mm
            }
            today = mm+"/"+dd+"/"+yyyy;
            console.log(today);*/
            //console.log($scope.avlTimeChange);
            //var availableTimeSplit = availableTime.split(":");
            console.log(HELPER_DATE_SLASH_M_D_Y);
            //availableTime = HELPER_DATE_SLASH_M_D_Y+" "+"4:30";
            availableTime = "";

            //Save cancel Value
            request = {availableTime: availableTime, phoneNumber: $scope.massageNowDetails.currentPhoneNo};
            console.log(request);
            $http.post($rootScope.STATIC_URL + 'massagenow/addMassageNow', {request: request}).success(function (response) {
                console.log(response);
                console.log(response.status);
                if (response.status == 1)
                {
                    console.log("Calcel Massage Now");
                    //console.log(response);
                    //$rootScope.showloader                =   false;
                    //$scope.massageNowSuccess             =   "Successfully Cancelled";
                    var massageNowSuccess={status:true,message: "Successfully cancelled"};
                    $rootScope.addAlert(massageNowSuccess);
                    console.log("Calcel Massage Now  ------- 333");
                   /* $timeout(function () {
                        //$scope.massageNowSuccess = false;
                    }, 3000);*/

                }
            }).error(function (err) {
                console.log(err);
               /* $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);*/
            });
             $scope.massageNowSuccess             =   "";

        }


        $scope.avoidErrorMsg  = function(){

                 $scope.availableTimeError = false;

        }


        $scope.saveAvailTimeClick  = function(){

           //var currentDate = new Date();
           var availableTime  = "";
           console.log($scope.avlTimeChange);
           console.log("commonCountryPhoneCodeArrayFirst-------------------------------------------------------------++++++++++++++");
           console.log($scope.commonCountryPhoneCodeArrayFirst);
           console.log("====== massageNowDetails.currentPhoneNo  ===========");
           console.log($scope.massageNowDetails.currentPhoneNo);
           if($scope.avlTimeChange){
                availableTime  = $scope.avlTimeChange;
            }else if(typeof($scope.avlTimeChange) == 'undefined'){
                availableTime = $scope.massageNowDetails.massageTime;
            }


            if($scope.massageNowDetails.checked == false && $scope.massageNowDetails.massageTime == "00:00"){
               console.log("Please Both");
               $scope.availableTimeError = "Please mention your availability by selecting the checkbox";

            }else if($scope.massageNowDetails.checked == false){
               console.log("Please check the box");
               $scope.availableTimeError = "Please mention your availability by selecting the checkbox";

            }//current Time greater than Selected Time Check
            else if($scope.massageNowDetails.massageTime){
                    var selectedHour    = parseInt($scope.massageNowDetails.massageTime.split(':')[0]);
                    var selectedMinute  = parseInt($scope.massageNowDetails.massageTime.split(':')[1]);
                    if( (selectedHour < HELPER_currentHour && selectedMinute < HELPER_currentMinute) || (selectedHour == HELPER_currentHour && selectedMinute < HELPER_currentMinute)){
                          console.log("hi ------------");
                          $scope.availableTimeError = "Entered time must be greater than current time";
                              //$timeout(function () {
                                   // $scope.availableTimeError = false;
                              //}, 3000);
                              return false;
                    }
                    else if($scope.massageNowDetails.massageTime == "00:00" && $scope.avlTimeChange == "00:00"){
                                $scope.availableTimeError = "Please mention the time till when you are available";
                               //$rootScope.showloader                =   false;
                    }
                    else if($scope.massageNowDetails.currentPhoneNo || $scope.commonCountryPhoneCodeArrayFirst != 0){
                        //console.log("$scope.commonCountryPhoneCodeArrayFirst -------------------------------");
                        //console.log($scope.commonCountryPhoneCodeArrayFirst);
                       // return false;
                             /*if(!$scope.commonCountryPhoneCodeArrayFirst){
                                    console.log("$scope.commonCountryPhoneCodeArrayFirst ====== NOT SELECT");
                                    console.log($scope.commonCountryPhoneCodeArrayFirst);
                                    //$scope.availableTimeError = "Please mention the time till when you are available";
                             }*/
                             if($scope.commonCountryPhoneCodeArrayFirst == 0){
                                    console.log("Zero ========");
                                    $scope.availableTimeError = "Please select your country code";
                             }
                             else{
                                       console.log("$scope.commonCountryPhoneCodeArrayFirst ======  SELECT");
                                       console.log($scope.commonCountryPhoneCodeArrayFirst);
                                       console.log("saved numberrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
                                       //var numbercheck = /^\d{10}$/;
                                       //console.log($scope.massageNowDetails.currentPhoneNo);
                                       //console.log(isNaN($scope.massageNowDetails.currentPhoneNo));
                                       //console.log($scope.massageNowDetails.currentPhoneNo.match(numbercheck));
                                       //console.log(/^[0-9]{5,15}$/.test($scope.massageNowDetails.currentPhoneNo));

                                       if(!(/^[0-9]{5,15}$/.test($scope.massageNowDetails.currentPhoneNo))){
                                          $scope.availableTimeError = "Please enter a valid mobile number";

                                       }else{
                                        saveMassageNow();
                                       }
                            }


                    }
                    else{
                                saveMassageNow();
                    }
            }

            $timeout(function () {
                $scope.availableTimeError = false;
            }, 3000);


                function saveMassageNow(){
                    /*var today = new Date();
                    var dd = today.getDate();
                            var mm = today.getMonth()+1; //January is 0!
                            var yyyy = today.getFullYear();

                            if(dd<10) {
                                dd='0'+dd
                            }

                        if(mm<10) {
                            mm='0'+mm
                        }
                        today = mm+"/"+dd+"/"+yyyy;
                        console.log(today);*/
                        console.log($scope.avlTimeChange);
                        var availableTimeSplit = availableTime.split(":");
                        availableTime = HELPER_DATE_SLASH_M_D_Y+" "+availableTime;
                        if($scope.massageNowDetails.currentPhoneNo){
                            console.log("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj");
                            //console.log($scope.commonCountryPhoneCodeArrayFirst);
                            //console.log($scope.commonCountryPhoneCodeArrayFirst.dial_code);
                            console.log($scope.commonCountryPhoneCodeArrayFirst)
                                request = {availableTime: availableTime, phoneNumber: $scope.commonCountryPhoneCodeArrayFirst + "|" + $scope.massageNowDetails.currentPhoneNo};
                        }else{

                                request = {availableTime: availableTime, phoneNumber: $scope.massageNowDetails.currentPhoneNo};
                        }
                        console.log("request ================================++++++++++++++++++++++++++++++++++++++++++");
                        console.log(request);
                        $http.post($rootScope.STATIC_URL + 'massagenow/addMassageNow', {request: request}).success(function (response) {
                            if (response.status == 1)
                            {
                                console.log("Add Massage Now");
                                console.log(response);
                                $rootScope.showloader                =   false;
                                //$scope.massageNowSuccess             =   "Successfully saved";
                                var massageNowSuccess={status:true,message: "Successfully saved"};
                                $rootScope.addAlert(massageNowSuccess);
                                $timeout(function () {
                                    //$scope.massageNowSuccess = false;
                                }, 3000);

                            }
                        }).error(function () {
                            $scope.errorMessage = "Please Try Again";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                        });

                    }


                }

                $scope.editAvailTimeClick  = function(){
                  console.log("==editAvailTimeClick===");
                  $('.landing-Page .massageNowFirst').show();
                  $('.landing-Page .massageNowSecond').hide();


              }





          });


/*===================================================================================================================================
 My Locations Controller
 ====================================================================================================================================*/
 userControllers.controller('myLocationsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout, $route) {

  var request                          = "";
  var switchKey                        = "";
  $scope.travelStartDate               = "";
  $scope.updateTravelStartDateErrorMsg = "";
  $scope.updateTravelEndDateErrorMsg   = "";
  console.log("myLocationsCtrl");
  $scope.locationMileSelectError       = "Please Select a valid Mile";
     // $rootScope.commonMilesArray
     $scope.commonMilesArray              = HELPER_commonMilesArray;
     $scope.rowsPerPage                   = 5;
      //$rootScope.showloader = true;

      function getAllTravelLocations(){
         //Get All Travel Loactions
         $http.post($rootScope.STATIC_URL + 'travelLocations/getTravelLocations').success(function (response) {
            if (response.status == 1)
            {
                console.log("getTravelLocation Response");
                console.log(response);
                var countryArray;
                for(var i=0; i< response.data.length; i++){

                    if(response.data[i].locationType == 'country'){
                        console.log(response.data[i].locationNames);
                        response.data[i].countryArray = response.data[i].locationNames.split(",");
                    }
                }

                $scope.myLocations     = response.data;
                console.log("my locations length ---------------------------------------");
                console.log($scope.myLocations.length);
                console.log($scope.myLocations);
                $rootScope.showloader = false;
            }


        }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });
    }

     $scope.changeStatus  = function ($index,id,status){
     	console.log($index+" --- "+ id +" --- "+status);
        var request = {};
        //request.index = $index ;
        request.id = id ;
        request.status = status ;
        $http.post($rootScope.STATIC_URL + 'travelLocations/changeStatus',{request : request}).success(function (response) {
             if (response.status == 1)
            {
                console.log('success '+JSON.stringify($scope.myLocations));
                angular.forEach($scope.myLocations, function(value, key) {
                    if(request.id === value.id){
                      value.status = request.status;
                    }
               });
            }
     	});
     };
     /*console.log($routeParams.latlng);
     if($routeParams.latlng){
         var latlngSplit = $routeParams.latlng.split('_');
         $scope.lat                   = latlngSplit[0];
         $scope.lng                   = latlngSplit[1];
     }
     if($routeParams.address){
            console.log("formattedAddress ===> Present");
            $scope.formattedAddress      = $routeParams.address;
    }
    else{
            console.log("formattedAddress ===> Absent");
        }
        */
            //Check SignUp Location
            $http.post($rootScope.STATIC_URL + 'travelLocations/checkSignUpTravelLocation').success(function (response) {
                if (response.status == 1)
                {
                    console.log("check SignUp Travel Location");
                    console.log(response);
                    $scope.checkSignUpTravelLocation = response.data.id;
                    $rootScope.showloader = false;
                }
            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });

           //Get Home Location
           $http.post($rootScope.STATIC_URL + 'travelLocations/getHomeLocation').success(function (response) {
            if (response.status == 1)
            {
                console.log("get home Location Response");
                console.log(response);
                $scope.homeLocation = response.data;
            }


        }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });

        /*  var countryArray = [];
            //Get All Travel Loctions
            $http.post($rootScope.STATIC_URL + 'travelLocations/getTravelLocations').success(function (response) {
                if (response.status == 1)
                {
                    console.log("getTravelLocation Response");
                    console.log(response);
                    var countryArray;
                    for(var i=0; i< response.data.length; i++){
                        if(response.data[i].locationType == 'country'){
                            console.log(response.data[i].locationNames);
                            response.data[i].countryArray = response.data[i].locationNames.split(",");
                        }
                    }

                    $scope.myLocations     = response.data;

                    $rootScope.showloader = false;

                }


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });

            */
            getAllTravelLocations();



/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

   //Save Mylocations
   $scope.mylocationsSave  = function ($index){
        console.log("$scope.mylocationsSave ================");
        console.log($scope.myLocations);
        console.log($scope.myLocations[$index].locationCategory);
        console.log($scope.myLocations[$index].travelStart);
        console.log($scope.myLocations[$index].travelEnd);
        console.log($scope.myLocations[$index].travelEnd);
        console.log($scope.myLocations[$index].searchLocation);

        var date_1st = $scope.myLocations[$index].travelStart;
        var date_2nd = $scope.myLocations[$index].travelEnd;
        console.log("--------------- newDates ---------------");
        console.log(date_1st);
        console.log(date_2nd);

              /*if(date_1st  && !date_2nd){
                            //alert("Please Select valid Dates");
                            var alertErrMsg = "Please Select valid Dates";
                            var errorResponse={status:true,message: alertErrMsg};
                            $rootScope.addAlert(errorResponse);
                            $window.scrollTo(0, 0);
                            return false;
              }*/
               if($scope.myLocations[$index].locationCategory == 'travel'){


                       if(!date_1st && !date_2nd){
                            //alert("Please Select travelStart Date");
                            var alertErrMsg = "Please select search Dates";
                            var errorResponse={status:false, type: 'danger',message: alertErrMsg};
                            $rootScope.addAlert(errorResponse);
                            $scope.myLocations[$index].travelStart    = "";
                            $scope.myLocations[$index].travelEnd      = "";
                            $window.scrollTo(0, 0);
                            return false;
                      }
                      else if(!date_1st && date_2nd){
                            //alert("Please Select travelStart Date");
                            var alertErrMsg = "Please Select travelStart Date";
                            var errorResponse={status:false, type: 'danger',message: alertErrMsg};
                            $rootScope.addAlert(errorResponse);
                            //$scope.myLocations[$index].travelStart    = "";
                            //$scope.myLocations[$index].travelEnd      = "";
                            $window.scrollTo(0, 0);
                            return false;
                      }
                      else if(date_1st && !date_2nd){
                            //alert("Please Select travelEnd Date");
                            var alertErrMsg = "Please Select travelEnd Date";
                            var errorResponse={status:false, type: 'danger',message: alertErrMsg};
                            $rootScope.addAlert(errorResponse);
                            //$scope.myLocations[$index].travelStart    = "";
                            //$scope.myLocations[$index].travelEnd      = "";
                            $window.scrollTo(0, 0);
                            return false;
                      }else if(date_1st > date_2nd){
                                  console.log("Date 1 greater than Date 2");
                                  //alert("Startdate must be lesser than Enddate");
                                  var alertErrMsg = "Startdate must be lesser than Enddate";
                                  var errorResponse={status:false, type: 'danger',message: alertErrMsg};
                                  $rootScope.addAlert(errorResponse);
                                  //$scope.myLocations[$index].travelStart    = "";
                                  //$scope.myLocations[$index].travelEnd      = "";
                                  $window.scrollTo(0, 0);
                                  return false;

                      }
              }
              else if($scope.myLocations[$index].locationCategory == 'home' && $scope.myLocations[$index].searchLocation == 0){

                            var alertErrMsg = "Please Select Search Area";
                            var errorResponse={status:false, type: 'danger',message: alertErrMsg};
                            $rootScope.addAlert(errorResponse);
                            $window.scrollTo(0, 0);
                            return false;
             }


                   // else if(date_1st < date_2nd || date_1st == date_2nd || ){
                         //alert("Else");
                         request = {
                                    id              : $scope.myLocations[$index].id,
                                    travelStart     : $scope.myLocations[$index].travelStart,
                                    travelEnd       : $scope.myLocations[$index].travelEnd,
                                    searchLocation  : $scope.myLocations[$index].searchLocation,
                                    };
                         console.log(request);
                         $rootScope.showloader = true;
                          console.log("Date 1 Lesser than Date 2");
                          //Update Country

                             $http.post($rootScope.STATIC_URL + 'travelLocations/saveMyLocation',{request : request}).success(function (response) {
                                 console.log(response);
                                if (response.status == 1 && typeof(response.errorMsg) != "undefined"){
                                    //$scope.updateTravelStartDateErrorMsg  = response.errorMsg;
                                    //alert(response.errorMsg);
                                    var alertErrMsg = response.errorMsg;
                                    var errorResponse={status:false,type: 'danger',message: alertErrMsg};
                                    $rootScope.addAlert(errorResponse);
                                    $scope.myLocations[$index].travelStart    = "";
                                    $scope.myLocations[$index].travelEnd      = "";
                                    $window.scrollTo(0, 0);
                                    $rootScope.showloader = false;
                                    return false;
                                    //getAllTravelLocations();
                                    //$timeout(function () {
                                      //  $scope.updateTravelStartDateErrorMsg = false;
                                    //}, 3000);

                                }
                                else if (response.status == 1 && typeof(response.errorMsg) == "undefined")
                                {
                                    $rootScope.showloader = false;
                                    var alertSuccessMsg = "Successfully Saved";
                                    var successResponse={status:true,type: 'success',message: alertSuccessMsg};
                                    $rootScope.addAlert(successResponse);
                                    $window.scrollTo(0, 0);
                                    console.log(response);
                                }
                                reConnectSocket();

                            }).error(function () {
                                $scope.errorMessage = "Please Try Again";
                                $timeout(function () {
                                    $scope.errorMessage = false;
                                }, 3000);
                            });



                    //}


        }
/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  */

   //Update Travel StratDate
   $scope.updateTravelStartDateLocation  = function (myLocationId, travelStartDate){
     console.log("$scope.updateLocation ================");
     console.log(myLocationId);
     console.log(travelStartDate);
     console.log($scope.travelEndDate);
     request = {id: myLocationId, travelStart: travelStartDate};
     console.log(request);
     $rootScope.showloader = true;
         /*if(travelStartDate != undefined){
            $scope.loadingIconStartDate = true;
         }else if(travelEndDate != undefined){
            $scope.loadingIconEndDate = true;
        }*/

            //Update Country
            $http.post($rootScope.STATIC_URL + 'travelLocations/updateTravelStartDateLocation',{request : request}).success(function (response) {
                if (response.status == 1 && typeof(response.errorMsg) != "undefined"){
                    //$scope.updateTravelStartDateErrorMsg  = response.errorMsg;
                    alert(response.errorMsg);
                    getAllTravelLocations();
                    //$timeout(function () {
                      //  $scope.updateTravelStartDateErrorMsg = false;
                    //}, 3000);
                    $rootScope.showloader = false;
                }
                else if (response.status == 1 && typeof(response.errorMsg) == "undefined")
                {
                    $rootScope.showloader = false;
                    console.log(response);
                }


            }).error(function () {
                $scope.errorMessage = "Please Try Again";
                $timeout(function () {
                    $scope.errorMessage = false;
                }, 3000);
            });
        }

    //Update Travel End Date
    $scope.updateTravelEndDateLocation  = function (myLocationId, travelEndDate){
     console.log("$scope.updateLocation ================");
     console.log(myLocationId);
     console.log(travelEndDate);
     console.log($scope.travelEndDate);
     request = {id: myLocationId, travelEnd: travelEndDate};
     console.log(request);
     $rootScope.showloader = true;

            //Update Country
            $http.post($rootScope.STATIC_URL + 'travelLocations/updateTravelEndDateLocation',{request : request}).success(function (response) {
                if (response.status == 1 && typeof(response.errorMsg) != "undefined")
                {
                    //$scope.updateTravelEndDateErrorMsg  = response.errorMsg;
                    alert(response.errorMsg);
                    getAllTravelLocations();
                    //$timeout(function () {
                    //    $scope.updateTravelEndDateErrorMsg = false;
                   // }, 3000);
                   $rootScope.showloader = false;
               }
               else if (response.status == 1 && typeof(response.errorMsg) == "undefined"){
                  $rootScope.showloader = false;
                  console.log(response);
              }


          }).error(function () {
            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);
        });
      }



   //Delete My Location
    $scope.deleteLocation  = function (myLocationId, myLocationName, locationPrimary){
            $rootScope.showloader = true;
            //console.log(myLocationId);
            request = {myLocationId: myLocationId, myLocationName: myLocationName};
            //console.log($scope.myLocations);
            //console.log(a);
            //console.log($index);
            //console.log($scope.myLocations[$index]);
            //return false;
            if(locationPrimary == "primary"){
                     alert('You don\'t have the permission to delete a primary location');
                     $rootScope.showloader = false;
                     return false;
            }
            else{
                    if (!confirm('Are you sure to delete this location'))
                    {   $rootScope.showloader = false;
                        $event.preventDefault();
                    }
                    else
                    {
                        //console.log(" After Alert locationPrimary ======================");
                        //console.log(locationPrimary);
                        $rootScope.showloader = false;

                                $http.post($rootScope.STATIC_URL + 'travelLocations/deleteTravelLocation',{request : request}).success(function (response) {
                                    if (response.status == 1)
                                    {
                                        console.log("Remove travel City Response");
                                        console.log(response);
                                        reConnectSocket();
                                        var alertErrMsg = "Successfully deleted the location "+myLocationName;
                                        var errorResponse={status:true,message: alertErrMsg};
                                        $rootScope.addAlert(errorResponse);
                                        $window.scrollTo(0, 0);
                                        $rootScope.showloader = false;
                                        getAllTravelLocations();
                                        $rootScope.showloader = false;
                                    }


                                }).error(function () {
                                    $scope.errorMessage = "Please Try Again";
                                    $timeout(function () {
                                        $scope.errorMessage = false;
                                    }, 3000);
                                });
                    }
                }
    }

       //Location Category(home, travel) RADIO BUTTON Click
       $scope.locationCategoryChange  = function (myLocationId,locationCategory, event){
           $rootScope.showloader = true;
           $scope.primaryDisable = false;
           switchKey = event.currentTarget.id;
           switch(switchKey){
               case 'locationCategoryHomeCountry' :
                       alert("You can only select a CITY as a Home or Travel location, not a state or country");
                       getAllTravelLocations();
                       event.currentTarget.checked = false;
                       $rootScope.showloader = false;

               break;

               case 'locationCategoryTravelCountry' :

                       alert("You can only select a CITY as a Home or Travel location, not a state or country");
                       getAllTravelLocations();
                       event.currentTarget.checked = false;
                       $rootScope.showloader = false;
               break;

               case 'locationCategoryTravel' :
                       var locationCategory = "travel";
                       console.log("TRAVEl CLICk");
                       console.log($scope.myLocations);
                        for(var i=0; i< $scope.myLocations.length; i++){
                                if($scope.myLocations[i].id == myLocationId && $scope.myLocations[i].primaryLocation == 'primary'){
                                        alert("Your PRIMARY Home CANNOT be Travel City");
                                        //$window.location.reload();
                                        event.currentTarget.checked = false;
                                        getAllTravelLocations();
                                        $scope.myLocations[i].checked = false;
                                        console.log("$scope.myLocations[i] ==============");
                                        //console.log($scope.myLocations[i].locationCategory);
                                        //console.log($scope.myLocations[i]);
                                        //console.log(event.);

                                        $rootScope.showloader = false;
                                        //return false;
                                }
                                else if($scope.myLocations[i].id == myLocationId && $scope.myLocations[i].primaryLocation == 'primary' && $scope.myLocations[i].locationCategory == 'home'){
                                        alert("Your PRIMARY Home CANNOT be Travel City");
                                        //$window.location.reload();
                                        event.currentTarget.checked = false;
                                        getAllTravelLocations();
                                        $rootScope.showloader = false;
                                }
                                else if($scope.myLocations[i].id == myLocationId && $scope.myLocations[i].locationCategory == 'home'){
                                      request = {id: myLocationId, locationCategory: locationCategory};
                                      $http.post($rootScope.STATIC_URL + 'travelLocations/updateLocationCategory', {request: request}).success(function (response) {
                                        if (response.status == 1)
                                        {
                                            console.log("updateLocationCategory TRAVEL Response  ====!!!!!!!!!  !!!!!!!!!");
                                            console.log(response);
                                            getAllTravelLocations();
                                            $rootScope.showloader = false;
                                            }
                                        }).error(function () {
                                            $scope.errorMessage = "Please Try Again";
                                            $timeout(function () {
                                                $scope.errorMessage = false;
                                            }, 3000);
                                        });
                                }
                        }
                        console.log("After Inject===============");
                        console.log($scope.myLocations);
        break;

        case 'locationCategoryHome' :
                console.log("HOME CLICk");
                var locationCategory = "home";
                request = {id: myLocationId, locationCategory: locationCategory};
                console.log(request);
                $http.post($rootScope.STATIC_URL + 'travelLocations/updateLocationCategory', {request: request}).success(function (response) {
                    if (response.status == 1)
                    {
                        console.log("updateLocationCategory HOME Response  ====!!!!!!!!!  !!!!!!!!!");
                        console.log(response);
                        getAllTravelLocations();
                        $rootScope.showloader = false;
                    }
                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });
        break;
    }
}


       //Location Primary RADIO BUTTON Click
       $scope.locationPrimaryChange  = function (myLocationId,locationPrimary, event){
         $rootScope.showloader = true;
             if(event.currentTarget.id == "locationPrimaryCountry"){
                  alert("You can only select a CITY as a Primary location, not a state or country");
                  //$window.location.reload();
                  event.currentTarget.checked = false;
                  getAllTravelLocations();
                  $rootScope.showloader = false;
                  return false;
              }
              else{
                 for(var i=0; i< $scope.myLocations.length; i++){
                    if($scope.myLocations[i].id == myLocationId && $scope.myLocations[i].locationCategory == 'travel'){
                            alert("Your Travel City CANNOT be Primary Home");
                            //$window.location.reload();
                            event.currentTarget.checked = false;
                            //$scope.myLocations[i].checked = false;
                            console.log("$scope.myLocations[i].checked ----------------------------------+++++++++++++++++++++++");
                            console.log($scope.myLocations[i].checked);
                            getAllTravelLocations();
                            $rootScope.showloader = false;
                            return false;
                    }
                    else if($scope.myLocations[i].id == myLocationId && $scope.myLocations[i].locationCategory == 'home'){

                          console.log("PRIMARY CLICk");
                          console.log($scope.myLocations);
                            for(var i=0; i< $scope.myLocations.length; i++){
                              if($scope.myLocations[i].id == myLocationId){
                                   $scope.myLocations[i].primaryLocation = "primary";
                                    console.log("if        -------------------->>>>>>>>>>");
                                   console.log($scope.myLocations[i]);
                               }
                               else{
                                   $scope.myLocations[i].primaryLocation = "";
                                   console.log("else        -------------------->>>>>>>>>>");
                               }
                            }
                                            //$scope.primaryDisable = true;
                                            $scope.myLocations = $scope.myLocations;
                                            console.log("After Inject===============");
                                            console.log($scope.myLocations);

                                            request = {id: myLocationId};
                                            $http.post($rootScope.STATIC_URL + 'travelLocations/updateLocationPrimary', {request: request}).success(function (response) {
                                                if (response.status == 1)
                                                {

                                                    console.log("updateLocationPrimary Response");
                                                    console.log(response);
                                                    getAllTravelLocations();
                                                    $rootScope.showloader = false;
                                                }
                                            }).error(function () {
                                                $scope.errorMessage = "Please Try Again";
                                                $timeout(function () {
                                                    $scope.errorMessage = false;
                                                }, 3000);
                                            });
                                        }

                                }//For Loop Ends

             }

        }


        //Save Selected Miles
       /* $scope.locationMileChange  = function (myLocationId, locationMileSelect){
          $rootScope.showloader = true;
          if(locationMileSelect == 0){
            alert("Please Select a valid Mile");
                    //$scope.locationMileSelectError = "Please Select a valid Mile";
                    getAllTravelLocations();
                    $rootScope.showloader = false;
                }else{
                  request = {id: myLocationId, searchLocation: locationMileSelect};
                  $http.post($rootScope.STATIC_URL + 'travelLocations/updateSearchLocation', {request: request}).success(function (response) {
                    if (response.status == 1)
                    {
                        console.log("updateSearchLocation Response");
                        console.log(response);
                        getAllTravelLocations();
                        $rootScope.showloader = false;
                    }
                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });
            }
        }*/

        //Save Mylocations
      /*  $scope.mylocationsSave  = function (){
            $rootScope.showloader = true;
            //$route.reload();
            getAllTravelLocations();
        }*/




    });

/*===================================================================================================================================
 add City Country Controller
 ====================================================================================================================================*/
 userControllers.controller('addCityCountryCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout,$compile) {

  console.log("addCityCountryCtrl");

  var request                           = "";
  var selectCountryArray                = [];
  var selectedCountries                 = [];
  $scope.selectedCountryArray           = [];
  $scope.lat                            = undefined;
  $scope.lng                            = undefined;
  $scope.formattedAddress               = undefined;
  $scope.errorMessage                   = "";
  $scope.selectedCountryPresentErrorMsg = "";
  //$rootScope.showloader                 = true;
var cityView;
  //To get the countryname of address
  function getCountry(results)
        {

           for (var i = 0; i < $scope.autocomplete.getPlace().address_components.length; i++)
                {
                var shortname = $scope.autocomplete.getPlace().address_components[i].short_name;
                var longname = $scope.autocomplete.getPlace().address_components[i].long_name;
                var type = $scope.autocomplete.getPlace().address_components[i].types;
								if (type.indexOf("locality") != -1)
								{
											cityView=longname;
								}

								console.log("city"+ cityView);

							  if (type.indexOf("country") != -1)
                {
                        return longname;
                }

       }


     }
    $scope.$on('gmPlacesAutocomplete::placeChanged', function(results){
              var location = $scope.autocomplete.getPlace().geometry.location;
              $scope.lat = location.lat();
              $scope.lng = location.lng();
              console.log($scope.autocomplete.getPlace());
              console.log($scope.autocomplete);
              //var loc = getCountry(results);
              //console.log(getCountry(results));
              //console.log($scope.autocomplete.Ry[gm_accessors_].Rd.T);
              console.log($scope.autocomplete.getPlace().formatted_address);
              $scope.formattedAddress           = $scope.autocomplete.getPlace().formatted_address;
              $scope.formattedAddressCountry    = getCountry(results);

              //https://maps.google.com/maps?q=lng,lat&amp;z=14&amp;output=embed
              $scope.iframeSrc = "https://maps.google.com/maps?q="+location.lat()+","+location.lng()+"&z=14&output=embed";
              $scope.$apply();
    });
  console.log("======== $routeParams.travelLocationId =======");
  console.log($routeParams.travelLocationId);

  if($routeParams.travelLocationId){

                    //Select saved Country from travellocations table
                    request = {id : $routeParams.travelLocationId};
                    $http.post($rootScope.STATIC_URL + 'travelLocations/getTravelCountries',{request : request}).success(function (response) {
                        if (response.status == 1)
                        {
                            console.log("Saved Countries");
                            console.log(response);

                                //var jsonParse = JSON.parse(response.data.locationNames);
                                //console.log(jsonParse);
                                if(response.data.length > 0){
                                    console.log(response.data[0].locationNames.split(","));
                                    $scope.selectedCountries = response.data[0].locationNames.split(",");
                                }

                                //$rootScope.showloader = false;
                            }

                        }).error(function () {
                            $scope.errorMessage = "Please Try Again";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                        });

                     //Remove Selected Country from dropdown
                     $scope.removeAlreadySelectCountry  = function(item){
                         console.log("item Remove");
                         console.log(item);
                         $rootScope.showloader = true;

                         request = {id: $routeParams.travelLocationId, item: item};
                         $http.post($rootScope.STATIC_URL + 'travelLocations/removeTravelCountry',{request : request}).success(function (response) {
                            if (response.status == 1)
                            {

                                request = {id : $routeParams.travelLocationId};
                                $http.post($rootScope.STATIC_URL + 'travelLocations/getTravelCountries',{request : request}).success(function (response) {
                                    if (response.status == 1)
                                    {
                                        console.log("Saved Countries");
                                        console.log(response);

                                                                //var jsonParse = JSON.parse(response.data.locationNames);
                                                                //console.log(jsonParse);
                                                                if(response.data.length > 0){
                                                                    console.log(response.data[0].locationNames.split(","));
                                                                    $scope.selectedCountries = response.data[0].locationNames.split(",");
                                                                }

                                                            }

                                                        }).error(function () {
                                                            $scope.errorMessage = "Please Try Again";
                                                            $timeout(function () {
                                                                $scope.errorMessage = false;
                                                            }, 3000);
                                                        });
                                                        $rootScope.showloader = false;
                                                    }

                                                }).error(function () {
                                                    $scope.errorMessage = "Please Try Again";
                                                    $timeout(function () {
                                                        $scope.errorMessage = false;
                                                    }, 3000);
                                                });
                                            }



                                        }

                                        console.log(selectedCountries);

                                        $scope.changeCity = function (){
                                          console.log("========= Change-----");
                                          $scope.lat                            = undefined;
                                          $scope.lng                            = undefined;
                                          $scope.formattedAddress               = undefined;
                                          $scope.formattedAddressCountry        = undefined;
                                      }
                                      $scope.hideErrorMessage  = function (){
                                        console.log("========= Focus--3---");
                                        $scope.errorMessage                     = false;

                                    }


     //Add City as Travel location
     $scope.addCity  = function (lat, lng, formattedAddress, formattedAddressCountry){
     	$scope.exception_country_city = ['Singapore'];
         console.log("lat====="+lat);
         console.log("long====="+lng);
         console.log("address====="+formattedAddress);
         console.log("formattedAddressCountry====="+formattedAddressCountry);

         if(!lat && !lng && !formattedAddress){

            $scope.errorMessage = "please enter a valid location";
        }else{
        	    $scope.city = false;
        		//console.log("googale api "+JSON.stringify($scope.autocomplete.getPlace()));
        		angular.forEach($scope.autocomplete.getPlace().address_components, function(value, key) {
				  //console.log("googale value "+JSON.stringify(value));
				  	if( value.types.indexOf('administrative_area_level_1')!==-1){
				  		$scope.city = true;
				  	}

				  	if($scope.exception_country_city.indexOf(formattedAddress)!==-1){
				  		$scope.city = true;
				  	}
				});
                  if( $scope.city === false){
                  		console.log("error ---");
                  		$scope.errorMessage = "please do not enter country";

        			}else{
        					//Check Travel City is already present
						request = {
						    cityAddress: formattedAddress
						};
						console.log("Check Travel City is already present");
						console.log(request);
						$http.post($rootScope.STATIC_URL + 'travelLocations/checkTravelCityPresent', {
						    request: request
						}).success(function(response) {
						    console.log(response);
						    if (response.status == 1 && response.data.length == 0) {
						        console.log("If Part");
						        console.log("Add travel City Response");
						        console.log(response);

						        if ($routeParams.travelLocationId) {
						            console.log("routeParam Present");

						            //Update City
						            request = {
						                id: $routeParams.travelLocationId,
						                cityAddress: formattedAddress,
						                locationType: "city"
						            };
						            console.log(request);
						            $http.post($rootScope.STATIC_URL + 'travelLocations/updateTravelLocation', {
						                request: request
						            }).success(function(response) {
						                if (response.status == 1) {
						                    console.log("Update Country");
						                    console.log(response);
						                    //$scope.updateLcId = response.data.id;
						                    $location.path('/landingpage');
						                    //  $window.location.href = $rootScope.hashbang + "landingpage";

						                }


						            }).error(function() {
						                $scope.errorMessage = "Please Try Again";
						                $timeout(function() {
						                    $scope.errorMessage = false;
						                }, 3000);
						            });

						        } else {
						            //Add Travel Location
						            request = {
						                latitude: lat,
						                longitude: lng,
						                cityCountryname: formattedAddressCountry,
						                cityAddress: formattedAddress,
						                locationType: "city"
						            };
						            $http.post($rootScope.STATIC_URL + 'travelLocations/addTravelLocation', {
						                request: request
						            }).success(function(response) {
						                if (response.status == 1) {
						                    console.log("Add travel City Response");
						                    console.log(response);
						                    $location.path('/landingpage');
						                    //$window.location.href = $rootScope.hashbang + "landingpage";
						                }
						            }).error(function() {
						                $scope.errorMessage = "Please Try Again";
						                $timeout(function() {
						                    $scope.errorMessage = false;
						                }, 3000);
						            });
						        }

						    } else {
						        console.log("Else Part");
						        $scope.errorMessage = "Location already added";


						    }


						}).error(function() {
						    $scope.errorMessage = "Please Try Again";
						    $timeout(function() {
						        $scope.errorMessage = false;
						    }, 3000);
						});
        			}
              }

     }


     //Add Country as Travel location
     $scope.addCountry  = function (countryName){

         console.log("<<<<<<<<   $scope.travelLocationId >>>>>>>>>>");
         console.log($routeParams.travelLocationId);
         console.log("$scope.addCountry Enterde");
         console.log(countryName);
                 //$rootScope.showloader = true;
                        if($routeParams.travelLocationId){
                                    console.log("routeParam Present");
                                    if(countryName.length == 0){
                                             $scope.errorMessage = "Please Select Atleast one country";
                                    }else{
																			$location.path('/landingpage');
                                            //$window.location.href = $rootScope.hashbang + "landingpage";
                                                    //Update Country
                                                    request = {id : $routeParams.travelLocationId, countryName: countryName, locationType: "country"};
                                                    console.log(request);
                                                    $http.post($rootScope.STATIC_URL + 'travelLocations/updateTravelLocation',{request : request}).success(function (response) {
                                                        if (response.status == 1)
                                                        {
                                                            console.log("Update Country");
                                                            console.log(response);
                                                            //$scope.updateLcId = response.data.id;

                                                        }


                                                    }).error(function () {
                                                        $scope.errorMessage = "Please Try Again";
                                                        $timeout(function () {
                                                            $scope.errorMessage = false;
                                                        }, 3000);
                                                    });

                                    }
                                   //$rootScope.showloader = false;
                        }else{
                          console.log("routeParam Absent");
                          if(countryName.length == 0){
                              console.log("Length - == 0");
                              $scope.errorMessage = "Please select a country";
                          }else{
                            console.log("else --- part");

console.log("countryName --------------------============================");
console.log(countryName);
                            //Add Country
                            request = {countryName: countryName, locationType: "country"};
                            $http.post($rootScope.STATIC_URL + 'travelLocations/addTravelLocation',{request : request}).success(function (response) {

                                if (response.status == 1 && response.errMsg){
                                    $scope.selectedCountryPresentErrorMsg = "Country Already Selected";
                                }
                                else if (response.status == 1)
                                {
																	$location.path('/landingpage');
                                  //  $window.location.href = $rootScope.hashbang + "landingpage";
                                    console.log("Add Country");
                                    console.log(response);
                                    //$scope.updateLcId = response.data.id;
                                }


                            }).error(function () {
                                $scope.errorMessage = "Please Try Again";
                                $timeout(function () {
                                    $scope.errorMessage = false;
                                }, 3000);
                            });
                        }
                      //$rootScope.showloader = false;

                  }

              }

   //Select Country from dropdown
   $scope.selectCountryClick  = function(){
       console.log("//Select Country from dropdown");
       console.log(selectCountryArray);
       console.log(selectCountryArray.indexOf($scope.selectCountry));
       //$rootScope.showloader = true;
       if(selectCountryArray.indexOf($scope.selectCountry) < 0){
        $scope.selectedCountryPresentErrorMsg = false;
        selectCountryArray.push($scope.selectCountry);
        console.log($scope.selectCountry);
        console.log(selectCountryArray);
        $scope.selectedCountryArray =  selectCountryArray;
              //$rootScope.showloader = false;
          }
          else{
             console.log("Already Present");
             $scope.selectedCountryPresentErrorMsg = "Country Already Selected";
             //$rootScope.showloader = false;
         }


     }

   //Remove Selected Country from dropdown
   $scope.removeSelectCountry  = function(item){
     $rootScope.showloader = true;
     var index = $scope.selectedCountryArray.indexOf(item);
     $scope.selectedCountryArray.splice(index, 1);
     console.log($scope.selectedCountryArray);
     $rootScope.showloader = false;
 }



});

/*===================================================================================================================================
 Search Results Controller
 ====================================================================================================================================*/

userControllers.controller('searchResultsCtrl', function ($scope, $routeParams,$timeout, $rootScope, $http, $location, $window, $compile) {

    console.log("Search Results Controller");
    //console.log($rootScope.unreadInboxMailCount.urMailCount);
    //console.log(latLngloggedUser);
    //console.log($scope.latLngLoggedUser);
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.rowsPerPage = 5;
    $scope.errorMessage = "";
    $scope.STATIC_SAILS_URL  = $rootScope.STATIC_SAILS_URL;
    $rootScope.showloader = true;
    $scope.SearchResultOnlineUsers = {};

    $scope.getSearchResultOnlineUsers = function(data){
        // crete user Ids object
        var uidObj = {};
        if(data && data.length > 0){
            for(var key in data){
                if(data[key].userId){
                    uidObj[data[key].userId] = data[key].userId;
                }
            }
            console.debug('data');
            console.debug(data);
            console.log(uidObj);
            try{
                getSearchResultOnlineUsers(uidObj);
            }catch(e){
                // socket error may happen
                console.log(e);
            }
        }else{
            console.log('No data');
        }
    }
    $scope.setSearchResultOnlineUsers = function(list){
        $scope.$apply(function() {
            console.log('setSearchResultOnlineUsers===================>');
            console.log(list);
            $scope.SearchResultOnlineUsers = list;
        });
    }
    setSearchResultOnlineUsers = $scope.setSearchResultOnlineUsers;

    //Seach using user name
    $scope.params= $window.localStorage.search
    $scope.searchCriteria=JSON.parse($window.localStorage.search);

//Search Result function for tinder
function mobileSearchResultFunction(){
    //***code for tinter
    //var K=$rootScope.searchResults;
    console.log("isMobile() ++++++++++++++++++++++++++");
    console.log(isMobile());
    var searchResultsMobileArray=[];
    for(var i = 0; i <= 10; i++){
            console.log('concatinate');
            if(searchResultsMobileArray.length != 0){
                    searchResultsMobileArray = $rootScope.searchResults.concat(searchResultsMobileArray);
            }
            else{
                    searchResultsMobileArray = $rootScope.searchResults.concat($rootScope.searchResults);
            }
    }
   console.log("result length"+ $rootScope.searchResults.length);
//   $rootScope.searchResultsMobile = searchResultsMobileArray;
 $rootScope.searchResultsMobile =$rootScope.searchResults;

}
                var switchKey = $scope.searchCriteria.searchField;
                switch(switchKey){

                        case 'city' :
                                     console.log("case CITYYYYYYY>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<   $scope.searchCriteria.cityLat");
                                     console.log($scope.searchCriteria.cityLat);
                                     console.log($scope.searchCriteria.cityName);
                                     console.log($scope.searchCriteria.cityLocType);
                                    if($scope.searchCriteria.cityLocType == "city")
                                    {
                                            var R               = 3958.756;//For miles
                                            var pi              = 3.14159;
                                            var maxLat          = parseFloat($scope.searchCriteria.cityLat) + ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
                                            var minLat          = parseFloat($scope.searchCriteria.cityLat) - ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
                                            var maxLong         = parseFloat($scope.searchCriteria.cityLng) + (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);
                                            var minLong         = parseFloat($scope.searchCriteria.cityLng) - (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);


                                            console.log("maxLat =========================================================}}}}}}}");
                                            console.log(maxLat);
                                            console.log(minLat);
                                            console.log(maxLong);
                                            console.log(minLong);
                                    }
                                           /*
                                            var R               = 3958.756;//For miles
                                            var pi              = 3.14159;
                                            var maxLat          = parseFloat($scope.searchCriteria.cityLat) + ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
                                            var minLat          = parseFloat($scope.searchCriteria.cityLat) - ((parseFloat($scope.searchCriteria.cityMile/R))*(180/Math.PI));
                                            var maxLong         = parseFloat($scope.searchCriteria.cityLng) + (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);
                                            var minLong         = parseFloat($scope.searchCriteria.cityLng) - (parseFloat($scope.searchCriteria.cityMile)/R/Math.cos(parseFloat($scope.searchCriteria.cityLat) * (Math.PI/180)))*(180/Math.PI);
                                            */

                                            //Radius Search Results
                                            var request = {maxLat: maxLat, minLat: minLat, maxLong: maxLong, minLong: minLong, cityname: $scope.searchCriteria.cityName, cityLocType: $scope.searchCriteria.cityLocType};
                                            $http.post($rootScope.STATIC_URL + 'searchResults/cityRadiusSearch',{request: request}).success(function (response) {
                                                if (response.status == 1)
                                                {
                                                        $scope.getSearchResultOnlineUsers(response.data);
                                                        $rootScope.showloader = false;
                                                        //$rootScope.showloader = false;
                                                        console.log("cityRadiusSearch");
                                                        console.log(response);
                                                        $rootScope.searchResults = response.data;

                                                         /* ============================  group the ng-repeat array into two  ========================================= */

                                                            var indexedAdProfStatus = [];


                                                            $scope.adprofStatusToFilter = function() {
                                                                indexedAdProfStatus = [];
                                                                return $rootScope.searchResults;
                                                            }

                                                            $scope.filterSearchResults = function(sResult) {
                                                                var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
                                                                if (adProfStatusIsNew) {
                                                                    indexedAdProfStatus.push(sResult.adProfStatus);
                                                                }
                                                                return adProfStatusIsNew;
                                                            }




                                                        /* =============================  group the ng-repeat array into two   ======================================== */

                                                    if(isMobile() == true){
                                                         mobileSearchResultFunction();
                                                    }

                                                    for(var i=0;i<=$rootScope.searchResults.length;i++){
                                                            console.log("i");
                                                            console.log(i);
                                                            console.log($rootScope.searchResults[i]);
                                                            if($rootScope.searchResults[i].favourite != null){
                                                               $rootScope.searchResults[i].unFavourite=true;
                                                               $rootScope.searchResults[i].favourite=true;
                                                           }
                                                           else{
                                                               $rootScope.searchResults[i].favourite=false;
                                                               $rootScope.searchResults[i].unFavourite=false;
                                                           }
                                                           if($rootScope.searchResults[i].blocked != null){
                                                               $rootScope.searchResults[i].blocked=true;
                                                               $rootScope.searchResults[i].unBlock=true;
                                                           }
                                                           else{
                                                               $rootScope.searchResults[i].blocked=false;
                                                               $rootScope.searchResults[i].unBlock=false;
                                                           }
                                                           if($rootScope.searchResults[i].adProfStatus == 'adActive'){
                                                                    $rootScope.searchResults[i].adProfTitle = 'Advertising Members';
                                                           }else{
                                                                    $rootScope.searchResults[i].adProfTitle = 'Balance of Members';
                                                           }
                                                       }





                                                }

                                            }).error(function () {
                                                $scope.errorMessage = "Please Try Again";
                                                $timeout(function () {
                                                    $scope.errorMessage = false;
                                                }, 3000);
                                            });
                        // $rootScope.showloader = false;
                        break;

                        case 'country':
                                            request = {selectedCountryArray: $scope.searchCriteria.selectedCountryArray};
                                            $http.post($rootScope.STATIC_URL + 'searchResults/countrySearch',{request: request}).success(function (response) {
                                                if (response.status == 1)
                                                {
                                                    $scope.getSearchResultOnlineUsers(response.data);
                                                    $rootScope.showloader = false;
                                                    console.log("country Search Response");
                                                    console.log(response);
                                                    $rootScope.searchResults = response.data;

                                                    /* ============================  group the ng-repeat array into two  ========================================= */

                                                            var indexedAdProfStatus = [];

                                                            $scope.adprofStatusToFilter = function() {
                                                                indexedAdProfStatus = [];
                                                                return $rootScope.searchResults;
                                                            }

                                                            $scope.filterSearchResults = function(sResult) {
                                                                var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
                                                                if (adProfStatusIsNew) {
                                                                    indexedAdProfStatus.push(sResult.adProfStatus);
                                                                }
                                                                return adProfStatusIsNew;
                                                            }

                                                 /* =============================  group the ng-repeat array into two   ======================================== */

                                                if(isMobile() == true){
                                                       mobileSearchResultFunction();
                                                }
                                                    for(var i=0;i<=$rootScope.searchResults.length;i++){
                                                        console.log("i");
                                                        console.log(i);
                                                        console.log($rootScope.searchResults[i]);
                                                        if($rootScope.searchResults[i].favourite != null){
                                                           $rootScope.searchResults[i].unFavourite=true;
                                                           $rootScope.searchResults[i].favourite=true;
                                                       }
                                                       else{
                                                           $rootScope.searchResults[i].favourite=false;
                                                           $rootScope.searchResults[i].unFavourite=false;
                                                       }
                                                       if($rootScope.searchResults[i].blocked != null){
                                                               $rootScope.searchResults[i].blocked=true;
                                                               $rootScope.searchResults[i].unBlock=true;
                                                           }
                                                           else{
                                                               $rootScope.searchResults[i].blocked=false;
                                                               $rootScope.searchResults[i].unBlock=false;
                                                           }

                                                        if($rootScope.searchResults[i].adProfStatus == 'adActive'){
                                                                    $rootScope.searchResults[i].adProfTitle = 'Advertising Members';
                                                        }else{
                                                                    $rootScope.searchResults[i].adProfTitle = 'Balance of Members';
                                                        }

                                                   }

                                                }


                                               }).error(function () {
                                                $scope.errorMessage = "Please Try Again";
                                                $timeout(function () {
                                                    $scope.errorMessage = false;
                                                }, 3000);
                                            });
                            //$rootScope.showloader = false;


                        break;

                        default:

                                //Get min, max latitude and min,max longitude of LoggedUser
                                $http.post($rootScope.STATIC_URL + 'searchResults/getLatLngLoggedUser').success(function (response) {
                                    if (response.status == 1)
                                    {
                                        console.log(response);
                                        console.log("---------------------------------------------++++++++++++++++++++++++++");
                                        $scope.latLngLoggedUser         = response.data;
                                        $scope.milesSearchFromsettings  = response.dataMiles;
                                        console.log("=========$scope.latLngLoggedUser==========");
                                        console.log($scope.latLngLoggedUser);
                                        console.log("=========$scope.milesSearchFromsettings==========");
                                        console.log($scope.milesSearchFromsettings);
                                        console.log("Get min, max latitude and min,max longitude of LoggedUser");

                                        var R               = 3958.756;//For miles
                                        var pi              = 3.14159;
                                        var maxLat          = parseFloat($scope.latLngLoggedUser.latitude) + ((parseFloat($scope.milesSearchFromsettings/R))*(180/Math.PI));
                                        var minLat          = parseFloat($scope.latLngLoggedUser.latitude) - ((parseFloat($scope.milesSearchFromsettings/R))*(180/Math.PI));
                                        var maxLong         = parseFloat($scope.latLngLoggedUser.longitude) + (parseFloat($scope.milesSearchFromsettings)/R/Math.cos(parseFloat($scope.latLngLoggedUser.latitude) * (Math.PI/180)))*(180/Math.PI);
                                        var minLong         = parseFloat($scope.latLngLoggedUser.longitude) - (parseFloat($scope.milesSearchFromsettings)/R/Math.cos(parseFloat($scope.latLngLoggedUser.latitude) * (Math.PI/180)))*(180/Math.PI);



                                        var onSearchCallback = function (response){
                                            console.log('onSearchCallback...........................');
                                            if (response.status == 1)
                                            {
                                                $scope.getSearchResultOnlineUsers(response.data);
                                                $rootScope.showloader = false;
                                                $scope.searchdata=JSON.parse($window.localStorage.search);
                                                $rootScope.searchResults = response.data;

                                                /* ============================  group the ng-repeat array into two  ========================================= */

                                                            var indexedAdProfStatus = [];

                                                            $scope.adprofStatusToFilter = function() {
                                                                indexedAdProfStatus = [];
                                                                return $rootScope.searchResults;
                                                            }

                                                            $scope.filterSearchResults = function(sResult) {
                                                                var adProfStatusIsNew = indexedAdProfStatus.indexOf(sResult.adProfStatus) == -1;
                                                                if (adProfStatusIsNew) {
                                                                    indexedAdProfStatus.push(sResult.adProfStatus);
                                                                }
                                                                return adProfStatusIsNew;
                                                            }

                                                  /* =============================  group the ng-repeat array into two   ======================================== */

                                                if(isMobile() == true){
                                                       mobileSearchResultFunction();
                                                }

                                                for(var i=0;i<$rootScope.searchResults.length;i++){
                                                    console.log("i");
                                                    console.log(i);
                                                    //console.log($rootScope.searchResults);
                                                    if($rootScope.searchResults[i].favourite != null){
                                                       $rootScope.searchResults[i].unFavourite=true;
                                                       $rootScope.searchResults[i].favourite=true;
                                                   }
                                                   else{
                                                       $rootScope.searchResults[i].favourite=false;
                                                       $rootScope.searchResults[i].unFavourite=false;
                                                   }

                                                   if($rootScope.searchResults[i].blocked != null){
                                                       $rootScope.searchResults[i].blocked=true;
                                                       $rootScope.searchResults[i].unBlock=true;
                                                   }
                                                   else{
                                                       $rootScope.searchResults[i].blocked=false;
                                                       $rootScope.searchResults[i].unBlock=false;
                                                   }

                                                   if($rootScope.searchResults[i].adProfStatus == 'adActive'){
                                                                    $rootScope.searchResults[i].adProfTitle = 'Advertising Members';
                                                   }else{
                                                            $rootScope.searchResults[i].adProfTitle = 'Balance of Members';
                                                    }

                                               }





                                               $scope.fav="Favourite";
                                               $scope.unFav="Un-Favourite";
                                               // $window.localStorage.searchResults =  JSON.stringify($rootScope.searchResults);

                                           }else if(response && response.data && response.data.length <=0 ){

                                            $scope.searchMessage="No matching data"
                                           }
                                            $rootScope.searchResults2 = $rootScope.searchResults;

                                        }

                                        $scope.searchResultUpdate = function(response){
                                            console.log('in searchResultUpdate...............................');
                                            $scope.$apply(function() {
                                                console.log('in after apply...............................');
                                                onSearchCallback(response);
                                            });
                                        }
                                        searchResultUpdate = $scope.searchResultUpdate; // RHS fn defined in chat-handler.js

                                        if($scope.searchCriteria.searchField == 'online' ){
                                            console.log('in online...............................');
                                            searchOnlineUsers();
                                        }else{
                                           //Radius Search Results
                                           var requestLatLng = {maxLat: maxLat, minLat: minLat, maxLong: maxLong, minLong: minLong};
                                           //var request1=JSON.stringify(request1);
                                           //var request = request1.concat($scope.params);
                                           console.log($scope.params);
                                           console.log(requestLatLng);

                                           //console.log(JSON.stringify($scope.params).split('{'));


                                           //var jsonArray1 = "["+$scope.params+"]";
                                           //var jsonArray2 = "["+request1+"]";
                                           //console.log(jsonArray1);
                                           //console.log(jsonArray2);
                                           //var request = jsonArray1.concat(jsonArray2);
                                           //var request = JSON.stringify($.extend(false,{},request1,$scope.params));
                                           /*console.log("============ $.extend( true, $scope.params, request1 ) =================");

                                           var a = {"hello1":"uuuuu1"};
                                           var b = {"hello2":"uuuuu2", "hello3":"uuuuu3"};
                                           console.log(a);
                                           console.log(b);
                                           console.log(angular.merge(a, b));
                                           console.log("============ Merge a b =================");*/
                                            console.log(JSON.parse($scope.params));
                                            console.log(angular.merge(JSON.parse($scope.params), requestLatLng));
                                           //console.log($.extend( true, request1,$scope.params));
                                           //console.log(request);
                                           var request = angular.merge(JSON.parse($scope.params), requestLatLng);

                                            $http.post($rootScope.STATIC_URL + 'searchResults/commonSearch',{request : request}).success(function (response) {
                                                console.log("$rootScope.showloader =======>>>>");
                                                console.log(response);
                                                onSearchCallback(response)
                                            }).error(function () {
                                                $scope.errorMessage = "Please Try Again";
                                                $timeout(function () {
                                                    $scope.errorMessage = false;
                                                }, 3000);
                                            });
                                        }


                                       }
                                      }).error(function () {
                                            $scope.errorMessage = "Please Try Again";
                                            $timeout(function () {
                                                $rootScope.errorMessage = false;
                                            }, 3000);
                                        });

                        break;



                }



    //$rootScope.searchResults     = $window.localStorage.searchResults;

   // console.log($rootScope.searchResults);
   var searchResults        = $rootScope.searchResults;
   var profilePic           = $rootScope.profilePic;

/*   $scope.refreshTinder = function(){
        $rootScope.searchResults2 = $rootScope.searchResults;
        for(var i = 0; i <= 10; i++){
            $rootScope.searchResults2.concat($rootScope.searchResults);
        }
   };*/

    //*** alert for not able to post
    $scope.alertPostNot = function(username){
        var reviewedOnName=username;
        alert("You must have received (and read) at least one e-mail from "+reviewedOnName+" within the past 30 days to write a review");
    }


    //*** function to add as favourite  searchresult page
    $scope.addtofavourite= function(id,name,email,index){
        console.log("$$$make favourite");
        var favName=name;
        var messageFav="<strong>" + favName+"</strong> has been marked as your favorite";
        console.log("**************"+favName);

        var params = {
            favId: id,
            favEmail:email
        };

        if(id && !$rootScope.searchResults[index].blocked==true){
          $http.post($rootScope.STATIC_URL + 'users/addToFavourite', params).success(function (response) {
           console.log(response);
           var Successresponse={status:true,message:messageFav};
           $rootScope.addAlert(Successresponse);
           $rootScope.searchResults[index].favourite=true;
           $rootScope.searchResults[index].unFavourite=true;


       }).error(function (err) {
        console.log("ERROR" + err);
    });
   }
   //test code
      else if(id && $rootScope.searchResults[index].blocked==true ){
        alert(favName+ " is in your blocked list. So you cant make him favorite ");
      }
   //upto this
};
    ///*** function to make as un-favourite   search result page
    $scope.makeUnfavourite=function(id,favusername,index){
        console.log("username" +favusername);
        console.log("favUserId"+id);
        var favUserId=id;
        var favName=favusername;
        var messageFav="<strong>" + favName+"</strong> has been removed from your favorites list";
        console.log(favUserId);
        var params = {
            favUserId:id
        };
        if(favUserId){
            $http.post($rootScope.STATIC_URL + 'users/makeUnFavourite', params).success(function(response){
                $scope.favHide=response;
                console.log(response);
                console.log("success");
                var Successresponse={status:true,message:messageFav};

                $rootScope.addAlert(Successresponse);

                $rootScope.searchResults[index].favourite=false;
                $rootScope.searchResults[index].unFavourite=false;
            }).error(function(err){
                console.log("Error"+err);
            });
        }
    };

    /*Block user for searchresult page*/
    $scope.blockUser = function(blockUserId,username,index,blockEmail)
    {

        console.log("index to unbloc"+index);

        var favName=username;
        var messageFav="<strong>" + favName+"</strong> has been blocked!";
        if(blockUserId && !$rootScope.searchResults[index].favourite==true)
        {
           $http.post($rootScope.STATIC_URL + 'users/blockAUser', {blockedUserId:blockUserId,blockedusremail:blockEmail}).success(function (response){
               if(response.status==1)
               {
                 var Successresponse={status:true,message:messageFav};
                 $rootScope.addAlert(Successresponse);
                 console.log($rootScope.searchResults[index]);
                 $rootScope.searchResults[index].unBlock=true;
                 $rootScope.searchResults[index].blocked=true;
             }
             else
             {
              $scope.unBlock=false;
              $scope.blocked=false;
          }

      }).error(function (err) {
        console.log("ERROR" + err);
    });
  }
  else if(blockUserId && $rootScope.searchResults[index].favourite==true){
    alert(favName+" is in your favorite list. So you cant block him ");
  }

}
/*un-block a user for searchresult page*/
$scope.makeUnBlock=function(blockedUser,username,index){
    $scope.unblockUserName=username;
    var favName=username;
    var messageFav="successfully Un-blocked "+favName+"!";
    $scope.showBlockedUser=true;
    var params = {
        blockedUserId:blockedUser
    };
    if(blockedUser){
        $http.post($rootScope.STATIC_URL + 'users/unblockAUser', params).success(function(response){
          if(response.status==1)
          {
            var Successresponse={status:true,message:messageFav};
            $rootScope.addAlert(Successresponse);

            $rootScope.searchResults[index].unBlock=false;
            $rootScope.searchResults[index].blocked=false;

            console.log(response);

            console.log("success");
        }


    }).error(function(err){
        console.log("Error"+err);
    });
}
};



/*
    $scope.$on("$destroy", function(){
         console.log("Destroying Controller");
         delete $window.localStorage.search;
    });
*/


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   */
        $scope.composeMailPopup  = function (userIdTo, usernameTo){
            console.log(userIdTo);
            console.log(usernameTo);
            $scope.compRecId            = userIdTo;
            $scope.composeTo            = usernameTo;
        }
       /* $scope.popupMailSubmit  = function (popupSubjectTo, popupMessageTo){

            console.log("popup submit");
            console.log(popupSubjectTo);
            console.log(popupMessageTo);
            console.log($scope.$parent.popupMessageTo);
            $('#mailFromSearchResult').modal('hide');
        }*/




        $scope.popupMailClose = function () {
                $scope.composeSubject               = "";
                $scope.composeMessage               = "";
                $scope.errorMessageComposeMail      = "";
        }

// ComposeMail
$scope.popupMailSubmit = function () {


     $http.post($rootScope.STATIC_URL + 'mail/distinctUserMailLimit').success(function (response) {
             if (response.status == 1 && response.message == "failure")
              {
                   //$( "#chat_window_common" ).hide();
                   //$scope.closeComposeMailTab();
                   console.log("Limmmmmmmmmmmmmmmmmmmmmmmmmmmitttttttttttttttttttt");
                   $scope.errorMessageComposeMail = "Mail Limit Exceeded";
                   $rootScope.disableButton = false;

              }else{

                   if(!$scope.composeMessage){
                                $scope.errorMessageComposeMail = "Please enter a message and send";
                                $rootScope.disableButton = false;
                    }else{

                            if(!$scope.composeSubject){
                                composeSubject = "No Subject";
                            }

                        $rootScope.disableButton = true;
                        console.log("Welcome to draftMail");
                        var fd                      = new FormData();
                        var composeTo               = $scope.composeTo;
                        var composeSubject          = $scope.composeSubject;
                        var composeMessage          = $scope.composeMessage;
                        var receiverId              = $scope.compRecId;
                        console.log($scope.compRecId);
                        console.log(composeSubject);
                        console.log(composeMessage);
                        $scope.successMessageCommonMail = "Sending";
                       // var replyMailStatus;// To save reply as sent
                        var files = [];
                        if($scope.replyFileFinalArray){ // Selected Images in Reply Part
                              console.log("Entered $scope.replyFileFinalArray ==========))))))))) ");
                                for (var i = 0; i < $scope.replyFileFinalArray.length; i++) {

                                    var fileType    = $scope.replyFileFinalArray[i].type;
                                    fileType        = fileType.split("/");
                                    console.log(fileType);
                                    if(fileType[0] === "image"){
                                       files.push($scope.replyFileFinalArray[i]);
                                    }else{
                                        $scope.errorMessageComposeMail = "Please select an Image file";
                                        $timeout(function () {
                                            $scope.errorMessageComposeMail = false;
                                        }, 3000);
                                        return false;
                                    }


                                }
                                console.log("files Reply Attach");
                                console.log(files);
                        }

                       var replyMailStatus = "sent";

                            //console.log("files >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                            //console.log(files);
                            fd.append('composeTo', composeTo);
                            fd.append('composeSubject', composeSubject);
                            fd.append('composeMessage', composeMessage);
                            fd.append('receiverId', receiverId);
                            fd.append('replyMailStatus', replyMailStatus);
                            fd.append('sendMailPage', 'true'); // To identify other than draftmail
                            //fd.append('entryId', entryId);

                           // fd.append('entryId', entryId);
                            if (files) {
                                for (var i = 0; i < files.length; i++) {
                                    fd.append('attachments', files[i]);
                                }
                            }

                    $http.post($rootScope.STATIC_URL + 'mail/saveMail', fd, {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}

                    }).success(function (response) {
                                    console.log(response);
                                    if (response.status == 1)
                                    {
                                                    $rootScope.disableButton = false;
                                                   //var sendMailSuccessMsg = "Successfully send message to "+$scope.composeTo;
                                                    //var Successresponse={status:true,message:sendMailSuccessMsg};
                                                    $('#mailFromSearchResult').modal('hide');
                                                    $scope.successMessageCommonMail = "Your email has been sent to "+$scope.composeTo;

                                                    $scope.composeMessage = "";
                                                    //$window.location.reload();
                                                    $scope.composeTo            = "";
                                                    $scope.composeSubject       =  "";
                                                    $scope.composeMessage       = "";
                                                    $scope.compRecId            =  "";
                                                    $('.xax').hide();
                                                    $('#reply').show();
                                                    console.log(event);

                                                    console.log(event.replyFileFinalArray);
                                                    $('#appendReplyAttachFile .replyAttachOuter').remove();
                                                    //$scope.successMessageComposeMail = "Your message has been sent";
                                                    //$scope.successMessageCommonMail = "Your message has been sent";
                                                    $timeout(function () {
                                                       // $scope.successMessageComposeMail = false;
                                                       //$window.location.href = $rootScope.hashbang + "mailbox/inbox";
                                                       $scope.successMessageCommonMail = false;

                                                    }, 3000);

                                                    if(event.replyFileFinalArray){//Only For Reply Mail Success
                                                            console.log($scope.replyFileFinalArray);
                                                            $scope.replyFileFinalArray = "";
                                                    }



                                    }



                    })
                    .error(function () {
                        $scope.errorMessage = "Please Try Again";
                        $timeout(function () {
                            $scope.errorMessage = false;
                        }, 3000);
                    });


                    }
         }
    });

  }//Draft Mail Ends


     // Reply Attach

  $scope.replyAttach = function (event) {
                //var i = 0;
                console.log("replyAttach ---- >");
                console.log(event.files);
                console.log(event.target.files);
                console.log("tmppath >>>>>>>");
                console.log(tmppath);

                var replyFiles = [];
                var replyFileArray =[];
       // $scope.replyFileFinalArray =[];

       var attachReplyElement = angular.element(document.querySelector('#appendReplyAttachFile'));

       for (var i = 0; i < event.target.files.length; i++) {

        var tmppath = URL.createObjectURL(event.target.files[i]);
                             // var file = event.files[i];
                             if(!$scope.replyFileFinalArray){
                                replyFileArray.push(event.target.files[i]);
                                $scope.replyFileFinalArray = replyFileArray;
                                /* var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img style="width:100px;height:100px;" class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1">' +
                                                                        '<button id="deleteReplyAttach" class="btn btn-primary" ng-click="removeReply('+$scope.replyFileFinalArray.length+')">' +
                                                                            '<i class="fa fa-trash"></i>' +
                                                                        '</button>' +
                                                                '</div>' +
                                                                '</div>';*/
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            else{
                                                                replyFileArray = $scope.replyFileFinalArray;
                                                                replyFileArray.push(event.target.files[i]);
                                                                $scope.replyFileFinalArray = replyFileArray;
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            console.log("$scope.replyFileArray1 Multiple=======");
                                                            console.log($scope.replyFileFinalArray);

                                                        }

                                                        console.log("........Last and Final $scope.ecount...........");
                                                        console.log($scope.ecount);

            //}//For Multiple Files

   }//Main Function ENDS

   $scope.removeReply = function(item) {
            console.log("Clicked Remove item =======================------------");
            var selectItem = $scope.replyFileFinalArray[item-1];
            $scope.replyFileFinalArray.splice(item-1, 1);
            console.log($scope.replyFileFinalArray);
        }



/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    */
console.log("-----------------------------+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---------------------");
//console.log(newFactory.method1(arg));


});

/*===================================================================================================================================
 Add New Blog Controller   -----
 ====================================================================================================================================*/
 userControllers.controller('addUserBlogCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window) {

    console.log("addUserBlogCtrl");
    $scope.errorMessage = "";
    var request = "";


    // Image
    $scope.pickImage  = function (_this,type){
        $rootScope.uploadImage(_this,type,function(response){
            if (response.status === 1)
            {
                $scope.message= response.data;
                console.log(response.data);
            } else {
               $scope.errorMessage = "Error in updating user fields.";
           }
       });
    },
    $scope.unlinkImage  = function (file,id,type){
        $rootScope.deleteImage(file,id,type,function(response){
            if (response.status == 1)
            {
                $scope.message = response.data;
                console.log(response.data);

            } else {
               $scope.errorMessage = "Error in deleting";
           }
       });
    },
    //Add New Blog
    $scope.addUserBlog = function () {
        $scope.errorMessage = "";

        var fd = new FormData();
        var fd1 = new FormData();
        var title = $scope.newTitle;
         console.log("blog short desc");
    console.log($scope.shortDescription);
        var description = $scope.newDescription;
        var featuredImage = $scope.newFeaturedImage;

        if (!title && !description) {
            $scope.errorMessage = "Please Enter all fields";
        }
        else if (!title || !isNaN(title)) {
            $scope.errorMessage = "Please Enter a valid Title";
        }
        else if (!description) {
            $scope.errorMessage = "Please Enter a Description";
        }
         else if(!$scope.shortDescription){
             $scope.errorMessage = "Please Enter a Short Description";
         }
        else
        {
             $rootScope.showloader = true;
             $scope.buttonDisabled = true;
            fd.append('title', title);
            fd.append('description', description);
            fd.append('shortDesc',$scope.shortDescription);
            fd1.append('attachments',featuredImage);

            $http.post($rootScope.STATIC_URL + 'blog/uploadImage',fd1,{
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).success(function (response) {
                fd.append('featuredImage',response.data[0].fname);
                if (response.status === 1)
                {

                    $http.post($rootScope.STATIC_URL + 'blog/addBlog', fd, {
                        transformRequest: angular.identity,
                        headers: {'Content-Type': undefined}

                    }).success(function (response) {
                     $rootScope.showloader = false;
                     $scope.buttonDisabled = false;
                     if (response.status == 1)
                     {
                        $window.history.back();

                    }
                }).error(function () {
                 $rootScope.showloader = false;
                 $scope.buttonDisabled = false;
                 $scope.errorMessage = "Please Try Again";
             });
            }
        });


        }

    }

});

/*===================================================================================================================================
 blogListCtrl
 ====================================================================================================================================*/

 userControllers.controller('blogListCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $compile, $timeout) {

    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    //$scope.pageSize = 2;
    //$scope.rowsPerPage = 2;
    $scope.rowsPerPage = 5;
    $scope.errorMessage = "";


    //get all Blog List
    $http.post($rootScope.STATIC_URL + 'blog/getBlogList').success(function (response) {
        console.log(response);
        if (response.status == 1)
        {
            $scope.blogList = response.data;
            $scope.blogFeaImage= Config.STATIC_URL+'/images/blog/';
            console.log(response.data);
            /* $scope.numberOfPages = function () {
             return Math.ceil(($scope.blogs).length / $scope.pageSize);
             }
             */

         }

     }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });


 });

/*===================================================================================================================================
 blogInDetailCtrl
 ====================================================================================================================================*/

 userControllers.controller('blogInDetailCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $compile, $timeout) {

    console.log("blogInDetailCtrl -->");
    $rootScope.adminNavigation = 1;
    $scope.currentPage = 0;
    $scope.pageSize = 5;
    $scope.errorMessage = "";
    $scope.blogId = "";

    var request;
    request = {blogId: $routeParams.blogId};

    //get Blog Details
    $scope.getBlogcommentList = function (blogId) {
    	console.log("****getBlogcommentList***");
    	request.blogId = blogId;
    $http.post($rootScope.STATIC_URL + 'blog/getBlogcommentList', {request: request}).success(function (response) {
        if (response.status == 1)
        {
            $scope.blogComments = response.data;
            $scope.myId=$window.localStorage.uid;

        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });
}

    //get Blog Details
    $http.post($rootScope.STATIC_URL + 'blog/getBlogDetails', {request : request}).success(function (response) {
        if (response.status == 1)
        {
             if(response.data.blogStatus==='active'){
             $scope.blogDetails = response.data;
             $scope.blogId = response.data.id;

            $scope.blogFeaImage= Config.STATIC_URL+'/images/blog/'+response.data.featuredImage;
            console.log($scope.blogFeaImage);
            console.log("****BlogDetails***");
            console.log($scope.blogDetails.blogStatus);
            console.log($scope.blogId);
            $scope.getBlogcommentList($scope.blogId);
       }
       else{
        $scope.inactiveBlog="This blog is not active now!";
       }
    }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });

    //get all Blog Comment List
   
    /*$http.post($rootScope.STATIC_URL + 'blog/getBlogcommentList', {request: request}).success(function (response) {
        if (response.status == 1)
        {
            $scope.blogComments = response.data;
            $scope.myId=$window.localStorage.uid;

        }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });*/


//Add a comment against a Blog
$scope.addComment = function () {

    //request = {blogId: $routeParams.blogId, comment: $scope.blogComment};
    request = {blogId: $scope.blogId, comment: $scope.blogComment};
    $http.post($rootScope.STATIC_URL + 'blog/addBlogComment', {request: request}).success(function (response) {
        if (response.status == 1)
        {
                $scope.blogComment = '';
                //get all Blog Comment List
                $http.post($rootScope.STATIC_URL + 'blog/getBlogcommentList', {request: request}).success(function (response) {
                    console.log(response);
                    if (response.status == 1)
                    {
                        $scope.blogComments = response.data;
                         $scope.myId=$window.localStorage.uid;

                    }

                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                });


                $scope.blogComment = "";
            }

    }).error(function () {

            $scope.errorMessage = "Please Try Again";
            $timeout(function () {
                $scope.errorMessage = false;
            }, 3000);

    });

}


});
//Cancel Subscription

 userControllers.controller('cancelServiceCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $filter, $compile, $timeout) {

    var userId = $window.localStorage.uid;
    var email = JSON.parse($window.localStorage.user).email;
     var username = JSON.parse($window.localStorage.user).username;
    $scope.cancelService = function (validatedData) {
/*
        if (validatedData === true)
        {*/
            $rootScope.showloader = true;

            $rootScope.buttonDisabled = true;
                    var reason= $scope.cancelReason;
                    if(reason=='undefined')
                    {
                        reason='';
                    }

                $http.post($rootScope.STATIC_URL + 'subscription/cancelService', {reason: reason, userId:userId, email:email,username:username}).success(function (response) {
                        $rootScope.showloader = false;
                    if (response.status == 1)
                    {
                        console.log("success Update");
                        console.log(response.message);
                        $rootScope.addAlert(response);
                    }
                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                    $timeout(function () {
                        $scope.errorMessage = false;
                    }, 3000);
                });
    /*  }   */

    }


});





/*==============================================================================
 * Profile controller(my profile)
 * =============================================================================*/

 userControllers.controller('myProfileCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {


//$rootScope.getAllCountMyprofile();
//
    //$scope.requiresLogin = true;
    var token  = $window.localStorage.userToken;
    var uid    = $window.localStorage.uid;

     //Get Home Location
     $http.post($rootScope.STATIC_URL + 'travelLocations/getHomeLocation').success(function (response) {
        // alert(JSON.stringify(response));
        if (response.status == 1)
        {
            console.log("get home Location Response");
            console.log(response);
            $scope.homeLocation = response.data;
        }


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });

    $http.post($rootScope.STATIC_URL + 'users/getUserFullDetails',{token: $window.localStorage.userToken, userRole: $window.localStorage.userType}).success(function (response) {
            $rootScope.showloader = false;

        if (response.status === 1) {
            console.log("====  getUserFullDetails  ======");
            $scope.profile      = response.data[0];
            $scope.profile1      = response.data3;
             $scope.date = new Date();
            console.log($scope.profile );
            var gender=$scope.profile.gender;
            if((gender=='male_female_couple') ||(gender== 'gay_couple' )||(gender=='lesbian_couple'))
            {
                $scope.couple=true;
            }
            $scope.travelLocations = response.data1;
            if(response.data1.length>=1)
            {
                var len=0;

                for(var i=0;i<response.data1.length;i++)
                {

                    if(response.data1[i].travelStart)
                    {
                        len=len+1;
                        console.log(len);
                    }

                }
                $scope.travelCount= len;

            }
            else
            {
                $scope.travelCount=null;
            }

              console.log($scope.travelLocations);
            $scope.iframeSrc       = "https://maps.google.com/maps?q="+$scope.profile.latitude+","+$scope.profile.longitude+"&z=14&output=embed";

           // $scope.count           = response.data2[0];

           $scope.seeking         = response.data2[0];
          // $scope.count           = response.data3[0];
           console.log("my prof count***8");
           console.log($scope.count);
       }
   }).error(function (err) {
    console.log("ERROR" + err);
});


///*** function to make as un-favourite   myprofile
$scope.makeUnfavourite=function(id,index, profileid,favusername){
    var indextoremove=index;
    console.log("username" +favusername);
    var messageFav="successfully removed "+favusername+" from your favorite list";
    console.log("profileid"+profileid);
    console.log('index'+indextoremove);

    var favUserId=id;
    var profileId=profileid;
    console.log(favUserId);
    var params = {
        favUserId:id
    };
    if(favUserId){
        $http.post($rootScope.STATIC_URL + 'users/makeUnFavourite', params).success(function(response){
         var Successresponse={status:true,message:messageFav};
         $rootScope.addAlert(Successresponse);
         $scope.favusername=favusername;

     }).error(function(err){
        console.log("Error"+err);
    });
 }
};

$scope.remove = function(favourite,index){
    console.log(favourite);
    favourite.splice(index,1);
};
  ///**** Get all favourite
  $scope.getAllFavourite=function(){
 $rootScope.showloader = true;
   console.log("inside getallFavourite");
   var favouriteData=$http.post($rootScope.STATIC_URL + 'users/getAllFavourite');
   console.log("path***");
   console.log(favouriteData);
   favouriteData.then(
    function(response){
        $rootScope.showloader = false;
        console.log(response);

        $scope.favouriteData=response;

                    //$scope.urlLink=Config.STATIC_SAILS_URL;
                    $scope.urlLink=Config.STATIC_URL;
                    $scope.advertisement = "loren ipsum bla bla bla";
 // $scope.advertisementShow = true;


}
);
};

/*List blocked users*/
$scope.blockedList = function()
{

 $http.post($rootScope.STATIC_URL + 'users/getBlockedUsers').success(function(response){
     console.log(response);
     if(response.status==1)
     {
        $scope.blockedUsers=response.data;
        $scope.showBlockedUser=true;
        console.log("---Blocked Users---");
        console.log($scope.blockedUsers);
        $scope.urlLink=Config.STATIC_URL;
        if($scope.blockedUsers=='')
        {
            $scope.blockedUsersMsg="Not block any users";
            console.log($scope.blockedUsersMsg);

        }
        else
        {
            $scope.blockedUsersMsg='';
        }
    }




}).error(function(err){
    console.log("Error"+err);
});
}
    //Unblock my blocked list page
    $scope.makeUnBlock=function(blockedUser,blockedUserName){
       $scope.showBlockedUser=true;
       var messageUnBlock="<strong>" +blockedUserName+"</strong> has been Un-blocked";
       var params = {
        blockedUserId:blockedUser
    };
    if(blockedUser){
        $http.post($rootScope.STATIC_URL + 'users/unblockAUser', params).success(function(response){
          if(response.status==1)
          {
            $scope.blockedList()
            console.log(response);
            var Successresponse={status:true,message:messageUnBlock};
            $rootScope.addAlert(Successresponse);

            console.log("success");
        }


    }).error(function(err){
        console.log("Error"+err);
    });
}
};

    //** test function

//test function upto this
if($location.path()=='/blockedUsers')
{
    $scope.blockedList();
}

    ///**** get myprofile penned review


    $scope.getMyPennedReviews = function()
    {
        console.log("inside getpennedreviews");
        $http.post($rootScope.STATIC_URL + 'users/getMyPennedReviews').success(function(response){
         console.log(response);
         if(response.status==4)
         {
            console.log("**********penned reviews");
            console.log(response);
            $scope.pennedReviews=response.data;
            $scope.urlLink=Config.STATIC_URL;
            console.log($scope.pennedReviews);

        }
    }).error(function(err){
        console.log("Error"+err);
    });
};
    /// upto this

    ///**** get my profile received reviews
    $scope.getMyReceivedReviews=function(){
        console.log("inside getMyReceivedReviews");
        var myReceivedReviews=$http.post($rootScope.STATIC_URL + 'users/getMyReceivedReviews');
        myReceivedReviews.then(
            function(response){
                console.log("**********penned reviews");
                console.log(response);
                $scope.receivedReviews=response.data.data;
                $scope.urlLink=Config.STATIC_URL;
                console.log($scope.receivedReviews);
            }
            );
    };
    $scope.getUserEmail=function(){
        console.log("inside get userEmail");

        var userEmail=JSON.parse($window.localStorage.user).email;

        console.log("##userEmail: "+userEmail);
        $scope.userEmail=userEmail;
    };

    $scope.submitAdRequest=function(){
        console.log("inside submit ad request");
        console.log("SDFS"+$scope.dropdownValue);
        var advSuccessMsg="Thanks for your interest in advertising with Zenbrisa. We will contact you very soon!"
        var advErrMsg="All fields are mandatory";
        var advServerErrMsg="Some issues with posting your request !!!.";
        var userName=JSON.parse($window.localStorage.user).username;
        var userId=JSON.parse($window.localStorage.user).id;
        var userEmail=JSON.parse($window.localStorage.user).email;
        var type=$scope.dropdownValue;
        var description=$scope.description;
        var viewStatus="NotSeen";
        var params={
            userId:  userId,
            type     :type,
            description:description,
            viewStatus :viewStatus,
            email: userEmail,
            username:userName
        };

        if(type && description && viewStatus){
            $http.post($rootScope.STATIC_URL + 'users/submitAdRequest',params).success(function(response){

                if(response.status==1){
                    console.log("**********adv requests");
                    console.log(response);
                    var Successresponse={status:true,message:advSuccessMsg};
                    $rootScope.addAlert(Successresponse);


                    $scope.description="";
                    $scope.dropdownValue="";
                }

            }).error(function(err){
                console.log("Error"+err);
                var Successresponse={status:true,message:advServerErrMsg};
                $rootScope.addAlert(Successresponse);

            });
        }
        else{
            var Successresponse={status:false,message:advErrMsg};
            $rootScope.addAlert(Successresponse);
        }
    };



    //GET PUBLIC PHOTOS

    if($location.path()=="/myProfile/publicPhotos" )
    {
        $http.post($rootScope.STATIC_URL + 'users/getMyPublicPhotos').success(function(response){
          if(response.status==1)
          {
            $scope.photos = response.data;
            console.log("my public photos****");
            console.log($scope.photos);
            $scope.public = true;
        }


    }).error(function(err){
        console.log("Error"+err);
    });
}

if($location.path()=="/myProfile/privatePhotos" )
{
    $http.post($rootScope.STATIC_URL + 'users/getMyPrivatePhotos').success(function(response){
      if(response.status==1)
      {
        $scope.photos = response.data;
        console.log($scope.photos);
        $scope.private = true;
    }

}).error(function(err){
    console.log("Error"+err);
});
}

$scope.mysubscription = false;
console.log(")))))))))))))))))"+$location.path());
if($location.path()==="/myprofile" )
{
    $http.get($rootScope.STATIC_URL + 'subscription/getMyLatestSubscription').success(function(response){
      if(response.status==1)
      {
        $scope.mysubscription = response.data;
    }

}).error(function(err){
    console.log("Error"+err);
});
}


$scope.reportAbuse = function()
{
    $scope.myProfileAbuse=true;
}


});


/*==============================================================================
 * Profile controller(other profile)
 * =============================================================================*/


userControllers.controller('otherProfileCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout,$uibModal, $compile,$route) {

    console.log(" otherProfileCtrl --------------------------------------------");
    console.log($rootScope.previousUrlLoaded);
    var urlFromMailBox = false;
    if($rootScope.previousUrlLoaded){
            console.log($rootScope.previousUrlLoaded.split('mailbox'));
            console.log($rootScope.previousUrlLoaded.split('mailbox').length);
            if($rootScope.previousUrlLoaded.split('mailbox').length != 1){
                 urlFromMailBox = true;
            }
    }
//$rootScope.getAllCountOtherProfile();
    var token    = $window.localStorage.userToken;
    var uid      = $window.localStorage.uid;

    $scope.username = (JSON.parse($rootScope.user).username);
    $scope.urlLink=Config.STATIC_URL;


    var params ={objectUserId:$routeParams.id};
    console.log("otherprofctrl"+$routeParams.id);
     //for getting count of video
     $http.post($rootScope.STATIC_URL + 'users/getVideoCount', {userId: $routeParams.id }).success(function (response) {



        $scope.videoCount = response.data[0].videoCount;
        console.log("$scope.limit"+$scope.limit);
        console.log($scope.limit);


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });
        //Get Home Location
     $http.post($rootScope.STATIC_URL + 'travelLocations/getOthersHomeLocation',{userId: $routeParams.id }).success(function (response) {
        // alert(JSON.stringify(response));
        if (response.status == 1)
        {
            console.log("get others home Location Response");
            console.log(response);
            $scope.homeLocation = response.data;
        }


    }).error(function () {
        $scope.errorMessage = "Please Try Again";
        $timeout(function () {
            $scope.errorMessage = false;
        }, 3000);
    });
console.log("urlFromMailBox ======================================");
console.log(urlFromMailBox);
    $http.post($rootScope.STATIC_URL + 'users/getOtherUserDetails', {objectUserId:$routeParams.id, urlFromMailBox: urlFromMailBox}).success(function (response) {
        if (response.status === 1) {
            $scope.profile           = response.data[0];
            console.log("----other profile full details----");
            console.log($scope.profile);


            if($scope.profile==''||$scope.profile==undefined)
            {
                console.log("helloooooo");
                $scope.ERROR="You don't have the permission to access this page"
                return false;
            }
            else
            {
                var gender=$scope.profile.gender;
                if((gender=='male_female_couple') ||(gender== 'gay_couple' )||(gender=='lesbian_couple'))
                {
                    $scope.couple=true;
                }
                console.log($scope.profile);
                $scope.travelLocations   = response.data1;
                $scope.seeking           = response.data2[0];
               // $scope.count             = response.data3[0];

                    if(response.data1.length>=1)
                    {
                        var len=0;

                        for(var i=0;i<response.data1.length;i++)
                        {

                            if(response.data1[i].travelStart)
                            {
                                len=len+1;
                                console.log(len);
                            }

                        }
                        $scope.travelCount= len;

                    }
                    else
                    {
                        $scope.travelCount=null;
                    }


                if($scope.profile.profilePic)
                {

                    $rootScope.otherProfilePic = Config.STATIC_URL+'images/profilePics/'+$scope.profile.username+'/thumb/'+$scope.profile.profilePic;
                    $rootScope.otherProfilePicExist=1;
                    $rootScope.otherProfilePicNoThumb = Config.NODE_ASSETS+'profilePics/'+$scope.profile.username+'/'+$scope.profile.profilePic;
                }
                else
                {
                    //$rootScope.otherProfilePic = Config.STATIC_URL+'images/profilePics/default/default.png';
                    $rootScope.otherProfilePic = "https://cdn.zenbrisa.com/profilePics/default/default.png";

                    $rootScope.otherProfilePicExist=0;
                }
                $scope.iframeSrc         = "https://maps.google.com/maps?q="+$scope.profile.latitude+","+$scope.profile.longitude+"&z=14&output=embed";

            }
            var params = {
                objectUserId:$routeParams.id,
                senderName  :JSON.parse($window.localStorage.user).username,
                receiverEmail:$scope.profile.email,
                receiverName:$scope.profile.username
            };


            $http.post($rootScope.STATIC_URL + 'users/setProfileViewMail', params).success(function (response) {
                console.log(response);
                if (response.status === 1) {
                    if(response.data)
                    {
                        $scope.privateNote       = response.data;
                        console.log($scope.privateNote);
                    }
                    else
                    {
                        console.log("No private notes");
                    }
                }
            }).error(function (err) {
                console.log("ERROR" + err);
            });
        }
    }).error(function (err) {
        console.log("ERROR" + err);
    });
//*****function to check review post is possible or not
$http.post($rootScope.STATIC_URL + 'users/postReviewOrNot', {reviewedOnId:$routeParams.id}).success(function (response) {
    console.log("checkkkkkkk");
    console.log(response.status);
    if(response.status==4){
        $scope.postNot=true;
    }
    else{
       $scope.postYes=true;
   }
}).error(function (err) {
    console.log("ERROR" + err);
});

//*** upto this
$scope.alertPostNot = function(username){
    var reviewedOnName=username;
    alert("You must have received (and read) at least one e-mail from "+reviewedOnName+" within the past 30 days to write a review");
}
$scope.getPrivateNotes = function()
{

    $http.post($rootScope.STATIC_URL + 'privateNotes/getPrivateNotes', params).success(function (response) {
        if (response.status === 1) {
            if(response.data)
            {
                $scope.privateNotes       = response.data;
                $scope.privateNote        = $scope.privateNotes.note;
            }
            else
            {
                console.log("No private notes");
            }
        }
    }).error(function (err) {
        console.log("ERROR" + err);
    });
}
$scope.getPrivateNotes();
    //Write private notes
    $scope.writeNote = function(privateNote)
    {
        var params = {
            objectUserId:$routeParams.id,
            privateNote  :privateNote
        };
        $http.post($rootScope.STATIC_URL + 'privateNotes/writePrivateNotes', params).success(function (response) {
            console.log(response);
            if (response.status === 1) {
                $scope.privateNote    = "";
                $scope.displaynoteBox = false;
                $scope.getPrivateNotes();
                console.log($scope.privateNote);

            }
        }).error(function (err) {
            console.log("ERROR" + err);
        });
    }

    $scope.cancel = function()
    {
        $scope.displaynoteBox=false;
        $scope.privateNotes.note=$scope.privateNote;
    }

///*** add to favourite   from other profile
$scope.addtofavourite=function(id,email,username){
    var x=$routeParams.id;
    var favName=username;
    console.log("make fav new msg "+favName);
    var messageFav="<strong>" + favName+"</strong> has been marked as your favorite";
    console.log("**************"+email);
    //function to check current user is in blockedList

    ///***upto this
    var params = {
        favId: id,
        favEmail:email
    };

    if(id && $scope.blockYes==false){
      $http.post($rootScope.STATIC_URL + 'users/addToFavourite', params).success(function (response) {
       console.log(response);
       if(response.status==1){
        $scope.favYes=true;
           var Successresponse={status:true,message:messageFav};
             $rootScope.addAlert(Successresponse); // Display server response status message

         }
     }).error(function (err) {
        console.log("ERROR" + err);
    });
 }
 else if(id && $scope.blockYes==true){
    alert(favName+ "  is in your blocked list. So you cant make him favorite!");
 }
};

///**** make unfavourite from other-profile
$scope.makeUnfavourite=function(id,username){

 var favid=$routeParams.id;
 var favName=username;
 console.log("make fav new msg "+favName);
 var messageFav="<strong>" + favName+"</strong> has been removed from your favorites list";
 console.log("FavuserId to unfavourite ** "+favid);
 var params = {
    favUserId:id
};
if(id){
    $http.post($rootScope.STATIC_URL + 'users/makeUnFavourite', params).success(function(response){
        $scope.favHide=response;
        $scope.favYes=false;
        var Successresponse={status:true,message:messageFav};
             $rootScope.addAlert(Successresponse); // Display server response status message
                 //$scope.unFavSuccessMsg=true;
                // $scope.SuccessMsg=false;
            }).error(function(err){
                console.log("Error"+err);
            });
        }
    };

///***** for posting a review
$scope.postReview=function(profileId,rating){
    var messageRev="Your review has been submitted successfully. You will be notified when Moderator approves your review.";
    var mandatoryMessag="All fields are mandatory";
    console.log("inside add review function");
    console.log("rating ****"+rating);
    var Titlename=$scope.name;
    console.log("TitleName"+Titlename);
    var description=$scope.description;
    console.log(Titlename);
    console.log(description);
    var reviewedOnId=profileId;
    console.log("reviewed On id***"+reviewedOnId);
    var params = {

        reviewedOnId  :reviewedOnId,
        reviewTitle :Titlename,
        reviewNote:description,
        ratingValue:rating

    };



    if(Titlename && description && rating){
     $http.post($rootScope.STATIC_URL + 'users/addReview', params).success(function (response) {

        console.log(response);
        if (response.status == 1) {
             //$window.location.reload();
            console.log("just behind hide cvf"+response);
            var Successresponse={status:true,message:messageRev};
            $rootScope.addAlert(Successresponse);
               // $('#postReview').modal('hide');
               $scope.name="";
             $scope.rating=1;
               $scope.reset=0;
               $scope.description="";

               $timeout(function() {
               // $route.reload();
               },3000);




          }
          else{
            $('#postReview').modal('hide');
            $scope.name="";
            $scope.description="";
            $scope.reset=0;
            alert("You are not able to review on him");
        }
    }).error(function (err) {

        console.log("ERROR" + err);
        $('#postReview').modal('hide');
        $scope.name="";
        $scope.description="";
        $scope.reset=0;
    });
}
else if(!rating&&Titlename&&description){
    var starRatingMessage="You haven't given any rating!";
    var Successresponse={status:false,message:starRatingMessage};
    $rootScope.addAlert(Successresponse);

}
else{

 var Successresponse={status:false,message:mandatoryMessag};
 $rootScope.addAlert(Successresponse);
}
}



    ///***function for getting other profile received reviews


    $scope.getOtherReceivedReviews=function(){
        var myId=$window.localStorage.uid;
       console.log("$window.localStorage.id"+$window.localStorage.uid);
        console.log("inside getOtherReceivedReviews");
        var otherProfileId=$routeParams.id;
        console.log("other profileId=="+otherProfileId);
        var params={
            otherprofileId:otherProfileId
        };
        var otherReceivedReviews=$http.post($rootScope.STATIC_URL + 'users/getOtherReceivedReviews',params);
        otherReceivedReviews.then(
            function(response){
                console.log("**********received reviews");
                console.log(response);
                $scope.receivedReviews=response.data.data;
                $scope.urlLink=Config.STATIC_URL;
                $scope.myId=myId;
                console.log($scope.receivedReviews);
            }
            );
    };

    ///**** function  for getting other profile penned reviews
    $scope.getOtherPennedReviews=function(){
        var otherProfileId=$routeParams.id;
        var params={
            otherprofileId:otherProfileId
        };
        var otherPennedReviews=$http.post($rootScope.STATIC_URL + 'users/getOtherPennedReviews',params);
        otherPennedReviews.then(
            function(response){
                console.log("**********penned reviews");
                console.log(response);
                $scope.pennedReviews=response.data.data;
                $scope.urlLink=Config.STATIC_URL;
                 //$scope.myId=$window.localStorage.uid;

                  $scope.pennedReviews.myId=$window.localStorage.uid;
                 console.log("*****MyId inside fn*****"+$scope.myId);
                console.log($scope.pennedReviews);
            }
            );
    };

////**** upto this

$scope.search = function(search)
{
   console.log(search.username);
}


/*Block user other profile*/
$scope.blockUser = function(blockUserName,Blockedusremail)
{
 var blockUsrId=$routeParams.id;
 var messageBlock="<strong>" + blockUserName+"</strong> has been blocked";
 if(blockUsrId && $scope.favYes==false)
 {
   $http.post($rootScope.STATIC_URL + 'users/blockAUser', {blockedUserId:$routeParams.id,blockedusremail:Blockedusremail}).success(function (response){
       console.log(response);
       if(response.status==1)
       {
         $scope.blockYes=true;
         var Successresponse={status:true,message:messageBlock};
         $rootScope.addAlert(Successresponse);
     }
     else
     {
      $scope.unBlock=false;
      $scope.blocked=false;
  }

}).error(function (err) {
    console.log("ERROR" + err);
});
}
else if(blockUsrId && $scope.favYes==true){
    alert(blockUserName+ " is in your favorite list. So you cant block him");
}
}
   //***unblock a user other profile menu
   $scope.makeUnBlock=function(blockedUser,blockedUsername){
    var messageUnBlock="<strong>" + blockedUsername+"</strong> has been Un-blocked";
    console.log("inside unBlock user");
    var params = {
        blockedUserId:blockedUser
    };
    if(blockedUser){
        console.log("hello");
        $http.post($rootScope.STATIC_URL + 'users/unblockAUser', params).success(function(response){
          if(response.status==1)
          {
           $scope.blockYes=false;
           console.log(response);
           var Successresponse={status:true,message:messageUnBlock};
           $rootScope.addAlert(Successresponse);
           console.log("success");

       }


   }).error(function(err){
    console.log("Error"+err);
});
}
};

$scope.showProfile = function()
{
   $location.path('/myprofile');
       //$window.location.reload();
   }

   /*Report Abuse*/
   $scope.reportAbuse = function()
   {
       var messageAbuse="Thanks for reporting! Zenbrisa admin will take care of it.";
       var abusedId=$routeParams.id;
       var params =   { userId:$routeParams.id,
        reporterId:uid,
        reportNote:$scope.message
    }
    $http.post($rootScope.STATIC_URL + 'users/addReport', params).success(function (response){
       console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        console.log(response);
       // $location.path('/profile/'+abusedId);
         var Successresponse={status:true,message:messageAbuse};
         $rootScope.addAlert(Successresponse);
            $scope.message='';
    }).error(function (err) {
        console.log("ERROR" + err);
    });
}

if($location.path()=="/publicPhotos/"+$routeParams.id )
{
    var params={userId:$routeParams.id}
    $http.post($rootScope.STATIC_URL + 'users/getPublicPhotos',params).success(function(response){
      if(response.status==1)
      {
        $scope.photos = response.data;
        console.log($scope.photos);
        $scope.public = true;
        $scope.private = false;
        $scope.showKeyArea=false;
    }


}).error(function(err){
    console.log("Error"+err);
});
}

if($location.path()=="/privatePhotos/"+$routeParams.id )
{
    $scope.showKeyArea=true

}

$scope.getphotos = function()
{
    var params = {
        objectUserId: $routeParams.id,
        key:$scope.photokey
    };
    $rootScope.showloader = true;

    $http.post($rootScope.STATIC_URL + 'users/getPrivatePhotos',params).success(function(response){
        $rootScope.showloader = false;
        console.log(response);
        if(response.status === 1)
        {
            $scope.showKeyArea = false;
            $scope.public      = false;
            $scope.private     = true;
            $http.defaults.headers.common['photokey'] = $scope.photokey;
            $scope.photos = response.data;
        }
        else if(response.status === 2)
        {
          $scope.keyError = response.message || "You don't have permission to access private photos";
      }
      else
      {
          $scope.keyError = "You don't have permission to access private photos";
      }
      $rootScope.addAlert($rootScope.responseParser(response));
  }).error(function(err){
    console.log("Error"+err);
});

}

    /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   */
        $scope.composeMailPopup  = function (userIdTo, usernameTo){
            console.log("Welcome to draftMail");
            console.log(userIdTo);
            console.log(usernameTo);
            $scope.compRecId            = userIdTo;
            $scope.composeTo            = usernameTo;
        }
       /* $scope.popupMailSubmit  = function (popupSubjectTo, popupMessageTo){

            console.log("popup submit");
            console.log(popupSubjectTo);
            console.log(popupMessageTo);
            console.log($scope.$parent.popupMessageTo);
            $('#mailFromSearchResult').modal('hide');
        }*/



        $scope.popupMailClose = function () {

                $scope.composeSubject               = "";
                $scope.composeMessage               = "";
                $scope.errorMessageComposeMail      = "";
        }

// ComposeMail
$scope.popupMailSubmit = function () {

      $http.post($rootScope.STATIC_URL + 'mail/distinctUserMailLimit').success(function (response) {
             if (response.status == 1 && response.message == "failure")
              {
                   //$( "#chat_window_common" ).hide();
                   //$scope.closeComposeMailTab();
                   $scope.errorMessageComposeMail = "Mail Limit Exceeded ";
                   $rootScope.disableButton = false;

              }else{

                    $rootScope.disableButton = true;
                    console.log("Welcome to draftMail");
                    var fd                      = new FormData();
                    var composeTo               = $scope.composeTo;
                    var composeSubject          = $scope.composeSubject;
                    var composeMessage          = $scope.composeMessage;
                    var receiverId              = $scope.compRecId;

                    if(!$scope.composeMessage){
                                $scope.errorMessageComposeMail = "Please enter a message and send";
                                $rootScope.disableButton = false;
                    }else{

                            if(!$scope.composeSubject){
                                composeSubject = "No Subject";
                            }
                            console.log($scope.compRecId);
                            console.log(composeSubject);
                            console.log(composeMessage);
                           // var replyMailStatus;// To save reply as sent
                            var files = [];

                            if($scope.replyFileFinalArray){ // Selected Images in Reply Part
                                  console.log("Entered $scope.replyFileFinalArray ==========))))))))) ");
                                    for (var i = 0; i < $scope.replyFileFinalArray.length; i++) {

                                        var fileType    = $scope.replyFileFinalArray[i].type;
                                        fileType        = fileType.split("/");
                                        console.log(fileType);
                                        if(fileType[0] === "image"){
                                           files.push($scope.replyFileFinalArray[i]);
                                        }else{
                                            $scope.errorMessageComposeMail = "Please select an Image file";
                                            $timeout(function () {
                                                $scope.errorMessageComposeMail = false;
                                            }, 3000);
                                            return false;
                                        }


                                    }
                                    console.log("files Reply Attach");
                                    console.log(files);
                            }

                           var replyMailStatus = "sent";

                                //console.log("files >>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                                //console.log(files);
                                fd.append('composeTo', composeTo);
                                fd.append('composeSubject', composeSubject);
                                fd.append('composeMessage', composeMessage);
                                fd.append('receiverId', receiverId);
                                fd.append('replyMailStatus', replyMailStatus);
                                fd.append('sendMailPage', 'true');  // To identify other than draftmail
                                //fd.append('entryId', entryId);

                               // fd.append('entryId', entryId);
                                if (files) {
                                    for (var i = 0; i < files.length; i++) {
                                        fd.append('attachments', files[i]);
                                    }
                                }

                        $http.post($rootScope.STATIC_URL + 'mail/saveMail', fd, {
                            transformRequest: angular.identity,
                            headers: {'Content-Type': undefined}

                        }).success(function (response) {
                                        console.log(response);
                                        if (response.status == 1)
                                        {
                                                        $rootScope.disableButton = false;
                                                        var sendMailSuccessMsg = "An email has been sent to <b>"+$scope.composeTo+"<b>";
                                                        var Successresponse={type: 'success', status: true, message:sendMailSuccessMsg};
                                                        $rootScope.addAlert(Successresponse);
                                                        $('#mailFromSearchResult').modal('hide');
                                                        //$scope.successMessageCommonMail = "Successfully send message to "+$scope.composeTo;

                                                        $scope.composeMessage = "";
                                                        //$window.location.reload();
                                                        $scope.composeTo            = "";
                                                        $scope.composeSubject       =  "";
                                                        $scope.composeMessage       = "";
                                                        $scope.compRecId            =  "";
                                                        $('.xax').hide();
                                                        $('#reply').show();
                                                        console.log(event);

                                                        console.log(event.replyFileFinalArray);
                                                        $('#appendReplyAttachFile .replyAttachOuter').remove();
                                                        //$scope.successMessageComposeMail = "Your message has been sent";
                                                        //$scope.successMessageCommonMail = "Your message has been sent";

                                                        $timeout(function () {
                                                           // $scope.successMessageComposeMail = false;
                                                           //$window.location.href = $rootScope.hashbang + "mailbox/inbox";
                                                           $scope.successMessageCommonMail = false;

                                                        }, 3000);

                                                        if(event.replyFileFinalArray){//Only For Reply Mail Success
                                                                console.log($scope.replyFileFinalArray);
                                                                $scope.replyFileFinalArray = "";
                                                        }



                                        }



                        })
                        .error(function () {
                            $scope.errorMessage = "Please Try Again";
                            $timeout(function () {
                                $scope.errorMessage = false;
                            }, 3000);
                        });

               }

               }
            });


  }//Draft Mail Ends popupMailSubmit Ends


     // Reply Attach

  $scope.replyAttach = function (event) {
                //var i = 0;
                console.log("replyAttach ---- >");
                console.log(event.files);
                console.log(event.target.files);
                console.log("tmppath >>>>>>>");
                console.log(tmppath);

                var replyFiles = [];
                var replyFileArray =[];
       // $scope.replyFileFinalArray =[];

       var attachReplyElement = angular.element(document.querySelector('#appendReplyAttachFile'));

       for (var i = 0; i < event.target.files.length; i++) {

        var tmppath = URL.createObjectURL(event.target.files[i]);
                             // var file = event.files[i];
                             if(!$scope.replyFileFinalArray){
                                replyFileArray.push(event.target.files[i]);
                                $scope.replyFileFinalArray = replyFileArray;
                                /* var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img style="width:100px;height:100px;" class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1">' +
                                                                        '<button id="deleteReplyAttach" class="btn btn-primary" ng-click="removeReply('+$scope.replyFileFinalArray.length+')">' +
                                                                            '<i class="fa fa-trash"></i>' +
                                                                        '</button>' +
                                                                '</div>' +
                                                                '</div>';*/
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            else{
                                                                replyFileArray = $scope.replyFileFinalArray;
                                                                replyFileArray.push(event.target.files[i]);
                                                                $scope.replyFileFinalArray = replyFileArray;
                                                                var attachReplyHtml = '<div class="replyAttachOuter col-md-1 clearfix">' +
                                                                '<img class="col-sm-2" src="'+tmppath+'"/>'+
                                                                '<div class="delete col-sm-1 imgclosediv">' +

                                                                '<i id="deleteReplyAttach" class="fa fa-close" ng-click="removeReply('+$scope.replyFileFinalArray.length+')"></i>' +

                                                                '</div>' +
                                                                '</div>';
                                                                attachReplyElement.append($compile(attachReplyHtml)($scope));
                                                            }
                                                            console.log("$scope.replyFileArray1 Multiple=======");
                                                            console.log($scope.replyFileFinalArray);

                                                        }

                                                        console.log("........Last and Final $scope.ecount...........");
                                                        console.log($scope.ecount);

            //}//For Multiple Files

   }//Main Function ENDS

   $scope.removeReply = function(item) {
            console.log("Clicked Remove item =======================------------");
            var selectItem = $scope.replyFileFinalArray[item-1];
            $scope.replyFileFinalArray.splice(item-1, 1);
            console.log($scope.replyFileFinalArray);
   }



/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    */

});




/*==============================================================================
 * search controller
 * =============================================================================*/

 userControllers.controller('searchCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

   $scope.searchData = function(searchField,searchValue)
   {
            console.log(searchField);
            console.log(searchValue);
           /*if(searchField && searchField=='online')
           {
            $window.localStorage.search = JSON.stringify({searchField:searchField,searchValue:searchValue});
            $window.location.href = $rootScope.hashbang + "searchresults";
            }
            if(searchField && searchField=='professional')
            {
               $window.localStorage.search = JSON.stringify({searchField:searchField,searchValue:searchValue});
               $window.location.href = $rootScope.hashbang + "searchresults";
           }
           if(searchField && searchField=='availability')
           {
               $window.localStorage.search = JSON.stringify({searchField:searchField,searchValue:searchValue});
               $window.location.href = $rootScope.hashbang + "searchresults";
           }*/
           if((searchField==undefined && searchValue==undefined) || (searchField=='username' && searchValue==undefined) || (searchField=='username' && !searchValue.length) || (searchField=='keyword' && searchValue==undefined) || (searchField=='keyword' && !searchValue.length))
           {
               $scope.errormsg="Please fill search criteria";
           }
           else
           {
               $window.localStorage.search = JSON.stringify({searchField:searchField,searchValue:searchValue});
               $window.location.href = $rootScope.hashbang + "searchresults";
           }
  };

        //To hide error message search Page
        $scope.searchAvoidErrorClick = function(){

                $scope.errormsg = false;
        }



});

/*===================================================================================================================================
 Add New Poll  Controller   -----
 ====================================================================================================================================*/
 userControllers.controller('pollCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, $route) {
$scope.select_radio_button="";

    $scope.goBack = function ($event) {
        $window.history.back();
    }
    $rootScope.adminNavigation = 1;
    $scope.newpoll             = {};
    $scope.polls               = []; // List of all polls
    $scope.poll                = []; // Single poll
    $scope.poll_answer         = []; // Single poll answer
    $scope.poll_answer_stauts  = false;
    $scope.poll_answer_dirt    = false;
    $scope.poll_answer_comment = ""; // Single poll comment
    $scope.pagination          = [];
    $scope.poll_comments       = [];

    $scope.currentPage         = 0;
    $scope.pageSize            = 10;
    $scope.errorMessage        = "";
    var request                = "";
    var token                  = $window.localStorage.token;
    var userRole               = "user";
    $scope.qoptions            = [];
    //$scope.urlLink=Config.STATIC_URL;

    // Helper function for validation
    $scope.answerClick = function (id,multiple_answer) {
        if(multiple_answer){
            var splice_index = $scope.poll_answer.indexOf(id);
            if (splice_index == -1) {
                $scope.poll_answer.push(id);
            }else{
                $scope.poll_answer.splice(splice_index,1);
            }

        }else{
            $scope.poll_answer[0] = id;
        }
        $scope.poll_answer_dirt = true;
        $scope.poll_answer_stauts = $scope.poll_answer.length;
    };

    //Answer a poll
    $scope.answerPoll = function (comment_poll) {

        var answerPollSuccessMsg="Thanks for your participation!";
        var data = {
            poll_id: $scope.poll.id,
            poll_answer: $scope.poll_answer,
            poll_answer_comment: comment_poll,
            token: $window.localStorage.userToken,
            userRole: userRole
        };
        console.log("mmmm");
        console.log(data);
        var promise = $http.post( $rootScope.STATIC_URL + 'userpoll/answerpoll', data );
        promise.then(
            function(response) {
                console.log(response);
                $rootScope.addAlert(response.data);
                $scope.getCommentsByPollId($routeParams.id);
                $scope.poll_answer_comment="";
                $scope.select_radio_button="";
                $timeout(function() {
                $route.reload();
               },2000);
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }
      //Answer latest  poll
    $scope.answerLatestPoll = function (comment_poll) {
        var answerPollSuccessMsg="Thanks for your participation!";
        var data = {
            poll_id: $rootScope.pollLatest.id,
            poll_answer: $scope.poll_answer,

            poll_answer_comment: comment_poll,


            token: $window.localStorage.userToken,
            userRole: userRole
        };

        console.log(data);
        var promise = $http.post( $rootScope.STATIC_URL + 'userpoll/answerpoll', data );
        promise.then(
            function(response) {
                 $scope.poll_answer_comment='';
                 $scope.poll_answer=null;

                 console.log("mmmm");
                console.log(response);
                $rootScope.addAlert(response.data);
               $rootScope.getlatestPollComment($rootScope.pollLatest.id);

               $timeout(function() {
                $route.reload();
               },2000);
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }

    //Add new Dynamic Row
    $scope.addRow = function () {
        if ($scope.newAnswer !== '') {
            $scope.qoptions.push({'newAnswer': $scope.newAnswer});
            $scope.newAnswer = '';
        }
        $scope.newpoll.answer_options = $scope.qoptions;
    };

    //Remove Dynamic Row
    $scope.removeRow = function (newAnswer) {
        var index = -1;
        var comArr = eval($scope.qoptions);
        for (var i = 0; i < comArr.length; i++) {
            if (comArr[i].newAnswer === newAnswer) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            alert("Something gone wrong");
        }
        $scope.qoptions.splice(index, 1);
        $scope.newpoll.answer_options = $scope.qoptions;
    };


    //Add New Poll
    $scope.addNewPoll = function () {
        console.log($scope.newpoll);
        var successmesagepoll="Thanks for suggesting a new poll. We will publish it soon!";
        $scope.newpoll.token = token;
        $scope.newpoll.userRole = 'user';
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/addpoll', $scope.newpoll);
        promise.then(
            function(response) {
                 var Successresponse={status:true,message:successmesagepoll};
                 $rootScope.addAlert(Successresponse);
                 $scope.newpoll.question="";
                 $scope.newpoll.title="";
                 $scope.newpoll.ansOptionType="";
                 $timeout(function() {
                    $route.reload();
                    },2000);



            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }

    //get all polls
    $scope.getPolls = function (page) {

        $scope.newpoll.page = page;
        var myId = $window.localStorage.uid;
        console.log("myId**"+myId);
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpolls', $scope.newpoll);
        promise.then(
            function(response) {
                if(response.data.status){
                    console.log("polls count check");
                    console.log(response);
                    $scope.polls      = response.data.data;
                    console.log($scope.polls.length);
                    if($scope.polls.length==0){
                        $scope.pollMsg="Sorry! We don't have anything here yet. Please visit again!";
                    }
                    $scope.polls.myId = myId;
                    $scope.pagination = response.data.pagination;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }

    //get a poll by id
    $scope.getPollById = function (id) {
        $scope.currentUserId=$window.localStorage.uid;
        var myId=$window.localStorage.uid;
        $scope.newpoll.token    = token;
        $scope.newpoll.userRole = 'user';
        $scope.newpoll.id       = id;
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpollbyid', $scope.newpoll);
        promise.then(
            function(response) {
                if(response.data.status){
                    $scope.poll = response.data.data;
                    $scope.poll.myId=myId;
                }else{
                    $rootScope.addAlert(response.data);
                }
                $scope.checkPollAttended(id);
                //$rootScope.getPollAnswerOptionsQuestion(id);
                //$rootScope.getPollAnswerOptionsAnswer(id);
                $rootScope.pollAnswerPercentage(id);
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }
    //Check poll attended or not
    $scope.checkPollAttended = function (id){
         var data = {
                id: id
            };
      $http.post($rootScope.STATIC_URL + 'userpoll/checkPollAttended',data).success(function(response){
                if(response.status == 1){
                        console.log("**Poll attended or Not**");
                        console.log(response.count[0].count);
                        if(response.count[0].count==0){
                            $scope.pollAttendedPollById=0;
                        }
                        else{
                              $scope.pollAttendedPollById=1;
                        }
                }
                else{
                    console.log("***error in checking poll attended or not"+err);
                }
            });
    }
    //get a comments by poll id
    $scope.getCommentsByPollId = function (poll_id) {

        var data = {
            token: $window.localStorage.userToken,
            userRole: 'user',
            id: poll_id
        };

console.log(data);
        var promise = $http.post($rootScope.STATIC_URL + 'userpoll/getpollcomments', data);
        promise.then(
            function(response) {
            console.log(response);
                if(response.data.status){
                    $scope.poll_comments = response.data.data;

                    $scope.pagination = response.data.pagination;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }

    if($routeParams.id)
    {
        $scope.getPollById($routeParams.id);
        $scope.getCommentsByPollId($routeParams.id);
    }

    //pagination
    $scope.changePage = function(page){
        if(page){
            $scope.getPolls(page);
        }
    }
});

/*===================================================================================================================================
     -----   Photo Gallery Controller   -----
     ====================================================================================================================================*/
     userControllers.controller('photogalleryCtrl', function($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, fileUpload, $uibModal, $log){
$rootScope.getAllCountMyprofile();

//testing purpose data
//Get all user photos
    $scope.GetAllUserPhotos = function () {

        $scope.loader = true;

        var promise = $http.get($rootScope.STATIC_URL + 'users/getMyPhotos');
        promise.then(
            function(response) {

        $rootScope.showloader = false;
                if(response.data.status){

                    // Timeout used to avoid image loading issue
                    $timeout(function () {
                        $scope.totPubPhotos   = 0;
                        $scope.totPriPhotos   = 0;
                        $scope.loader         = false;
                        $scope.user_photos    = response.data.data;
                        console.log("userphotos####");
                        console.log( $scope.user_photos);
                        for(var i=0; i < $scope.user_photos.length; i++){
                            if($scope.user_photos[i].accessType == 'public'){
                                $scope.totPubPhotos++;

                            }else{
                                $scope.totPriPhotos++;
                            }
                        }
                       // $scope.count.publicPhotoCount  = $scope.totPubPhotos; // To update image count in left side menu
                        //$scope.count.privatePhotoCount = $scope.totPriPhotos; // To update image count in left side menu
                        refreshGallery();
                    }, 10);

                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            }
            );
    }
    $scope.GetAllUserPhotos();
    //***************************
        var promise = $http.get($rootScope.STATIC_URL + 'users/getMyPhotos');
        promise.then(
            function(response) {
                if(response.data.status){

                    // Timeout used to avoid image loading issue
                    $timeout(function () {
                        $scope.totPubPhotos   = 0;
                        $scope.totPriPhotos   = 0;
                        $scope.loader         = false;
                        $scope.user_photos    = response.data.data;
                        for(var i=0; i < $scope.user_photos.length; i++){
                            if($scope.user_photos[i].accessType == 'public'){
                                $scope.totPubPhotos++;
                            }else{
                                $scope.totPriPhotos++;
                            }
                        }
                        $rootScope.count.publicPhotoCount  = $scope.totPubPhotos; // To update image count in left side menu
                        $rootScope.count.privatePhotoCount = $scope.totPriPhotos; // To update image count in left side menu
                        refreshGallery();
                    }, 10);

                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                $log.error('failure loading data', errorresponse);
            });
//testing purpose data
        var userId = $window.localStorage.uid;

        $scope.privacy        = 'public';

        $scope.filename       = '';

    $scope.buttonDisabled = true; // To disable the submit button

    $scope.user_photos    = [];

    $scope.totPubPhotos   = 0;

    $scope.totPriPhotos   = 0;

    $scope.loader         = true;

    $scope.extraData         = [{ field: 'privacy', value: $scope.privacy }];

    // Actions on file change
    $scope.onFilePick = function() {

        if($scope.filename !== ''){

            $scope.buttonDisabled = false;

        }
    };

    // Clear image data
    $scope.clearImage = function(){

        $scope.filename  = null;

        $scope.userphoto = null;
        document.getElementById('file-5').value = '';
    }

    // Upload a public/private photo into the server
    $scope.uploadPhoto = function(file){
        $rootScope.showloader = true; // Loader Enabling
        $scope.buttonDisabled = true; // Disable submit button to avoid photo duplication
        $scope.updateFormData();

        var uploadUrl = $rootScope.STATIC_URL+'users/addPhoto?privacy=' + $scope.extraData[0].value;
        fileUpload.uploadFileToUrl(file, $scope.extraData, uploadUrl , function(data, status, headers, config){

            var response = $rootScope.responseParser(data);

            $rootScope.addAlert(response); // Display server response status message

            if(response.status){
                console.log("============response.data==============");
                    console.log(response.data);
                $scope.clearImage(); // Reset the file input
                $scope.GetAllUserPhotos();

            }else{
                $rootScope.showloader = false;
            }

            $scope.buttonDisabled = true;
        });
    };
     // Make Profile photo
    $scope.makeProfilePhoto = function(justName,photoName,photoId){
        var userId = $window.localStorage.uid;

        //var profilePic=justName;
        if(confirm('Do you want to make this as your profile picture ?')){
          $rootScope.showloader = true;
            var promise = $http.post( $rootScope.STATIC_URL + 'users/makeProfilePicture', { userId:userId,justName:justName,photoName: photoName ,photoId: photoId } );

            promise.then(

                function(response) {

                    if(response && response.data && response.data.status === 1 ){
                        $rootScope.updateUserInfo();
                        $timeout(function () {
                            var json_object = JSON.parse($window.localStorage.user);
                            console.log(response.data.data[0].profilePic);
                            json_object["profilePic"] = response.data.data[0].profilePic;
                            localStorage["user"] = JSON.stringify(json_object);
                            console.log($window.localStorage.user);
                            $scope.GetAllUserPhotos();

                            $window.location.href = $rootScope.hashbang + "myprofile";
                         },8000);
                    }
                },
                function(errorresponse) {

                    $log.error('failure loading data', errorresponse);
                }
                );
        }
    };

    // Delete photo
    $scope.deletePhoto = function(photoId){

        if(confirm('Are you sure ?')){
            var promise = $http.post( $rootScope.STATIC_URL + 'users/deletePhoto', { photoId: photoId } );

            promise.then(

                function(response) {

                    if(response && response.data && response.data.status === 1 ){

                        $scope.GetAllUserPhotos();
                    }
                },
                function(errorresponse) {

                    $log.error('failure loading data', errorresponse);
                }
                );
        }
    };

    // To update form
    $scope.updateFormData = function(){

        $scope.extraData = [{ field: 'privacy', value: $scope.privacy }];

    };

    $scope.updateFormData();

    $scope.open = function () {

        var modalInstance = $uibModal.open({
            animation  : true,
            templateUrl: 'myModalContent.html',
            controller : 'PhotoKeyModalInstanceCtrl',
            size       : 'sm',
            resolve    : {
                items: function () {
                    return $scope.user_photos;
                }
            },
            backdrop   : 'static',
            keyboard: false
        });
    };
});

userControllers.controller('PhotoKeyModalInstanceCtrl', function ($scope, $rootScope, $http, $uibModalInstance, items) {

    $scope.modalSubmit = false;

    $scope.photoKey    = false;

    $scope.error       = false;

    $scope.modalForm = {

        objectUserId: null
    };

    $scope.generatePhotoKey = function () {

        $scope.modalSubmit = true; // To disable submit button

        var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', $scope.modalForm );

        promise.then(

            function(response) {

                $scope.modalSubmit = false;

                if(response && response.data && response.data.status === 1 ){

                    $scope.photoKey = response.data.data.key;

                    $scope.error = false;

                }else{

                    $scope.error = response.data.message;
                }
            },
            function(errorresponse) {

                $log.error('failure loading data', errorresponse);
            }
            );
    };

    $scope.cancel = function () {

        $uibModalInstance.dismiss('cancel');
    };
});

//***** star rating marking

userControllers .controller('RatingCtrl', function($scope,$http,$rootScope,$route) {
    $scope.rating = 5;
    $scope.rateFunction = function(rating,profileid) {
        console.log("star rating ***"+profileid);
        $rootScope.Xratingvalue=rating;


    };
}).directive('starRating',
function() {
    return {
        restrict : 'A',
        template : '<ul class="rating">'
        + '    <li ng-repeat="star in stars" ng-class="star"  ng-click="toggle($index)">'
        + '\u2605'
        + '</li>'
        + '</ul>',
        scope : {
            ratingValue : '=',
            max : '=',
            onRatingSelected : '&'
        },
        link : function(scope, elem, attrs) {
            var updateStars = function() {
                scope.stars = [];
                for ( var i = 0; i < scope.max; i++) {
                    scope.stars.push({
                        filled : i < scope.ratingValue
                    });
                }
            };

            scope.toggle = function(index) {
                scope.ratingValue = index + 1;
                scope.onRatingSelected({
                    rating : index + 1
                });
            };

            scope.$watch('ratingValue',
                function(oldVal, newVal) {
                    if (newVal) {
                        updateStars();
                    }
                }
                );
        }
    };
}
);

userControllers.controller('packagesCtrl',['$scope','$http','$rootScope','$window', function($scope,$http,$rootScope,$window){
 var uid=$window.localStorage.uid;

 $scope.packages = [];
 $scope.getPackages = function(){
    $http.get($rootScope.STATIC_URL + 'subscription/getActivePackages').success(function (data) {
        if (data.status == 1) {
            $scope.packages = data.data;
            angular.forEach($scope.packages, function(value, key) {
                $scope.packages[key].onetimeCheck = false;
                $scope.packages[key].renewCheck   = true;
            });
        }
    });
}();





        var makePayPalForm = function post(params) {

            var form = document.createElement("form");
            form.setAttribute("method", 'post');
            //form.setAttribute("action", 'https://www.sandbox.paypal.com/cgi-bin/webscr');
        form.setAttribute("action", 'https://www.paypal.com/cgi-bin/webscr');

        for(var key in params) {
            if(params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);

                form.appendChild(hiddenField);
            }
        }

        document.body.appendChild(form);
        form.submit();
    }

    $scope.choosePackage = function(plan_id,renew,$event){

        $event.currentTarget.disabled = true; // disable current submit button
        $rootScope.showloader = true;
         $http.post($rootScope.STATIC_URL + 'subscription/choosePackage',{ plan_id: plan_id, renew: renew }).success(function (data) {
            if (data.status == 1) {
                makePayPalForm(data.data);
            }else{
                console.log('error');
                console.log(data);
            }
        });
    };

    $scope.toggleCheckbox = function(checkbox,groupIndex) {

        if(checkbox === 'onetimeCheck'){
            if($scope.packages[groupIndex].onetimeCheck){
                $scope.packages[groupIndex].renewCheck   = true;
                $scope.packages[groupIndex].onetimeCheck = false;
            }else{
                $scope.packages[groupIndex].renewCheck   = false;
                $scope.packages[groupIndex].onetimeCheck = true;
            }
        }
        if(checkbox === 'renewCheck'){
            if($scope.packages[groupIndex].renewCheck){
                $scope.packages[groupIndex].onetimeCheck   = true;
                $scope.packages[groupIndex].renewCheck = false;
            }else{
                $scope.packages[groupIndex].onetimeCheck   = false;
                $scope.packages[groupIndex].renewCheck = true;
            }
        }
    }

}]);

userControllers.controller('adPackagesCtrl',['$scope','$http','$rootScope','$window', function($scope,$http,$rootScope,$window){
 var uid=$window.localStorage.uid;
 $scope.packages = [];
 $scope.getPackages = function(){
    $http.get($rootScope.STATIC_URL + 'AdPackages/getAllPackagesForUser').success(function (data) {
        if (data.status == 1) {
            $scope.packages = data.data;
            angular.forEach($scope.packages, function(value, key) {
                $scope.packages[key].onetimeCheck = false;
                $scope.packages[key].renewCheck   = true;
            });
        }
    });
}();



        var makePayPalForm = function post(params) {

            var form = document.createElement("form");
            form.setAttribute("method", 'post');
            //form.setAttribute("action", 'https://www.sandbox.paypal.com/cgi-bin/webscr');
        form.setAttribute("action", 'https://www.paypal.com/cgi-bin/webscr');

        for(var key in params) {
            if(params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);

                form.appendChild(hiddenField);
            }
        }

        document.body.appendChild(form);
        form.submit();
    }

    $scope.choosePackage = function(plan_id,renew,$event){
        $event.currentTarget.disabled = true; // disable current submit button
        $rootScope.showloader = true;
        $http.post($rootScope.STATIC_URL + 'AdPackages/choosePackage',{ plan_id: plan_id, renew: renew }).success(function (data) {
            if (data.status == 1) {
                makePayPalForm(data.data);
            }else{
                console.log('error');
                console.log(data);
            }
        });
    };
    //***check membercategory(student, professional etc)
$scope.checkMemberCategory = function(plan_id,renew,$event){
    console.log("fgdsfgvvvvvvvvvvvvvvvvvvvvvvvvvvvv");
    var userId = $window.localStorage.uid;
    var param={
       currentUserId:userId,
    };
   $http.post($rootScope.STATIC_URL + 'subscription/checkMemberCategory',param).success(function (data) {
            if (data.status == 1) {
                console.log("membercategory***");
                console.log(data);
                var membercategory=data.data[0].levelTypeOne;
                console.log(data.data[0].levelTypeOne);
                if(membercategory=='professional_cmt'){
                    $scope.checkMemberType(plan_id,renew,$event);
                }
                else{
                    alert("only Professional  members can make advertisement subscription");
                }
            }else{
                console.log('error');

            }
        });
};


//***check member type
$scope.checkMemberType = function(plan_id,renew,$event){

    var userId = $window.localStorage.uid;
    var param={
       currentUserId:userId,
    };
   $http.post($rootScope.STATIC_URL + 'subscription/checkMemberType',param).success(function (data) {
            if (data.status == 1) {
                console.log("membertpe***");
                console.log(data);
                var membertype=data.data[0].professionalType;
                console.log(data.data[0].professionalType);
                 $scope.choosePackage(plan_id,renew,$event);
               /* if(membertype!='free'){
                    $scope.choosePackage(plan_id,renew,$event);
                }
                else{
                    alert("only paid members can make advertisement subscription");
                }*/
            }else{
                console.log('error');

            }
        });
};
//***
    $scope.toggleCheckbox = function(checkbox,groupIndex) {

        if(checkbox === 'onetimeCheck'){
            if($scope.packages[groupIndex].onetimeCheck){
                $scope.packages[groupIndex].renewCheck   = true;
                $scope.packages[groupIndex].onetimeCheck = false;
            }else{
                $scope.packages[groupIndex].renewCheck   = false;
                $scope.packages[groupIndex].onetimeCheck = true;
            }
        }
        if(checkbox === 'renewCheck'){
            if($scope.packages[groupIndex].renewCheck){
                $scope.packages[groupIndex].onetimeCheck   = true;
                $scope.packages[groupIndex].renewCheck = false;
            }else{
                $scope.packages[groupIndex].onetimeCheck   = false;
                $scope.packages[groupIndex].renewCheck = true;
            }
        }
    }

}]);


userControllers.controller('requestPrimaryPhotoCtrl',['$scope','$uibModalInstance','modal', function($scope, $uibModalInstance, modal){

    $scope.modal = modal;
    $scope.close = function () {

        $uibModalInstance.dismiss('cancel');
    };
    $scope.send = function (data) {
        modal.submit(data,function(){
            $uibModalInstance.dismiss('cancel');
        });
    };
}]);
userControllers.controller('requestPhotoKeyModalCtrl',['$scope','$uibModalInstance','modal', function($scope, $uibModalInstance, modal){

    $scope.modal = modal;
    $scope.close = function () {

        $uibModalInstance.dismiss('cancel');
    };
    $scope.send = function (data) {
        modal.submit(data,function(){
            $uibModalInstance.dismiss('cancel');
        });
    };
}]);

userControllers.controller('signupModalCtrl',['$scope','$uibModalInstance','$uibModal', function($scope, $uibModalInstance, $uibModal){

    $scope.modal = $uibModal;
    $scope.close = function () {

        $uibModalInstance.dismiss('cancel');
    };
    $scope.send = function (data) {
         $uibModal.submit(data,function(){
            $uibModalInstance.dismiss('cancel');
        });
    };
}]);
userControllers.controller('deleteModalCtrl',['$scope','$uibModalInstance','$uibModal', function($scope, $uibModalInstance, $uibModal){

    $scope.modal = $uibModal;
    $scope.close = function () {

        $uibModalInstance.dismiss('cancel');
    };
    $scope.send = function (data) {
         $uibModal.submit(data,function(){
            $uibModalInstance.dismiss('cancel');
        });
    };
}]);
/*===================================================================================================================================
 Payment  Controller   -----
 ====================================================================================================================================*/
 userControllers.controller('paymentCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    $scope.payments    = []; // List of all payment records

    $scope.currentPage = 1;
    $scope.pageSize    = 30;

    $scope.getPayments = function (page) {

        var promise = $http.get($rootScope.STATIC_URL + 'subscription/getMyPaymentDetails');
        promise.then(
            function(response) {
                console.log(response);
                if(response.data.status){
                    $scope.payments = response.data.data;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                console.log('failure loading data', errorresponse);
            }
            );
    }

});

//About us controller

userControllers.controller('aboutUsCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout) {
    console.log("inside about us");
});
 //Faq controller
 userControllers.controller('faqCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout) {
    console.log("inside faq us");
});

/*===================================================================================================================================
     -----   Photokey Controller   -----
     ====================================================================================================================================*/
     userControllers.controller('photokeyCtrl', function($scope, $routeParams, $rootScope, $http, $location, $window, $timeout, fileUpload, $uibModal, $log){

        $scope.generatePhotoKey = function () {

            if($routeParams.id){

                $rootScope.showloader = true;
                var promise = $http.post( $rootScope.STATIC_URL + 'users/generatePhotoKey', { objectUserId: $routeParams.id } );

                promise.then(

                    function(response) {

                        $rootScope.showloader = false;

                        $scope.modalSubmit = false;

                        if(response && response.data && response.data.status === 1 ){

                            $scope.photoKey = response.data.data.key;

                            $scope.error = false;

                            $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent to the requested person.' });


                            var appendText = '';
                        //console.log(response);
                        if(response.data.data.callbackVar !== ''){
                            var appendText = 'to ' + response.data.data.callbackVar;
                        }
                        $rootScope.addAlert({ status: true, message: 'The Photo Key has been sent ' + appendText });

                        $rootScope.showloader = false;


                    }else{

                        $scope.error = response.data.message;
                        $rootScope.showloader = false;
                    }
                },
                function(errorresponse) {

                    $log.error('failure loading data', errorresponse);
                }
                );
            }else{
                $rootScope.addAlert({ status: false, message: 'Invalid Link' });
                $rootScope.showloader = false;
            }
        };

    });

userControllers.controller('chatuserlistCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout) {
    console.log("inside chatuserlistCtrl----1");

    if(!isMobile()){

        $scope.userlist = [];
        $scope.hasUsers = true;
        $scope.updateUserList = function(){

            $scope.$applyAsync(function() {
                console.log("online" + JSON.stringify(onlineusers));
                $scope.userlist = onlineusers;
                if(Object.getOwnPropertyNames(onlineusers).length === 0){
                    $scope.hasUsers = false;
                }else{
                    $scope.hasUsers = true;
                }
            });
        }
        userListUpdateObj = $scope.updateUserList;

        $scope.openChat = function(key){
            console.log(key);
            privatechat(key); // Jquery fn
        }
        $rootScope.$watch('userLoginStatus', function(newValue, oldValue) {
            if(newValue){
                chatInit();
            }
        });

    }
    chatInit(); // we are using soket for get online users

    //initOnlineUsers(); // This fn defined in the chat-handler.js file
});

userControllers.controller('otherProfileLeftMenuCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window,$timeout) {

    console.log("inside getSearchResultOnlineUsers");
    $scope.onlineStatus = false;
    $scope.otherprofileId = 0;
    $scope.otherprofileUsername = '';

    if($routeParams.id){

        var uidObj = {};

        uidObj[$routeParams.id] = $routeParams.id;
        console.log(uidObj);
        getSearchResultOnlineUsers(uidObj);

        $scope.setSearchResultOnlineUsers = function(list){
            console.log('status list');
            console.log(list);
            $scope.$apply(function() {
                if(list.hasOwnProperty($routeParams.id)){
                    $scope.onlineStatus = true;
                    $scope.otherprofileUsername = list[$routeParams.id].username;
                    $scope.otherprofileId = $routeParams.id;
                }
            });
        }
        setSearchResultOnlineUsers = $scope.setSearchResultOnlineUsers;
    }
});

userControllers.controller('cropCtrl', function($scope) {
    $scope.myImage='';
    $scope.myCroppedImage='';

    var handleFileSelect=function(evt) {
      var file=evt.currentTarget.files[0];
      var reader = new FileReader();
      reader.onload = function (evt) {
        $scope.$apply(function($scope){
          $scope.myImage=evt.target.result;
        });
      };
      reader.readAsDataURL(file);
    };
    angular.element(document.querySelector('#fileInput')).on('change',handleFileSelect);
  });
//chart controller
userControllers.controller('chartController', function ($scope) {
              $scope.myDataSource = {
                chart: {
                    caption: "Harry's SuperMart",
                    subCaption: "Top 5 stores in last month by revenue",
                },
                data:[{
                    label: "Bakersfield Central",
                    value: "880000"
                },
                {
                    label: "Garden Groove harbour",
                    value: "730000"
                },
                {
                    label: "Los Angeles Topanga",
                    value: "590000"
                },
                {
                    label: "Compton-Rancho Dom",
                    value: "520000"
                },
                {
                    label: "Daly City Serramonte",
                    value: "330000"
                }]
              };
            });
//***
//for signup_oneTest
userControllers.controller('signupOneTestCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

     $scope.getYears = (function () {
          var today = new Date();
          var years=[];
          // var dd = today.getDate();
          //  var mm = today.getMonth()+1; //January is 0!
            var currentYear = today.getFullYear();
            var yearLimit=currentYear-18;
        for (var i=yearLimit;i>1930;i--)
        {
            years.push(i);
        }

        $scope.year=years;

    });
$scope.getYears();

    $scope.requiresLogin = false;
    $scope.formOneData = {};
    $scope.checkKey = false;
    $scope.formOneData.email = '';
    //$rootScope.showloader = true;
    $window.localStorage.formOneSubmit = false;


    $scope.checkAll = function () {

       if($scope.formOneData.therapeuticMassageOne===true)
       {
            $scope.formOneData.therapeuticMassageOne=false;
        }
        if($scope.formOneData.sensualMassageOne===true)
        {
            $scope.formOneData.sensualMassageOne=false;

        }

    };
     $scope.checkTwoAll = function () {

       if($scope.formOneData.therapeuticMassageTwo===true)
       {

            $scope.formOneData.therapeuticMassageTwo=false;
        }
        if($scope.formOneData.sensualMassageTwo===true)
        {
            $scope.formOneData.sensualMassageTwo=false;

        }



    };
     $scope.uncheckType = function () {

       if($scope.formOneData.personOneMassageType_both===true)
       {

        $scope.formOneData.personOneMassageType_both=false;
        }


    };
   $scope.uncheckTwoType = function () {


       if($scope.formOneData.personTwoMassageType_both===true)
       {

        $scope.formOneData.personTwoMassageType_both=false;
        }


    };

if ($window.localStorage.formOneData) {


    var formData = {};
    formData = JSON.parse($window.localStorage.formOneData);
        //$scope.formOneData.username = formData.username;
        $scope.formOneData.gender = formData.gender;
        $scope.formOneData.telephone = formData.telephone;
        $scope.formOneData.city = formData.city;
        $scope.formOneData.state = formData.state;
        $scope.formOneData.country = formData.country;
        $scope.formOneData.zipcode = formData.zipcode;
        $scope.formOneData.terms = formData.terms;

        // Person 1
        $scope.formOneData.therapeuticMassageOne = formData.therapeuticMassageOne;
        $scope.formOneData.therapeuticMassageOneDesc = formData.therapeuticMassageOneDesc;
        $scope.formOneData.sensualMassageOne = formData.sensualMassageOne;
        $scope.formOneData.sensualMassageOneDesc = formData.sensualMassageOneDesc;
        if (formData.personOneMassageType_both === true) {
            $scope.formOneData.therapeuticMassageOne = true;
            $scope.formOneData.sensualMassageOne = true;
        }
            var dobOne = new Date(formData.dobOne)
            $scope.formOneData.dayOne = dobOne.getDate();
            $scope.formOneData.monthOne =(dobOne.getMonth() + 1);
            $scope.formOneData.yearOne = dobOne.getFullYear();

        $scope.formOneData.languageOne = formData.languageOne;
        $scope.formOneData.bodyTypeOne = formData.bodyTypeOne;
        $scope.formOneData.heightOne = formData.heightOne;
        $scope.formOneData.drinkingHabitOne = formData.drinkingHabitOne;
        $scope.formOneData.smokingHabitOne = formData.smokingHabitOne;
        $scope.formOneData.massageFrequencyOne = formData.massageFrequencyOne;
        $scope.formOneData.levelTypeOne = formData.levelTypeOne;
        $scope.formOneData.levelTypeOneOther = formData.levelTypeOneOther;
        $scope.formOneData.professionalType = formData.professionalType;
        $scope.formOneData.experienceOne = formData.experienceOne;
        $scope.formOneData.trainingHoursOne = formData.trainingHoursOne;

        $scope.formOneData.massageStylesOne = formData.massageStylesOne;

            $scope.formOneData.massageStylesOneOther = formData.massageStylesOneOther;

        // Person 2
        $scope.formOneData.therapeuticMassageTwo = formData.therapeuticMassageTwo;
        $scope.formOneData.therapeuticMassageTwoDesc = formData.therapeuticMassageTwoDesc;
        $scope.formOneData.sensualMassageTwo = formData.sensualMassageTwo;
        $scope.formOneData.sensualMassageTwoDesc = formData.sensualMassageTwoDesc;

        if (formData.personTwoMassageType_both === true) {

            $scope.formOneData.therapeuticMassageTwo = true;
            $scope.formOneData.sensualMassageTwo = true;
        }
          var dobTwo = new Date(formData.dobTwo)
            $scope.formOneData.dayTwo = dobTwo.getDate();
            $scope.formOneData.monthTwo =(dobTwo.getMonth() + 1);
            $scope.formOneData.yearTwo = dobTwo.getFullYear();
        //$scope.formOneData.dobTwo = formData.dobTwo;
        $scope.formOneData.languageTwo = formData.languageTwo;
        $scope.formOneData.bodyTypeTwo = formData.bodyTypeTwo;
        $scope.formOneData.heightTwo = formData.heightTwo;
        $scope.formOneData.drinkingHabitTwo = formData.drinkingHabitTwo;
        $scope.formOneData.smokingHabitTwo = formData.smokingHabitTwo;
        $scope.formOneData.massageFrequencyTwo = formData.massageFrequencyTwo;
        $scope.formOneData.levelTypeTwo = formData.levelTypeTwo;
        $scope.formOneData.professionalTypeTwo = formData.professionalTypeTwo;
        $scope.formOneData.levelTypeTwoOther = formData.levelTypeTwoOther;
        $scope.formOneData.experienceTwo = formData.experienceTwo;
        $scope.formOneData.trainingHoursTwo = formData.trainingHoursTwo;
        $scope.formOneData.massageStylesTwo = formData.massageStylesTwo;
        $scope.formOneData.massageStylesTwoOther = formData.massageStylesTwoOther;

    } else {

        //Person 1 - Default
      //  $scope.formOneData.gender = 'male';
     $scope.formOneData.languageOne = '';
      $scope.formOneData.bodyTypeOne = '';
      $scope.formOneData.heightOne = '';
      $scope.formOneData.drinkingHabitOne = '';
      $scope.formOneData.smokingHabitOne = '';
      $scope.formOneData.massageFrequencyOne = '';
      $scope.formOneData.levelTypeOne = '';
      $scope.formOneData.experienceOne = 'none_at_all';
      $scope.formOneData.trainingHoursOne = 'no_formal_training';
 //       $scope.formOneData.massageStylesOne = 'deep_tissue_strong';

        //Person 2 - Default
        $scope.formOneData.languageTwo = '';
        $scope.formOneData.bodyTypeTwo = '';
        $scope.formOneData.heightTwo = null;
        $scope.formOneData.drinkingHabitTwo = '';
        $scope.formOneData.smokingHabitTwo = '';
        $scope.formOneData.massageFrequencyTwo = '';
        $scope.formOneData.levelTypeTwo = '';
        $scope.formOneData.experienceTwo = 'none_at_all';
        $scope.formOneData.trainingHoursTwo = 'no_formal_training';
      //  $scope.formOneData.massageStylesTwo = 'deep_tissue_strong';
  }

  var hashKey = $routeParams.hash;
  /*if (typeof hashKey === 'undefined' || hashKey === '') {
    $window.location.href = $rootScope.hashbang + "signup";
} else {

    $http.post($rootScope.STATIC_URL + 'users/checkSignupKey', {emailVerificationKey: hashKey}).success(function (response) {
        $rootScope.showloader = false;
        if (response.status === 1) {
            $scope.checkKey = true;
            $scope.formOneData.email = response.data.email;
        } else {
            $scope.checkKey = false;
            //$window.location.href = $rootScope.hashbang + "signup";
        }

    }).error(function (err) {
        console.log("ERROR" + err);
    });
}*/
/*$scope.formOneData.email="";
$scope.checkTelephoneNumber = (function () {
    var regex = /^([+]{1})?[0-9]{10}([0-9]+)?$/;
    return {
        test: function (value) {
            return (value.length > 0) ? regex.test(value) : true;
        }
    };
})();

$scope.resetUsernameFlags = function () {
    $scope.usernameExists = false;
    $scope.validUsername = false;
}

$scope.checkUsername = function () {

    var uname = $scope.formOneData.username;
    if ((typeof uname !== 'undefined') && (uname.length >= 6) && (uname.length <= 10)) {

        $http.post($rootScope.STATIC_URL + 'users/checkUsername', {username: uname}).success(function (response) {

            if (response.status === 1 && response.message === 'username_exists') {
                        //$scope.formOneData.username.$setValidity('invalid', true);
                        $scope.usernameExists = true;
                    } else {
                        $scope.validUsername = true;
                    }

                }).error(function (err) {
                    console.log("ERROR" + err);
                });

            } else {
                console.log('no');
            }

        }
 //----------------------------------------------LOCATION FUNCTIONALITIES 1. Countries, 2. States 3. City 4. GeoCode-------------------------------------------------------------------
    // Location based drop down
   /* $http.post($rootScope.STATIC_URL + 'users/getCountries').success(function (response) {
         if (response.status == 1)
            {
                $scope.countries= response.countries;
            }
            else
            {
                $scope.errorMessage = "No Data Available";
            }

    }).error(function () {
        $scope.errorMessage = "Please Try Again";
    });*/

        // GET states
  /*  $scope.getStates = function () {
        if (typeof $scope.formOneData.country!== 'undefined')
        {
              $rootScope.showloader = true;
            var countryId=$scope.formOneData.country;
            var params = {
                            countryName: $scope.formOneData.country,
                        };

            $http.post($rootScope.STATIC_URL + 'users/getStates',params).success(function (response) {
                 $rootScope.showloader = false;
             if (response.status == 1)
                {
                    $scope.states= response.states;
                }
                else
                {
                    $scope.errorMessage = "No Data Available";
                }

            }).error(function () {
                $scope.errorMessage = "Please Try Again";
            });
        }else
            {
                $scope.formOneData.state='null';
            }
    }*/

        //get cities
  /*  $scope.getCities = function () {
            if (typeof $scope.formOneData.state!=='undefined' && $scope.formOneData.state!='')
            {
                 $rootScope.showloader = true;
                var stateId=$scope.formOneData.state;
                var params = {
                                stateName: $scope.formOneData.state,
                            };

                $http.post($rootScope.STATIC_URL + 'users/getCities',params).success(function (response) {
                     $rootScope.showloader = false;
                 if (response.status == 1)
                    {
                        $scope.cities= response.cities;
                    }
                    else
                    {
                        $scope.errorMessage = "No Data Available";
                    }

                }).error(function () {
                    $scope.errorMessage = "Please Try Again";
                });
            }else
            {
                $scope.formOneData.city='null';
            }
    }*/



    // Find the Lattitude Longitude Using Pincode, Country & State
   /* $scope.geoCode = function () {

        var geocoder = new google.maps.Geocoder();
        var zipcode = $scope.formOneData.zipcode;
        var country = $scope.formOneData.country;
        var state = $scope.formOneData.state;
    var city = $scope.formOneData.city;
        if (zipcode && country && state) {

            geocoder.geocode({'address': zipcode, componentRestrictions: {country: country, administrativeArea: state+'+'+city}}, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK)
                {
                    $scope.formOneData.latitude = results[0].geometry.location.lat();
                    $scope.formOneData.longitude = results[0].geometry.location.lng();
                    console.log('lat' + results[0].geometry.location.lat());
                    console.log('lng' + results[0].geometry.location.lng());
                }

            });

        } else {
            $scope.formOneData.latitude = '';
            $scope.formOneData.longitude = '';
        }
    }
   //----------------------------------------------LOCATION FUNCTIONALITIES END-------------------------------------------------------------------
    $scope.signupOneFormSubmit = function (isValid, formOneData, signupOneForm) {
        if (isValid === true && $scope.validUsername) {
            $scope.geoCode();
            $window.localStorage.formOneData = JSON.stringify(formOneData);
            $window.localStorage.formOneSubmit  = true;
            $location.path('/signup_two/' + hashKey);


        } else {
            $timeout(function () {
                console.log(angular.element("[name='" + signupOneForm.$name + "']"));
                angular.element("[name='" + signupOneForm.$name + "']").find('.ng-invalid:visible:first').focus();
                return false;
            }, 0);
        }
    }*/


$timeout(function(){
                MapLoading($scope);
        },100);
        var mapDetails;
         $("#geocomplete").bind("geocode:dragged", function(event, latLng){
             $scope.State="";
             $scope.Zip=""
          $("input[name=lat]").val(latLng.lat());
          $("input[name=lng]").val(latLng.lng());
          $("#reset").show();
         console.log(latLng.lat());
         console.log(latLng.lng());
          /***location**/
        var latitude=latLng.lat();
        var longitude=latLng.lng();
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(latitude, longitude);

        geocoder.geocode(
            {'latLng': latlng},
            function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {

                        if (results[0]) {
                            $scope.formOneData.state="";
                            var add= results[0].formatted_address ;
                            $scope.formOneData.Location=add;
                            var  value=add.split(",");
                            var count=value.length;
                            var country=value[count-1];
                            var state=value[count-2];
                            var city=value[count-3];
                            var zip=state.trim().split(" ");
                            var len=zip.length;

                             $scope.formOneData.Country=country;
                             if(len>2){
                                 for(var i=0;i<len-1;i++){
                                    $scope.formOneData.state+=zip[i];
                                }
                                $scope.Zip=zip[len-1];
                             }
                             else if(len==2){
                                 $scope.formOneData.state=zip[0];
                                 $scope.formOneData.zipcode=zip[1];
                             }
                             $scope.formOneData.city=city;

                            $scope.$apply();
                        }
                        else  {
                            alert("address not found");
                        }

                }
                 else {
                    alert("Geocoder failed due to: " + status);
                }
            }
        );
        /**end location**/
        });

});
function MapLoading($scope){
          $("#geocomplete").geocomplete({
          map: ".map_canvas",
          location: [37.23032858416721, -94.65820349999996],
           details: "div",
    	 	types: ["address"],
          //detailsAttribute: "data-geo",
          markerOptions: {
            draggable: true
          },
          mapOptions: {
              zoom: 14,
              scrollwheel: true,
              mapTypeId: "roadmap"
            }
        });

         var latln;
        var lon;

        $( ".map_canvas" ).show();
        //calls on marker is draged.
        $("#geocomplete").bind("geocode:dragged", function(event, latLng){
             $scope.State="";
             $scope.Zip=""
          $("input[name=lat]").val(latLng.lat());
          $("input[name=lng]").val(latLng.lng());
          $("#reset").show();

          /***location**/
        var latitude=latLng.lat();
        var longitude=latLng.lng();
        var geocoder;
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(latitude, longitude);

        geocoder.geocode(
            {'latLng': latlng},
            function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                        if (results[0]) {
                            $scope.formOneData.state="";
                            var add= results[0].formatted_address ;
                            var  value=add.split(",");
                            var count=value.length;
                            var country=value[count-1];
                            var state=value[count-2];
                            var city=value[count-3];
                            var zip=state.trim().split(" ");
                            var len=zip.length;
                             $scope.formOneData.Country=country;
                             if(len>2){
                                 for(var i=0;i<len-1;i++){
                                    $scope.formOneData.state+=zip[i];
                                }
                                $scope.Zip=zip[len-1];
                             }
                             else if(len==2){
                                  $scope.formOneData.state=zip[0];
                                 $scope.formOneData.zipcode=zip[1];
                             }

                              $scope.formOneData.city=city;

                            $scope.$apply();
                        }
                        else  {
                            alert("address not found");
                        }


                }
                 else {
                    alert("Geocoder failed due to: " + status);
                }
            }
        );
        /**end location**/
        });
     }

userControllers.controller('ImgCropController', function($scope, $rootScope, $http, $uibModalInstance, $timeout, model) {

    //$scope.myImage = 'http://192.168.1.63:9002/images/profilePics/tomcruise/thumb/c430d17f-f3b5-47be-b733-a478a40a81f9.png';
    if(model){
        $scope.myImage = model.image;
        $scope.areaType = 'square';
        $scope.myCroppedImage = '';


        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.cropIt = function() {
            console.log(model);
            $rootScope.showloader = true;
            $scope.cropDetails.img_id   = model.img_id;
            $scope.cropDetails.img_type = model.img_type;
            console.log($scope.cropDetails);
            $http.post($rootScope.STATIC_URL + 'photo/cropimg', $scope.cropDetails).success(function (response) {

                if (response.status === 1) {
                    console.log('success');
                    $scope.cancel();
                    $timeout(function () {
                        $rootScope.showloader = false;
                        $rootScope.profilePic = $rootScope.profilePic + '?realod='+ new Date();
                        $rootScope.profilePicNoThumb = $rootScope.profilePicNoThumb + '?realod='+ new Date();
                    }, 3000);
                } else {
                    $scope.errorMessage = "Error in process";
                }

            }).error(function (err) {

                console.log("Error");
                console.log(JSON.stringify(err));

            });
        }
    }


    $scope.$watch('cropDetails', function(newDetails){
      if (newDetails && newDetails.image && newDetails.image.width) {
        $scope.x = newDetails.x - newDetails.size / 2;
        $scope.y = newDetails.y - newDetails.size / 2;
        $scope.w = newDetails.size;
        $scope.h = newDetails.size;
        $scope.newDetailsJSON = JSON.stringify(newDetails, null, 2);

        var f = newDetails.image.width / newDetails.canvas.width;
        $scope.scaleFactor = (1 / f * 100).toLocaleString('en', {maximumFractionDigits:1, useGrouping:false});
        $scope.realX = ($scope.x * f).toLocaleString('en', {maximumFractionDigits:1, useGrouping:false});
        $scope.realY = ($scope.y * f).toLocaleString('en', {maximumFractionDigits:1, useGrouping:false});
        $scope.realW = ($scope.w * f).toLocaleString('en', {maximumFractionDigits:1, useGrouping:false});
        $scope.realH = ($scope.h * f).toLocaleString('en', {maximumFractionDigits:1, useGrouping:false});
      }
    });

    $scope.toggleAreaType = function() {
      $scope.areaType = $scope.areaType === 'circle' ? 'square' : 'circle';
    };


});

/*===================================================================================================================================
 Bonus  Controller   -----
===================================================================================================================================*/
userControllers.controller('bonusCtrl', function ($scope, $routeParams, $rootScope, $http, $location, $window, $timeout) {

    $scope.bonusrecords    = []; // List of all bonus records

    $scope.currentPage = 1;
    $scope.pageSize    = 30;

    $scope.getBonusRecords = function (page) {

        var promise = $http.get($rootScope.STATIC_URL + 'subscription/getMyBonusHistory');
        promise.then(
            function(response) {
                console.log(response);
                if(response.data.status){
                    $scope.bonusrecords = response.data.data;
                }else{
                    $rootScope.addAlert(response.data);
                }
            },
            function(errorresponse) {
                console.log('failure loading data', errorresponse);
            }
        );
    }

});

/* upload area  to test */

userControllers.controller('testCropPhoto', ['$scope','$rootScope','$http','$timeout','$window','$route','fileUpload', function($scope,$rootScope,$http,$timeout,$window,$route,fileUpload){

    $scope.testCrop = function(){

		croppieResult.croppie('result', {
			type: 'canvas',
			format: 'png'
		}).then(function (resp,a,b) {

			$rootScope.showloader = true; // Loader Enabling

			$http.post($rootScope.STATIC_URL + 'phase2/saveprofileimg', { image: resp }).success(function (response) {
				if (response.status === 1) {
                    $timeout(function () {
                        $rootScope.showloader = false;
                        $window.localStorage.setItem("user", JSON.stringify(response.data[0]));
                        $rootScope.profilePic = Config.NODE_ASSETS+'/profilePics/'+response.data[0].username+'/thumb/'+response.data[0].profilePic + '?now='+ new Date().getTime();
                        $rootScope.profilePicNoThumb = $rootScope.profilePicNoThumb + '?realod='+ new Date();
                        $route.reload();
                    }, 3000);
				} else {
					$scope.errorMessage = "Error..";
				}

			}).error(function (err) {

				console.log("Error");
				console.log(JSON.stringify(err));

			});
		});
    };

}]);

(function(window, document) {

// Create all modules and define dependencies to make sure they exist
// and are loaded in the correct order to satisfy dependency injection
// before all nested files are concatenated by Grunt

// Config
angular.module('gm.config', [])
    .value('gm.config', {
        debug: true,
        placess: {
            autocomplete: {}
        }
    })
    .run(['$window', function($window){

        // Check for dependencies
        if(
            angular.isUndefined($window.google) ||
            angular.isUndefined($window.google.maps)
            ){
            throw new Error('Google Maps API not available, please make sure the Google Maps library is loaded before the AngularJS Google Maps library is loaded');
        }
    }]);

// Places modules
angular.module('gm.places.directives', []);
angular.module('gm.places', [
    'gm.places.directives'
])
    .run(['$window', function($window){

        // Check for dependencies
        if(
            angular.isUndefined($window.google) ||
            angular.isUndefined($window.google.maps) ||
            angular.isUndefined($window.google.maps.places) ||
            angular.isUndefined($window.google.maps.places.Autocomplete)
            ){
            throw new Error('Google Maps API not available, please make sure the Google Maps library is loaded before the AngularJS Google Maps library is loaded');
        }
    }]);

// Modules
angular.module('gm.directives', []);
angular.module('gm.filters', []);
angular.module('gm.services', []);
angular.module('gm', [
    'gm.config',
    'gm.directives',
    'gm.filters',
    'gm.services',
    'gm.places'
]);
/**
 * Logger service
 */
angular.module('gm.services')
    .factory('logger', ['$log', '$window', function ($log, $window) {

        // Create service
        var service = {};

        // Proxy regular methods to $log
        angular.forEach(['log', 'info', 'warn', 'error'], function(method){
            service[method] = function(){
                return $log[method](arguments);
            };
        });


        // Add dir method to hierarchically display objects
        service.dir = function (obj, title) {
            if ($window.console) {
                if (angular.isDefined(title)) {
                    $log.info(title + ':');
                }
                $window.console.dir(obj);
            }
        };

        return service;
    }]);angular.module('gm.places')
    .directive('gmPlacesAutocomplete', ['$rootScope', 'gm.config', 'logger', function($rootScope, gmConfig, logger){

        var configOptions = (gmConfig.places && gmConfig.places.autocomplete) || {};

        return {
            restrict: 'AEC',
            require : ['gmPlacesAutocomplete', '?ngModel'],
            controller: ['$scope', '$element', '$attrs', '$transclude', function($scope, $element, $attrs, $transclude){

                this._options = angular.extend({}, configOptions, $scope.$eval($attrs.gmOptions));
                this._element = $element[0];
                this._api = undefined;

                // Define properties
                Object.defineProperties(this, {
                    element: {
                        get: function(){
                            return this._element;
                        },
                        configurable: false
                    },
                    api: {
                        get: function(){
                            return this._api;
                        },
                        configurable: false
                    }
                });

                try {
                    this._api = new google.maps.places.Autocomplete(this._element, this._options);
                }
                catch (err)
                {
                    if(gmConfig.debug) logger.log('Could not instantiate gmPlacesAutocomplete directive: ' + err.message);
                }

            }],
            link: function(scope, iElement, iAttrs, controllers){

                // Define controllers
                var gmPlacesAutocompleteController = controllers[0];
                var ngModelController = controllers[1];

                // Set initial model value if a model is defined
                if (ngModelController) {
                    ngModelController.$setViewValue(gmPlacesAutocompleteController.api);
                }

                // Listen to place_changed event
                google.maps.event.addListener(gmPlacesAutocompleteController.api, 'place_changed',
                    (function(scope, iElement, iAttrs, gmPlacesAutocompleteController, ngModelController, $rootScope){
                        return function(){

                            // Update model if there is one
                            if (ngModelController) {
                                ngModelController.$setViewValue(gmPlacesAutocompleteController.api);
                            }

                            // Broadcast event
                            $rootScope.$broadcast('gmPlacesAutocomplete::placeChanged', gmPlacesAutocompleteController);
                        };
                    })(scope, iElement, iAttrs, gmPlacesAutocompleteController, ngModelController, $rootScope)
                );

            }
        };

    }]);})(window, document);

'use strict';
/* All directives used in Both Admin side and Client Side */

var zentieraDirectives = angular.module('zentieraDirectives', []);

zentieraDirectives.directive('imageonload', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.bind('load', function() {
                //alert('image is loaded');
            });
            element.bind('error', function(){
                //alert('image could not be loaded');
            });
        }
    };
});

// Toggle header nav for mobile menu.
zentieraDirectives.directive('togglenav', function () {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs, ctrl) {
            elem.on('click', function () {
                angular.element("#navBtn").toggleClass('collapsed');
                angular.element("#bs-example-navbar-collapse-1").toggleClass('in');
            });
        }
    }
});

// Custom directive for password check.
zentieraDirectives.directive('pwCheck', function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attrs, ctrl) {
            var firstPassword = '#' + attrs.pwCheck;
            elem.add(firstPassword).on('keyup', function () {
                scope.$apply(function () {
                    var v = elem.val() === $(firstPassword).val();
                    ctrl.$setValidity('pwmatch', v);
                });
            });
        }
    }
});

// Custom directive for checkbox group.
zentieraDirectives.directive("checkboxGroup", function () {
    return {
        restrict: "A",
        link: function (scope, elem, attrs) {
            // Determine initial checked boxes
            if (scope.array.indexOf(scope.item.id) !== -1) {
                elem[0].checked = true;
            }

            // Update array on click
            elem.bind('click', function () {
                var index = scope.array.indexOf(scope.item.id);
                // Add if checked
                if (elem[0].checked) {
                    if (index === -1)
                        scope.array.push(scope.item.id);
                }
                // Remove if unchecked
                else {
                    if (index !== -1)
                        scope.array.splice(index, 1);
                }
                // Sort and update DOM display
                scope.$apply(scope.array.sort(function (a, b) {
                    return a - b
                }));
            });
        }
    }
});

zentieraDirectives.directive('checkboxGroup', function () {
    return {
        restrict: 'E',
        controller: function ($scope, $attrs) {
            var self = this;
            var ngModels = [];
            var minRequired;
            self.validate = function () {
                var checkedCount = 0;
                angular.forEach(ngModels, function (ngModel) {
                    if (ngModel.$modelValue) {
                        checkedCount++;
                    }
                });
                //console.log('minRequired', minRequired);
                //console.log('checkedCount', checkedCount);
                var minRequiredValidity = checkedCount >= minRequired;
                angular.forEach(ngModels, function (ngModel) {
                    ngModel.$setValidity('checkboxGroup-minRequired', minRequiredValidity, self);
                });
            };

            self.register = function (ngModel) {
                ngModels.push(ngModel);
            };

            self.deregister = function (ngModel) {
                var index = this.ngModels.indexOf(ngModel);
                if (index != -1) {
                    this.ngModels.splice(index, 1);
                }
            };

            $scope.$watch($attrs.minRequired, function (value) {
                minRequired = parseInt(value, 10);
                self.validate();
            });
        }
    };
});

zentieraDirectives.directive('input', function () {
    return {
        restrict: 'E',
        require: ['?^checkboxGroup', '?ngModel'],
        link: function (scope, element, attrs, controllers) {
            var checkboxGroup = controllers[0];
            var ngModel = controllers[1];
            if (attrs.type == 'checkbox' && checkboxGroup && ngModel) {
                checkboxGroup.register(ngModel);
                scope.$watch(function () {
                    return ngModel.$modelValue;
                }, checkboxGroup.validate);
                // In case we are adding and removing checkboxes dynamically we need to tidy up after outselves.
                //scope.$on('$destroy', function () {
                //    checkboxGroup.deregister(ngModel);
                //});
            }
        }
    };
});

zentieraDirectives.directive('tokenfield', function ($timeout, $log) {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs,modelCtrl) {

            angular.element(elem).tokenfield({limit: 4});
            $timeout(function () {
                if (attrs.id === 'languageOne') {
                    //  console.log(scope.formOneData.languageOne);
                    //  var cap= scope.formOneData.languageOne.charAt(0).toUpperCase() +  scope.formOneData.languageOne.substring(1);

                     angular.element(elem).tokenfield('setTokens',scope.formOneData.languageOne );

                } else if (attrs.id === 'languageTwo') {
                    angular.element(elem).tokenfield('setTokens', scope.formOneData.languageTwo);
                } else if (attrs.id === 'language') {
                    // Edit search field
                    angular.element(elem).tokenfield('setTokens', scope.formTwoData.language);
                }
            }, 800, false);
        }
    };
});

//Basic Click
zentieraDirectives.directive('basicClick', function($parse, $rootScope) {
  return {
    compile: function(elem, attr) {
      var fn = $parse(attr.basicClick);
      return function(scope, elem) {
        elem.on('click', function(e) {
          fn(scope, {$event: e});
          scope.$apply();
        });
      };
    }
  };
});

//capitalize first Letter of each word
/*zentieraDirectives.directive('capitalizeFirst', function (uppercaseFilter, $parse) {
        return {
            require: 'ngModel',
            scope: {
                ngModel: "="
            },
            link: function (scope, element, attrs, modelCtrl) {

                scope.$watch("ngModel", function () {
                    scope.ngModel = scope.ngModel.replace(/^(.)|\s(.)/g, function(v){ return v.toUpperCase( ); });
                });
            }
        };
    });
*/
/*
zentieraDirectives.directive('capitalizeFirst', ['$filter', function ($filter) {
    return {
        require: 'ngModel',
         scope: {
                ngModel: "="
            },
            link: function (scope, element, attrs, modelCtrl) {

                scope.$watch("ngModel", function () {

                     scope.ngModel = scope.ngModel.replace(/^(.)|\s(.)/g, function(v){ return v.toUpperCase( ); });

                });
            }

        };
}]);
*/
//Scroll Top Directive
zentieraDirectives.directive('scrollTopOnChange', function() {
  return {
    restrict: 'A',
    link: function(scope, $elm, attrs) {
      var idToScroll = attrs.href;
      $elm.on('click', function() {
        var $target;
        if (idToScroll) {
          $target = $(idToScroll);
        } else {
          $target = $elm;
        }
        $("body").animate({scrollTop: $target.offset().top}, "slow");
      });
    }
  }
});

zentieraDirectives.directive('datetimepicker', [function () {
        var date = new Date();
        date.setFullYear(date.getFullYear() - 18);
        var yearEnd = date.getFullYear();
        var dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {
                elem.datetimepicker({
                    yearStart: '1920',
                    yearEnd: yearEnd,
                    minDate: '1920-01-1',
                    maxDate: '',
                    timepicker: false,
                    format: 'Y-m-d',
                    //defaultDate: new Date(),
                    defaultDate: dateString,
                    formatDate: 'Y-m-d',
                    closeOnDateSelect: true,
                    mask: false,
                    defaultSelect: true,
                    scrollInput: false,
                    prevButton: false,
                    nextButton: false,
                    scrollMonth: false
                }).attr('readonly', 'readonly');
            }
        };
    }
]);


//Go Back Directive
zentieraDirectives.directive('goBack', function($window){
    return function($scope, $element){
        $element.on('click', function(){
        $window.history.back();
        })
    }
});


//For image upload
zentieraDirectives.directive('fileModel', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;

                element.bind('change', function () {

                    scope.$apply(function () {
                        modelSetter(scope, element[0].files[0]);
                        scope.filename = element[0].files[0];
                        scope.fmodel = element[0].files[0];
                        scope.choosenFile = {};

                        var file, img;
                        var _URL = window.URL || window.webkitURL;
						if ((file = element[0].files[0])) {
							img = new Image();
							img.onload = function () {
								scope.choosenFile.width = this.width
								scope.choosenFile.height = this.height;
							};
							img.src = _URL.createObjectURL(file);
						}
                        if(scope.onFilePick){
                            scope.onFilePick();
                        }
                    });
                });
            }
        };
    }
]);

//Multiple Image Upload
zentieraDirectives.directive('ngFileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var model = $parse(attrs.ngFileModel);
            var isMultiple = attrs.multiple;
            var modelSetter = model.assign;
            element.bind('change', function () {
                var values = [];
                angular.forEach(element[0].files, function (item) {
                    var value = {
                       // File Name
                        name: item.name,
                        //File Size
                        size: item.size,
                        //File URL to view
                        url: URL.createObjectURL(item),
                        // File Input Value
                        _file: item
                    };
                    values.push(value);
                });
                scope.$apply(function () {
                    if (isMultiple) {
                        modelSetter(scope, values);
                    } else {
                        modelSetter(scope, values[0]);
                    }
                });
            });
        }
    };
}]);

//Pagination in List Blog
zentieraDirectives.directive('paginator', function factory() {
    return {
        restrict: 'E',
        controller: function ($scope, Paginator) {
            $scope.paginator = Paginator;
        },
        templateUrl: 'pagination.html'
    };
});

// Including fileinput.js plugin within angularjs
zentieraDirectives.directive('fileinput', function($http,$rootScope) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            // console.log(scope);
            // console.log(element);
            // console.log(attrs);
            var headers = { 'user-token': $http.defaults.headers.common['user-token'], 'user-role': $http.defaults.headers.common['user-role'] };
            myFileInput({ overwriteInitial: true, uploadUrl : $rootScope.STATIC_URL+'users/addPhoto?date='+new Date().getTime(), ajaxSettings: { headers: headers } });
        }
    };
});

zentieraDirectives.directive('onEnterKeyPress', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.onEnterKeyPress);
                });

                event.preventDefault();
            }
        });
    };
});
// Used in Select Field to
zentieraDirectives.directive('convertToNumber', function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(val) {
        return val ? parseInt(val, 10) : null;
      });
      ngModel.$formatters.push(function(val) {
        return val ? '' + val : null;
      });
    }
  };
});
// select field to decimal
zentieraDirectives.directive('toPrecision', function(){
    return {
    require: 'ngModel',
    link: function(scope, element, attrs, ngModel) {
      ngModel.$parsers.push(function(val) {
        return val ? parseFloat(val, 100) : null;
      });
      ngModel.$formatters.push(function(val) {
        return val ? '' + val : null;
      });
    }
  };
});

//Date picker for only future dates
zentieraDirectives.directive('futureDatePicker', [function () {
        var date = new Date();
        console.log(date);
        console.log("date");
        date.setFullYear(date.getFullYear());
        //var yearEnd = date.getFullYear();
        var dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
        console.log(dateString);
         console.log("dateString");
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {
                elem.datetimepicker({
                    yearStart: '2016',
                    //yearEnd: '2060',
                    minDate: new Date(),
                    //maxDate: new Date(),
                    timepicker: false,
                    format: 'Y-m-d',
                    defaultDate: new Date(),
                    //defaultDate: dateString,
                    formatDate: 'Y-m-d',
                    closeOnDateSelect: false,
                    //mask: false,
                    defaultSelect: false,
                    scrollInput: false,
                    prevButton: false,
                    nextButton: false,
                    scrollMonth: false
                }).attr('readonly', 'readonly');
            }
        };


    }
]);

//Date picker for All dates
zentieraDirectives.directive('allDatePicker', [function () {
        var date = new Date();
        console.log(date);
        console.log("date");
        date.setFullYear(date.getFullYear());
        //var yearEnd = date.getFullYear();
        var dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
        console.log(dateString);
         console.log("dateString");
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {
                elem.datetimepicker({
                    yearStart: '2000',
                    yearEnd: '2300',
                    //minDate: new Date(),
                    //maxDate: new Date(),
                    timepicker: false,
                    format: 'Y-m-d',
                    defaultDate: new Date(),
                    //defaultDate: dateString,
                    formatDate: 'Y-m-d',
                    closeOnDateSelect: false,
                    //mask: false,
                    defaultSelect: false,
                    scrollInput: false,
                    prevButton: false,
                    nextButton: false,
                    scrollMonth: false
                }).attr('readonly', 'readonly');
            }
        };


    }
]);


//To disable(div) other than button
zentieraDirectives.directive('disabledElement', function () {
    return {
       restrict: 'A',
        scope: {
            disabled: '@'
        },
        link: function (scope, element, attrs) {
            scope.$parent.$watch(attrs.disabledElement, function (newVal) {
                if (newVal)
                    $(element).css({'pointerEvents' : 'none', 'opacity': '.65' });
                else
                    $(element).css({'pointerEvents' : 'all', 'opacity': 'none' });
            });
        }
    }
});

//** confirmation for un-favourite sulthan

zentieraDirectives.directive('ngConfirmClick', [
        function() {
            return {
                link: function (scope, element, attr) {
                    var msg = attr.ngConfirmClick || "Are you sure?";
                    var clickAction = attr.confirmedClick;
                    element.bind('click', function (event) {
                        if (window.confirm(msg)) {
                            scope.$eval(clickAction)
                        }
                    });
                }
            };
}]);

app.directive('head', ['$rootScope','$compile',
    function($rootScope, $compile){
        return {
            restrict: 'E',
            link: function(scope, elem){
                var html = '<link rel="stylesheet" ng-repeat="(routeCtrl, cssUrl) in routeStyles" ng-href="{{cssUrl}}" />';
                elem.append($compile(html)(scope));
                scope.routeStyles = {};
                $rootScope.$on('$routeChangeStart', function (e, next, current) {
                    if(current && current.$$route && current.$$route.css){
                        if(!angular.isArray(current.$$route.css)){
                            current.$$route.css = [current.$$route.css];
                        }
                        angular.forEach(current.$$route.css, function(sheet){
                            delete scope.routeStyles[sheet];
                        });
                    }
                    if(next && next.$$route && next.$$route.css){
                        if(!angular.isArray(next.$$route.css)){
                            next.$$route.css = [next.$$route.css];
                        }
                        angular.forEach(next.$$route.css, function(sheet){
                            scope.routeStyles[sheet] = sheet;
                        });
                    }
                });
            }
        };
    }
]);

zentieraDirectives.directive('imgLoadHandler', function ($timeout) {
  var fallbackSrc = {
    link: function postLink(scope, iElement, iAttrs) {
      iElement.bind('error', function() {
            // console.log('has error');
            var elm= angular.element(this);
            $timeout(function () {
                var count = 0;
                if(!iElement.loadcount){
                    iElement.loadcount = 0;
                }
                if(iElement.loadcount < 10){
                    elm.attr("src", elm.attr("src"));
                    iElement.loadcount++;
                }
            }, 1000);
      });
    }
   }
   return fallbackSrc;
});


/*Directive for bootstrap switch*/
zentieraDirectives.directive('bootstrapSwitch', [
        function() {
            return {
                restrict: 'A',
                require: '?ngModel',
                link: function(scope, element, attrs, ngModel) {
                    element.bootstrapSwitch();

                    element.on('switchChange.bootstrapSwitch', function(event, state) {
                        if (ngModel) {
                            scope.$apply(function() {
                                ngModel.$setViewValue(state);
                            });
                        }
                    });

                    scope.$watch(attrs.ngModel, function(newValue, oldValue) {
                        if (newValue) {
                            element.bootstrapSwitch('state', true, true);
                        } else {
                            element.bootstrapSwitch('state', false, true);
                        }
                    });
                }
            };
        }
    ]);

// Including fileinput.js plugin within angularjs
zentieraDirectives.directive('chatjs', function($http,$rootScope) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            chatJsHandler();
        }
    };
});

///***directive to implement bottom advertisement
zentieraDirectives.directive('navBannerBottom', ['NavBannerServiceBottom', function (nbs) {
     return {
        restrict: 'E',
        //scope: true,
        scope: {},
        replace: true,
      template:'<div ng-hide="errorStatus"><a href= "{{banner_link}}"  target="_blank"> <img src="{{zentieraUrl}}/assets/images/adBanner/{{banner_pic_url}}" style="width:450px;height:87px;"> </div>',
        link: function ($scope,$element,$attr) {

            var imagePosition=$attr.imageposition;

              nbs.getImage(imagePosition).then(function(result){
                   if(result.status==3){
                     $scope.errorStatus=true;
                    }
                    else{
                  $scope.banner_pic_url = result.data.banner;
                  $scope.zentieraUrl=Config.STATIC_SAILS_URL;
                  $scope.banner_link=result.data.adlink;
                  $scope.errorStatus=false;
              }
            });
        }
    };

}]);
///****directive to implement bottom advertisement
zentieraDirectives.directive('navBannerTop', ['NavBannerServiceTop','$rootScope', function (nbs,$window) {

     return {
        restrict: 'E',
        //scope: true,
        scope: {},
        replace: true,
      template:'<div ng-hide="errorStatus"><a href= "{{banner_link}}"  target="_blank"><img src="{{zentieraUrl}}/assets/images/adBanner/{{banner_pic_url}}" style="width:450px;height:87px;"></div>',
       //template:' <div><a href= "{{banner_link}}"  target="_blank"> <img ng-src="{{zentieraUrl}}/assets/images/adBanner/{{banner_pic_url}}"></a><span ng-click="closeAdvertisement()">X</span></div>',

             //template:' <div><a href= "{{banner_link}}"  target="_blank"> <img ng-src='Config.STATIC_SAILS_URL+/assets/images/adBanner/{{banner_pic_url}}'></a></div>',

        link: function ($scope,$element,$attr,$rootScope) {
              var imagePosition=$attr.imageposition;
              nbs.getImage(imagePosition).then(function(result){
                    if(result.status==3){
                    $scope.errorStatus=true;
                    }
                    else{
                  // console.log("directive page"+$rootScope.STATIC_URL);
                  $scope.banner_pic_url = result.data.banner;
                  $scope.zentieraUrl=Config.STATIC_SAILS_URL;
                  $scope.banner_link=result.data.adlink;
                  $scope.errorStatus=false;

              }
            });
        }

    };

}]);

/////*** directive to implement left side advertisement
zentieraDirectives.directive('navBannerSideLeft', ['NavBannerServiceLeftSide','$rootScope', function (nbs) {
     return {
        restrict: 'E',
        //scope: true,
        scope: {},
        replace: true,
 template:'<div ng-hide="errorStatus"><a href= "{{banner_link}}"  target="_blank"><img src="{{zentieraUrl}}images/adBanner/{{banner_pic_url}}" ></a></div>',

    link: function ($scope,$element,$attr,$rootScope) {
              var imagePosition=$attr.imageposition;
              nbs.getImage(imagePosition).then(function(result){
                    if(result.status==3){
                    $scope.errorStatus=true;
                    }
                    else{
                  // console.log("directive page"+$rootScope.STATIC_URL);
                  $scope.banner_pic_url = result.data.banner;
                  $scope.zentieraUrl=Config.STATIC_URL;
                  $scope.banner_link=result.data.adlink;
                  $scope.errorStatus=false;

              }
            });
        }
    };

}]);
////*** directive to implement right side advertisement
zentieraDirectives.directive('navBannerSideRight', ['NavBannerServiceRightSide','$rootScope', function (nbs) {
     return {
        restrict: 'E',
        //scope: true,
        scope: {},
        replace: true,
        template:' <div><a href= "{{banner_link}}"  target="_blank"> <img ng-src="{{zentieraUrl}}/assets/images/adBanner/{{banner_pic_url}}"></a></div>',


        link: function ($scope,$element,$attr,$rootScope) {
              var imagePosition=$attr.imageposition;
              nbs.getImage(imagePosition).then(function(result){
                    if(result.status==3){
                    $scope.errorStatus=true;
                    }
                    else{
                  // console.log("directive page"+$rootScope.STATIC_URL);
                  $scope.banner_pic_url = result.data.banner;
                  $scope.zentieraUrl=Config.STATIC_SAILS_URL;
                  $scope.banner_link=result.data.adlink;
                  $scope.errorStatus=false;

              }
            });
        }
    };

}]);
//*** upto this
//***to check image exists or not sulthan
zentieraDirectives.directive('errSrc', function() {
    console.log("### inside image check");
  return {
    link: function(scope, element, attrs) {
      element.bind('error', function() {
        if (attrs.src != attrs.errSrc) {
          attrs.$set('src', attrs.errSrc);
        }
      });
    }
  }
});

/*
return {
        restrict: 'E',
        scope: true,
        replace: true,
        template: '<div><img ng-src={{banner_pic_url}}></div>',
        link: function ($scope) {
           var addImage = $http.get( $rootScope.STATIC_URL + 'admins/getadvertisement');
           addImage.then(function(){
            console.log("inside add");
                $scope.banner_pic_url = "http://www.weathersource.ca/resources/advertise-banner.png";
            });
        }
    };
    */
zentieraDirectives.directive('noclick', function() {
    return {
        restrict: 'C',
        link: function(scope, elem, attrs) {
            elem.on('click', function(e){
                e.preventDefault();
            });
        }
   };
});

// comment this directive code if you are using [  $locationProvider.html5Mode(true); ]

// zentieraDirectives.directive('a', function () {
//     return {
//         restrict: 'E',
//         link: function (scope, elem, attrs, ctrl) {
//          console.log(attrs.href);
//             if(attrs.href){
//              console.log('=======>');
//              $(elem).attr('href',attrs.href.replace("#/", ""));
//          }
//         }
//     }
// });
zentieraDirectives.directive('fallbackSrc', function () {
  var fallbackSrc = {
    link: function postLink(scope, iElement, iAttrs) {
      iElement.bind('error', function() {
        angular.element(this).attr("src", iAttrs.fallbackSrc);
      });
    }
   }
   return fallbackSrc;
});



//Accordion Directive STARTS

zentieraDirectives.directive("btstAccordion", function () {
    return {
        restrict: "E",
        transclude: true,
        replace: true,
        scope: {},
        template:
            "<div class='accordion' ng-transclude></div>",
        link: function (scope, element, attrs) {

            // give this element a unique id
            var id = element.attr("id");
            if (!id) {
                id = "btst-acc" + scope.$id;
                element.attr("id", id);
            }

            // set data-parent on accordion-toggle elements
            var arr = element.find(".accordion-toggle");
            for (var i = 0; i < arr.length; i++) {
                $(arr[i]).attr("data-parent", "#" + id);
                $(arr[i]).attr("href", "#" + id + "collapse" + i);
            }
            arr = element.find(".accordion-body");
            $(arr[0]).addClass("in"); // expand first pane
            for (var i = 0; i < arr.length; i++) {
                $(arr[i]).attr("id", id + "collapse" + i);
            }
        },
        controller: function () {}
    };
});

zentieraDirectives.directive('btstPane', function () {
    return {
        require: "^btstAccordion",
        restrict: "E",
        transclude: true,
        replace: true,
        scope: {
            title: "@",
            category: "=",
            order: "="
        },
        template:
            "<div class='accordion-group' >" +
            "  <div class='accordion-heading'>" +
            "    <a class='accordion-toggle' data-toggle='collapse'> {{category.name}} - </a>" +

            "  </div>" +
            "<div class='accordion-body collapse'>" +
            "  <div class='accordion-inner' ng-transclude></div>" +
            "  </div>" +
            "</div>",
        link: function (scope, element, attrs) {
            scope.$watch("title", function () {
                // NOTE: this requires jQuery (jQLite won't do html)
                var hdr = element.find(".accordion-toggle");
                hdr.html(scope.title);
            });
        }
    };
});

//Accordion Directive ENDS

//To bind directive in html
zentieraDirectives.directive('bindDirectiveHtml', ['$compile', function ($compile) {
      return function(scope, element, attrs) {
          scope.$watch(
            function(scope) {
               // watch the 'compile' expression for changes
              return scope.$eval(attrs.bindDirectiveHtml);
            },
            function(value) {
              // when the 'compile' expression changes
              // assign it into the current DOM
              element.html(value);

              // compile the new DOM and link it to the current
              // scope.
              // NOTE: we only compile .childNodes so that
              // we don't get into infinite loop compiling ourselves
              $compile(element.contents())(scope);
            }
        );
    };
}]);
zentieraDirectives.directive('respic', function ($timeout) {
  var fallbackSrc = {
    link: function postLink(scope, iElement, iAttrs) {
		$("#userProfilePicture").height($("#userProfilePicture").width());
    }
   }
   return fallbackSrc;
});

 zentieraDirectives.directive('scrollTo', ['ScrollTo', function(ScrollTo){
   // alert('hi');
    if(isMobile()){
        //alert('mobile');
         return {
      restrict : "AC",
      compile : function(){

        return function(scope, element, attr) {
          element.bind("click", function(event){
            ScrollTo.idOrName(attr.scrollTo, attr.offset);
          });
        };
      }
    };
    }
    else{

       console.log("this is not a mobile device");
    }
  }]);

var croppieResult = {};
// For image repositioning
zentieraDirectives.directive('croppie', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            croppieResult = element;
            element.croppie({
				viewport: {
					width: 264,
					height: 264
				},
				boundary: {
					width: 264,
					height: 264
				},
				cropBtnCB: scope.testCrop // 'testCrop' defined in usersController.js
			}).croppie('bind', {
				url: attrs.url,
			});
			console.log('attrs.url');
			console.log(attrs.url);
        }
    };
});

var testCrop = function(){
	croppieResult.croppie('result', {
		type: 'canvas',
		format: 'png'
	}).then(function (resp,a,b) {
		console.log(resp);
		var blob = new Blob([resp], {type: 'image/png'});
		var file = new File([blob], 'imageFileName.png');

		$.ajax({
			url: 'http://192.168.1.63:9002/users/testPhoto',
			data: blob,
			cache: false,
			contentType: false,
			processData: false,
			type: 'POST',
			success: function(data){
				alert(data);
			}
		});

	});
	croppieResult.croppie('get',function (resp) {
		console.log(resp);
	});


	console.log(croppieResult.get());
}

'use strict';
/* All filters used in Both Admin side and Client Side */

var zentieraFilters = angular.module('zentieraFilters', []);

//To Remove Underscore
zentieraFilters.filter('removeUnderscore', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/[\s]/g, '_');
        };
    }]);


//To Replace pipe
zentieraFilters.filter('replacePipe', function () {

  return function (input) {
      //console.log("Zentiera-filter ------------- >>>>>>>>>>>>  input");
      //console.log(input);
      if(input){
            return input.replace(/[|]/g, '');
      }
  };
});



//Date Time convert
zentieraFilters.filter('datetime', function($filter)
{
         return function(input)
         {
          if(input == null){ return ""; }

          var _date = $filter('date')(new Date(input),
                                      'MMM dd yyyy - HH:mm:ss');

          return _date.toUpperCase();

         };
});

//Only Time Convert
zentieraFilters.filter('time', function($filter)
{
         return function(input)
         {
          if(input == null){ return ""; }

          var _date = $filter('date')(new Date(input), 'HH:mm:ss');

          return _date.toUpperCase();

         };
});

//To Replace Space with Space
zentieraFilters.filter('replaceSpaceToSlash', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/ /g, '/');
        };
    }]);
//To Replace Underscore with Space
zentieraFilters.filter('replaceUnderscoreToSpace', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/_/g, ' ');
        };
    }]);
//To Replace start commas
zentieraFilters.filter('replaceStartComma', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/^,/g, ' ');
        };
    }]);
    //To Replace end commas
zentieraFilters.filter('replaceEndComma', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/,$/g, ' ');
        };
    }]);
//To Replace Underscore with slash
zentieraFilters.filter('replaceUnderscoreToSlash', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/_/g, '/');
        };

    }]);
//To Replace Underscore with hypen
zentieraFilters.filter('replaceUnderscoreToHypen', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            if(string=='')
            {
                return
            }
            var s = string.slice(0, string.indexOf("_"));
            var str=parseInt(s);
            if(isNaN(str)==true)
            {
                return string.replace(/_/g, ' ');
            }
            else
            {
                return string.replace(/_/g, ' - ');
            }

        };
    }]);
//To Replace comma with new line
zentieraFilters.filter('replaceCommaToNewline', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/,/g, '<br/>');
        };
    }]);
//To Replace dot with Inverted Comma
zentieraFilters.filter('replaceDotToInch', [
    function() {
        return function(input) {
            var ret=(input)?input.toString().replace(".","'"):null;
            if(ret){
                var decArr=ret.split(",");
                if(decArr.length>1){
                    var dec=decArr[1].length;
                    if(dec===1){ret+="0";}
                }
            }
            return ret;
        };
    }
]);
//To Replace hypen with space
zentieraFilters.filter('replaceHypenToSpace', [
    function() {
        return function(input) {
            var ret=(input)?input.toString().replace("-"," "):null;
            if(ret){
                var decArr=ret.split(",");
                if(decArr.length>1){
                    var dec=decArr[1].length;
                    if(dec===1){ret+="0";}
                }
            }
            return ret;
        };
    }
]);
//To Replace Comma with Space
zentieraFilters.filter('replaceCommaToDashSpace', [
    function() {
        return function(input) {
            var ret=(input)?input.toString().replace(",",'" '):null;
            if(ret){
                var decArr=ret.split(",");
                if(decArr.length>1){
                    var dec=decArr[1].length;
                    if(dec===1){ret+="0";}
                }
            }
            return ret;
        };
    }
]);


//To capitalize each word after comma
zentieraFilters.filter('capitalizeAfterComma', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/,\s*([a-z])/g, function(d,e) { return ", "+e.toUpperCase() });
        };
    }]);
    //To capitalize each word after space
zentieraFilters.filter('capitalizeAfterScore', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/_\s*([a-z])/g, function(d,e) { return "/"+e.toUpperCase() });
        };
    }]);
 /*
    //To capitalize ALL after slash
zentieraFilters.filter('capitalizeAllAfterSlash', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/\/\s*([a-z])/g, function(e) { return "/"+e.toUpperCase() });
        };
    }]); */
//To capitalize each word after slash

zentieraFilters.filter('capitalizeAfterSlash', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/\/\s*([a-z])/g, function(d,e) { return "/"+e.toUpperCase() });
        };
    }]);
//To capitalize each word after space
zentieraFilters.filter('capitalizeAfterUnderscore', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/_\s*([a-z])/g, function(d,e) {
                return "_"+e.toUpperCase();

             });
        };
    }]);
//To capitalize all EG: prof_CMT
zentieraFilters.filter('capitalizeAllAfterScore', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/_\s*([^\s]+)/g, function(d,e) {
                return "/"+e.toUpperCase();

             });
        };
    }]);

//To set First letter as capital
zentieraFilters.filter('capitalize', function () {
    return function (input, all) {
        var reg = (all) ? /([^\W_]+[^\s-]*) */g : /([^\W_]+[^\s-]*)/;
        return (!!input) ? input.replace(reg, function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }) : '';
    }
});
//To set all letters capital
zentieraFilters.filter('capitalizeAll', function () {
    return function (input, scope) {
        var text = input.toUpperCase();
        return text;
    }
});
//To display travelLocation last 3values
app.filter('lastThreeValues', function() {
  return function(str) {
    return str.split(/,/).slice(-3).join(",");
  };
});

zentieraFilters.filter('to_trusted', ['$sce', function($sce){
    return function(text) {
        return $sce.trustAsHtml(text);
    };
}]);

//For admin Side Pagination
zentieraFilters.filter('startFrom', function () {
    return function (input, start) {
        if (!input || !input.length) {
            return;
        }
        start = +start; //parse to int
        return input.slice(start);
    }
});


//For pagination blog List
zentieraFilters.filter('paginate', function (Paginator) {
    console.log("paginate filter");
    return function (input, rowsPerPage) {
        if (!input) {
            return input;
        }

        if (rowsPerPage) {
            Paginator.rowsPerPage = rowsPerPage;
        }

        Paginator.itemCount = input.length;
        return input.slice(parseInt(Paginator.page * Paginator.rowsPerPage), parseInt((Paginator.page + 1) * Paginator.rowsPerPage + 1) - 1);
    }
});

zentieraFilters.filter('forLoop', function () {
    return function (input, start, end) {
        input = new Array(end - start);
        for (var i = 0; start < end; start++, i++) {
            input[i] = start;
        }

        return input;
    }
});


zentieraFilters.filter('trustAsResourceUrl', ['$sce', function($sce) {
    return function(val) {
        return $sce.trustAsResourceUrl(val);
    };
}]);

zentieraFilters.filter('capitalizeFirst', function () {
    return function (input, scope) {
        var text = input.substring(0, 1).toUpperCase() + input.substring(1).toLowerCase();
        return text;
    }
});
;

//to set limit text and put ...
zentieraFilters.filter('cut', function () {
   return function (value, wordwise, max, tail) {
            if (!value) return '';

            max = parseInt(max, 10);
            if (!max) return value;
            if (value.length <= max) return value;

            value = value.substr(0, max);
            if (wordwise) {
                var lastspace = value.lastIndexOf(' ');
                if (lastspace != -1) {
                  //Also remove . and , so its gives a cleaner result.
                  if (value.charAt(lastspace-1) == '.' || value.charAt(lastspace-1) == ',') {
                    lastspace = lastspace - 1;
                  }
                  value = value.substr(0, lastspace);
                }
            }

            return value + (tail || ' …');
        };
});
//*** replace ! to comma for poll
zentieraFilters.filter('replaceNegationToComma', [function () {
        return function (string) {
            if (!angular.isString(string)) {
                return string;
            }
            return string.replace(/!/g, ',');
        };

    }]);

//To Replace pipe
zentieraFilters.filter('showNotSpecified', function () {

	return function (input) {
		console.log("Zentiera-filter ------------- >>>>>>>>>>>>  input");
		console.log(input);
		input = input ? input: '';
		input = typeof input === 'String' ? input.toUpperCase(): input;
		input = typeof input === 'String' ? input.trim(): input;
		if(input.length == 1 || input == '' || input == null || input == 'NULL' || input == 'UNDEFINED'){
			return 'Not specified';
		}else{
			return input;
		}
	};
});
//To Replace pipe
zentieraFilters.filter('ageFilter', function() {
     function calculateAge(birthday) { // birthday is a date
			var today = new Date();
			var birthDate = new Date(birthday);
			var age = today.getFullYear() - birthDate.getFullYear();
			var m = today.getMonth() - birthDate.getMonth();
			if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
				age--;
			}
			return age;
     }

     return function(birthdate) {
           return calculateAge(birthdate);
     };
});

/**
 * Bunch of useful filters for angularJS(with no external dependencies!)
 * @version v0.5.9 - 2016-07-15 * @link https://github.com/a8m/angular-filter
 * @author Ariel Mashraki <ariel@mashraki.co.il>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function ( window, angular, undefined ) {
/*jshint globalstrict:true*/
'use strict';

var isDefined = angular.isDefined,
    isUndefined = angular.isUndefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isNumber = angular.isNumber,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy,
    equals = angular.equals;


/**
 * @description
 * get an object and return array of values
 * @param object
 * @returns {Array}
 */
function toArray(object) {
  return isArray(object)
    ? object
    : Object.keys(object).map(function(key) {
      return object[key];
    });
}

/**
 * @param value
 * @returns {boolean}
 */
function isNull(value) {
    return value === null;
}

/**
 * @description
 * return if object contains partial object
 * @param partial{object}
 * @param object{object}
 * @returns {boolean}
 */
function objectContains(partial, object) {
  var keys = Object.keys(partial);

  return keys.map(function(el) {
    return (object[el] !== undefined) && (object[el] == partial[el]);
  }).indexOf(false) == -1;

}

/**
 * @description
 * search for approximate pattern in string
 * @param word
 * @param pattern
 * @returns {*}
 */
function hasApproxPattern(word, pattern) {
  if(pattern === '')
    return word;

  var index = word.indexOf(pattern.charAt(0));

  if(index === -1)
    return false;

  return hasApproxPattern(word.substr(index+1), pattern.substr(1))
}

/**
 * @description
 * return the first n element of an array,
 * if expression provided, is returns as long the expression return truthy
 * @param array
 * @param n {number}
 * @param expression {$parse}
 * @return array or single object
 */
function getFirstMatches(array, n, expression) {
  var count = 0;

  return array.filter(function(elm) {
    var rest = isDefined(expression) ? (count < n && expression(elm)) : count < n;
    count = rest ? count+1 : count;

    return rest;
  });
}
/**
 * Polyfill to ECMA6 String.prototype.contains
 */
if (!String.prototype.contains) {
  String.prototype.contains = function() {
    return String.prototype.indexOf.apply(this, arguments) !== -1;
  };
}

/**
 * @param num {Number}
 * @param decimal {Number}
 * @param $math
 * @returns {Number}
 */
function convertToDecimal(num, decimal, $math){
  return $math.round(num * $math.pow(10,decimal)) / ($math.pow(10,decimal));
}

/**
 * @description
 * Get an object, and return an array composed of it's properties names(nested too).
 * @param obj {Object}
 * @param stack {Array}
 * @param parent {String}
 * @returns {Array}
 * @example
 * parseKeys({ a:1, b: { c:2, d: { e: 3 } } }) ==> ["a", "b.c", "b.d.e"]
 */
function deepKeys(obj, stack, parent) {
  stack = stack || [];
  var keys = Object.keys(obj);

  keys.forEach(function(el) {
    //if it's a nested object
    if(isObject(obj[el]) && !isArray(obj[el])) {
      //concatenate the new parent if exist
      var p = parent ? parent + '.' + el : parent;
      deepKeys(obj[el], stack, p || el);
    } else {
      //create and save the key
      var key = parent ? parent + '.' + el : el;
      stack.push(key)
    }
  });
  return stack
}

/**
 * @description
 * Test if given object is a Scope instance
 * @param obj
 * @returns {Boolean}
 */
function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}

/**
 * @ngdoc filter
 * @name a8m.angular
 * @kind function
 *
 * @description
 * reference to angular function
 */

angular.module('a8m.angular', [])

    .filter('isUndefined', function () {
      return function (input) {
        return angular.isUndefined(input);
      }
    })
    .filter('isDefined', function() {
      return function (input) {
        return angular.isDefined(input);
      }
    })
    .filter('isFunction', function() {
      return function (input) {
        return angular.isFunction(input);
      }
    })
    .filter('isString', function() {
      return function (input) {
        return angular.isString(input)
      }
    })
    .filter('isNumber', function() {
      return function (input) {
        return angular.isNumber(input);
      }
    })
    .filter('isArray', function() {
      return function (input) {
        return angular.isArray(input);
      }
    })
    .filter('isObject', function() {
      return function (input) {
        return angular.isObject(input);
      }
    })
    .filter('isEqual', function() {
      return function (o1, o2) {
        return angular.equals(o1, o2);
      }
    });

/**
 * @ngdoc filter
 * @name a8m.conditions
 * @kind function
 *
 * @description
 * reference to math conditions
 */
 angular.module('a8m.conditions', [])

  .filter({
    isGreaterThan  : isGreaterThanFilter,
    '>'            : isGreaterThanFilter,

    isGreaterThanOrEqualTo  : isGreaterThanOrEqualToFilter,
    '>='                    : isGreaterThanOrEqualToFilter,

    isLessThan  : isLessThanFilter,
    '<'         : isLessThanFilter,

    isLessThanOrEqualTo  : isLessThanOrEqualToFilter,
    '<='                 : isLessThanOrEqualToFilter,

    isEqualTo  : isEqualToFilter,
    '=='       : isEqualToFilter,

    isNotEqualTo  : isNotEqualToFilter,
    '!='          : isNotEqualToFilter,

    isIdenticalTo  : isIdenticalToFilter,
    '==='          : isIdenticalToFilter,

    isNotIdenticalTo  : isNotIdenticalToFilter,
    '!=='             : isNotIdenticalToFilter
  });

  function isGreaterThanFilter() {
    return function (input, check) {
      return input > check;
    };
  }

  function isGreaterThanOrEqualToFilter() {
    return function (input, check) {
      return input >= check;
    };
  }

  function isLessThanFilter() {
    return function (input, check) {
      return input < check;
    };
  }

  function isLessThanOrEqualToFilter() {
    return function (input, check) {
      return input <= check;
    };
  }

  function isEqualToFilter() {
    return function (input, check) {
      return input == check;
    };
  }

  function isNotEqualToFilter() {
    return function (input, check) {
      return input != check;
    };
  }

  function isIdenticalToFilter() {
    return function (input, check) {
      return input === check;
    };
  }

  function isNotIdenticalToFilter() {
    return function (input, check) {
      return input !== check;
    };
  }
/**
 * @ngdoc filter
 * @name isNull
 * @kind function
 *
 * @description
 * checks if value is null or not
 * @return Boolean
 */
angular.module('a8m.is-null', [])
    .filter('isNull', function () {
      return function(input) {
        return isNull(input);
      }
    });

/**
 * @ngdoc filter
 * @name after-where
 * @kind function
 *
 * @description
 * get a collection and properties object, and returns all of the items
 * in the collection after the first that found with the given properties.
 *
 */
angular.module('a8m.after-where', [])
    .filter('afterWhere', function() {
      return function (collection, object) {

        collection = isObject(collection)
          ? toArray(collection)
          : collection;

        if(!isArray(collection) || isUndefined(object)) return collection;

        var index = collection.map( function( elm ) {
          return objectContains(object, elm);
        }).indexOf( true );

        return collection.slice((index === -1) ? 0 : index);
      }
    });

/**
 * @ngdoc filter
 * @name after
 * @kind function
 *
 * @description
 * get a collection and specified count, and returns all of the items
 * in the collection after the specified count.
 *
 */

angular.module('a8m.after', [])
    .filter('after', function() {
      return function (collection, count) {
        collection = isObject(collection)
          ? toArray(collection)
          : collection;

        return (isArray(collection))
          ? collection.slice(count)
          : collection;
      }
    });

/**
 * @ngdoc filter
 * @name before-where
 * @kind function
 *
 * @description
 * get a collection and properties object, and returns all of the items
 * in the collection before the first that found with the given properties.
 */
angular.module('a8m.before-where', [])
  .filter('beforeWhere', function() {
    return function (collection, object) {

      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection) || isUndefined(object)) return collection;

      var index = collection.map( function( elm ) {
        return objectContains(object, elm);
      }).indexOf( true );

      return collection.slice(0, (index === -1) ? collection.length : ++index);
    }
  });

/**
 * @ngdoc filter
 * @name before
 * @kind function
 *
 * @description
 * get a collection and specified count, and returns all of the items
 * in the collection before the specified count.
 */
angular.module('a8m.before', [])
    .filter('before', function() {
      return function (collection, count) {
        collection = isObject(collection)
          ? toArray(collection)
          : collection;

        return (isArray(collection))
          ? collection.slice(0, (!count) ? count : --count)
          : collection;
      }
    });

/**
 * @ngdoc filter
 * @name chunkBy
 * @kind function
 *
 * @description
 * Collect data into fixed-length chunks or blocks
 */

angular.module('a8m.chunk-by', ['a8m.filter-watcher'])
    .filter('chunkBy', ['filterWatcher', function (filterWatcher) {
      return function (array, n, fillVal) {

        return filterWatcher.isMemoized('chunkBy', arguments) ||
            filterWatcher.memoize('chunkBy', arguments, this,
                _chunkBy(array, n, fillVal));
        /**
         * @description
         * Get array with size `n` in `val` inside it.
         * @param n
         * @param val
         * @returns {Array}
         */
        function fill(n, val) {
          var ret = [];
          while (n--) ret[n] = val;
          return ret;
        }

        function _chunkBy(array, n, fillVal) {
          if (!isArray(array)) return array;
          return array.map(function (el, i, self) {
            i = i * n;
            el = self.slice(i, i + n);
            return !isUndefined(fillVal) && el.length < n
                ? el.concat(fill(n - el.length, fillVal))
                : el;
          }).slice(0, Math.ceil(array.length / n));
        }
      }
    }]);

/**
 * @ngdoc filter
 * @name concat
 * @kind function
 *
 * @description
 * get (array/object, object/array) and return merged collection
 */
angular.module('a8m.concat', [])
  .filter('concat', [function () {
    return function (collection, joined) {

      if (isUndefined(joined)) return collection;

      if (isArray(collection)) {
        return isObject(joined)
          ? collection.concat(toArray(joined))
          : collection.concat(joined);
      }

      if (isObject(collection)) {
        var array = toArray(collection);
        return (isObject(joined))
          ? array.concat(toArray(joined))
          : array.concat(joined);
      }
      return collection;
    };
  }
]);

/**
 * @ngdoc filter
 * @name contains
 * @kind function
 *
 * @description
 * Checks if given expression is present in one or more object in the collection
 */
angular.module('a8m.contains', [])
  .filter({
    contains: ['$parse', containsFilter],
    some: ['$parse', containsFilter]
  });

function containsFilter($parse) {
    return function (collection, expression) {

      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(expression)) {
        return false;
      }

      return collection.some(function(elm) {
        return ((isString(expression) && isObject(elm)) || isFunction(expression))
          ? $parse(expression)(elm)
          : elm === expression;
      });

    }
 }

/**
 * @ngdoc filter
 * @name countBy
 * @kind function
 *
 * @description
 * Sorts a list into groups and returns a count for the number of objects in each group.
 */

angular.module('a8m.count-by', [])

  .filter('countBy', [ '$parse', function ( $parse ) {
    return function (collection, property) {

      var result = {},
        get = $parse(property),
        prop;

      collection = (isObject(collection)) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(property)) {
        return collection;
      }

      collection.forEach( function( elm ) {
        prop = get(elm);

        if(!result[prop]) {
          result[prop] = 0;
        }

        result[prop]++;
      });

      return result;
    }
  }]);

/**
 * @ngdoc filter
 * @name defaults
 * @kind function
 *
 * @description
 * defaultsFilter allows to specify a default fallback value for properties that resolve to undefined.
 */
angular.module('a8m.defaults', [])
  .filter('defaults', ['$parse', function( $parse ) {
    return function(collection, defaults) {

      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || !isObject(defaults)) {
        return collection;
      }

      var keys = deepKeys(defaults);

      collection.forEach(function(elm) {
        //loop through all the keys
        keys.forEach(function(key) {
          var getter = $parse(key);
          var setter = getter.assign;
          //if it's not exist
          if(isUndefined(getter(elm))) {
            //get from defaults, and set to the returned object
            setter(elm, getter(defaults))
          }
        });
      });

      return collection;
    }
  }]);
/**
 * @ngdoc filter
 * @name every
 * @kind function
 *
 * @description
 * Checks if given expression is present in all members in the collection
 *
 */
angular.module('a8m.every', [])
  .filter('every', ['$parse', function($parse) {
    return function (collection, expression) {
      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(expression)) {
        return true;
      }

      return collection.every( function(elm) {
        return (isObject(elm) || isFunction(expression))
          ? $parse(expression)(elm)
          : elm === expression;
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name filterBy
 * @kind function
 *
 * @description
 * filter by specific properties, avoid the rest
 */
angular.module('a8m.filter-by', [])
  .filter('filterBy', ['$parse', function( $parse ) {
    return function(collection, properties, search, strict) {
      var comparator;

      search = (isString(search) || isNumber(search)) ?
        String(search).toLowerCase() : undefined;

      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(search)) {
        return collection;
      }

      return collection.filter(function(elm) {
        return properties.some(function(prop) {

          /**
           * check if there is concatenate properties
           * example:
           * object: { first: 'foo', last:'bar' }
           * filterBy: ['first + last'] => search by full name(i.e 'foo bar')
           */
          if(!~prop.indexOf('+')) {
            comparator = $parse(prop)(elm)
          } else {
            var propList = prop.replace(/\s+/g, '').split('+');
            comparator = propList
              .map(function(prop) { return $parse(prop)(elm); })
              .join(' ');
          }

          if (!isString(comparator) && !isNumber(comparator)) {
            return false;
          }

          comparator = String(comparator).toLowerCase();

          return strict ? comparator === search : comparator.contains(search);
        });
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name first
 * @kind function
 *
 * @description
 * Gets the first element or first n elements of an array
 * if callback is provided, is returns as long the callback return truthy
 */
angular.module('a8m.first', [])
  .filter('first', ['$parse', function( $parse ) {
    return function(collection) {
      var n
        , getter
        , args;

      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection)) {
        return collection;
      }

      args = Array.prototype.slice.call(arguments, 1);
      n = (isNumber(args[0])) ? args[0] : 1;
      getter = (!isNumber(args[0]))  ? args[0] : (!isNumber(args[1])) ? args[1] : undefined;

      return (args.length) ? getFirstMatches(collection, n,(getter) ? $parse(getter) : getter) :
        collection[0];
    }
  }]);

/**
 * @ngdoc filter
 * @name flatten
 * @kind function
 *
 * @description
 * Flattens a nested array (the nesting can be to any depth).
 * If you pass shallow, the array will only be flattened a single level
 */
angular.module('a8m.flatten', [])
  .filter('flatten', function () {
    return function(collection, shallow) {

      shallow = shallow || false;
      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection)) {
        return collection;
      }

      return !shallow
        ? flatten(collection, 0)
        : [].concat.apply([], collection);
    }
  });

/**
 * flatten nested array (the nesting can be to any depth).
 * @param array {Array}
 * @param i {int}
 * @returns {Array}
 * @private
 */
function flatten(array, i) {
  i = i || 0;

  if(i >= array.length)
    return array;

  if(isArray(array[i])) {
    return flatten(array.slice(0,i)
      .concat(array[i], array.slice(i+1)), i);
  }
  return flatten(array, i+1);
}

/**
 * @ngdoc filter
 * @name fuzzyByKey
 * @kind function
 *
 * @description
 * fuzzy string searching by key
 */
angular.module('a8m.fuzzy-by', [])
  .filter('fuzzyBy', ['$parse', function ( $parse ) {
    return function (collection, property, search, csensitive) {

      var sensitive = csensitive || false,
        prop, getter;

      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(property)
        || isUndefined(search)) {
        return collection;
      }

      getter = $parse(property);

      return collection.filter(function(elm) {

        prop = getter(elm);
        if(!isString(prop)) {
          return false;
        }

        prop = (sensitive) ? prop : prop.toLowerCase();
        search = (sensitive) ? search : search.toLowerCase();

        return hasApproxPattern(prop, search) !== false
      })
    }

 }]);
/**
 * @ngdoc filter
 * @name fuzzy
 * @kind function
 *
 * @description
 * fuzzy string searching for array of strings, objects
 */
angular.module('a8m.fuzzy', [])
  .filter('fuzzy', function () {
    return function (collection, search, csensitive) {
      var sensitive = csensitive || false;
      collection = isObject(collection) ? toArray(collection) : collection;

      if(!isArray(collection) || isUndefined(search)) {
        return collection;
      }

      search = (sensitive) ? search : search.toLowerCase();

      return collection.filter(function(elm) {
        if(isString(elm)) {
          elm = (sensitive) ? elm : elm.toLowerCase();
          return hasApproxPattern(elm, search) !== false
        }
        return (isObject(elm)) ? _hasApproximateKey(elm, search) : false;
      });

      /**
       * checks if object has key{string} that match
       * to fuzzy search pattern
       * @param object
       * @param search
       * @returns {boolean}
       * @private
       */
      function _hasApproximateKey(object, search) {
        var properties = Object.keys(object),
          prop, flag;
        return 0 < properties.filter(function (elm) {
          prop = object[elm];

          //avoid iteration if we found some key that equal[performance]
          if(flag) return true;

          if (isString(prop)) {
            prop = (sensitive) ? prop : prop.toLowerCase();
            return flag = (hasApproxPattern(prop, search) !== false);
          }

          return false;

        }).length;
      }
    }
  });

/**
 * @ngdoc filter
 * @name groupBy
 * @kind function
 *
 * @description
 * Create an object composed of keys generated from the result of running each element of a collection,
 * each key is an array of the elements.
 */

angular.module('a8m.group-by', [ 'a8m.filter-watcher' ])
  .filter('groupBy', [ '$parse', 'filterWatcher', function ( $parse, filterWatcher ) {
    return function (collection, property) {

      if(!isObject(collection) || isUndefined(property)) {
        return collection;
      }

      return filterWatcher.isMemoized('groupBy', arguments) ||
        filterWatcher.memoize('groupBy', arguments, this,
          _groupBy(collection, $parse(property)));

      /**
       * groupBy function
       * @param collection
       * @param getter
       * @returns {{}}
       */
      function _groupBy(collection, getter) {
        var result = {};
        var prop;

        forEach( collection, function( elm ) {
          prop = getter(elm);

          if(!result[prop]) {
            result[prop] = [];
          }
          result[prop].push(elm);
        });
        return result;
      }
    }
 }]);

/**
 * @ngdoc filter
 * @name isEmpty
 * @kind function
 *
 * @description
 * get collection or string and return if it empty
 */
angular.module('a8m.is-empty', [])
  .filter('isEmpty', function () {
    return function(collection) {
      return isObject(collection)
        ? !toArray(collection).length
        : !collection.length;
    }
  });

/**
 * @ngdoc filter
 * @name join
 * @kind function
 *
 * @description
 * join a collection by a provided delimiter (space by default)
 */
angular.module('a8m.join', [])
  .filter('join', function () {
    return function (input, delimiter) {
      if (isUndefined(input) || !isArray(input)) {
        return input;
      }
      if (isUndefined(delimiter)) delimiter = ' ';

      return input.join(delimiter);
    };
  })
;

/**
 * @ngdoc filter
 * @name last
 * @kind function
 *
 * @description
 * Gets the last element or last n elements of an array
 * if callback is provided, is returns as long the callback return truthy
 */
angular.module('a8m.last', [])
  .filter('last', ['$parse', function( $parse ) {
    return function(collection) {
      var n
        , getter
        , args
        //cuz reverse change our src collection
        //and we don't want side effects
        , reversed = copy(collection);

      reversed = isObject(reversed)
        ? toArray(reversed)
        : reversed;

      if(!isArray(reversed)) {
        return reversed;
      }

      args = Array.prototype.slice.call(arguments, 1);
      n = (isNumber(args[0])) ? args[0] : 1;
      getter = (!isNumber(args[0]))  ? args[0] : (!isNumber(args[1])) ? args[1] : undefined;

      return (args.length)
        //send reversed collection as arguments, and reverse it back as result
        ? getFirstMatches(reversed.reverse(), n,(getter) ? $parse(getter) : getter).reverse()
        //get the last element
        : reversed[reversed.length-1];
    }
  }]);

/**
 * @ngdoc filter
 * @name map
 * @kind function
 *
 * @description
 * Returns a new collection of the results of each expression execution.
 */
angular.module('a8m.map', [])
  .filter('map', ['$parse', function($parse) {
    return function (collection, expression) {

      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection) || isUndefined(expression)) {
        return collection;
      }

      return collection.map(function (elm) {
        return $parse(expression)(elm);
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name omit
 * @kind function
 *
 * @description
 * filter collection by expression
 */

angular.module('a8m.omit', [])

  .filter('omit', ['$parse', function($parse) {
    return function (collection, expression) {

      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection) || isUndefined(expression)) {
        return collection;
      }

      return collection.filter(function (elm) {
        return !($parse(expression)(elm));
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name pick
 * @kind function
 *
 * @description
 * filter collection by expression
 */

angular.module('a8m.pick', [])

  .filter('pick', ['$parse', function($parse) {
    return function (collection, expression) {

      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      if(!isArray(collection) || isUndefined(expression)) {
        return collection;
      }

      return collection.filter(function (elm) {
        return $parse(expression)(elm);
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name range
 * @kind function
 *
 * @description
 * rangeFilter provides some support for a for loop using numbers
 */
angular.module('a8m.range', [])
  .filter('range', function () {
    return function (input, total, start, increment, cb) {
      start = start || 0;
      increment = increment || 1;
      for (var i = 0; i < parseInt(total); i++) {
        var j = start + i * increment;
        input.push(isFunction(cb) ? cb(j) : j);
      }
      return input;
    };
  });
/**
 * @ngdoc filter
 * @name removeWith
 * @kind function
 *
 * @description
 * get collection and properties object, and removed elements
 * with this properties
 */

angular.module('a8m.remove-with', [])
  .filter('removeWith', function() {
    return function (collection, object) {

      if(isUndefined(object)) {
        return collection;
      }
      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      return collection.filter(function (elm) {
        return !objectContains(object, elm);
      });
    }
  });


/**
 * @ngdoc filter
 * @name remove
 * @kind function
 *
 * @description
 * remove specific members from collection
 */

angular.module('a8m.remove', [])

  .filter('remove', function () {
    return function (collection) {
      collection = isObject(collection) ? toArray(collection) : collection;
      var args = Array.prototype.slice.call(arguments, 1);

      if(!isArray(collection)) {
        return collection;
      }

      return collection.filter( function( member ) {
        return !args.some(function(nest) {
          return equals(nest, member);
        })
      });
    }
  });

/**
 * @ngdoc filter
 * @name reverse
 * @kind function
 *
 * @description
 * Reverses a string or collection
 */
angular.module('a8m.reverse', [])
    .filter('reverse',[ function () {
      return function (input) {
        input = isObject(input) ? toArray(input) : input;

        if(isString(input)) {
          return input.split('').reverse().join('');
        }

        return isArray(input)
          ? input.slice().reverse()
          : input;
      }
    }]);

/**
 * @ngdoc filter
 * @name searchField
 * @kind function
 *
 * @description
 * for each member, join several strings field and add them to
 * new field called 'searchField' (use for search filtering)
 */
angular.module('a8m.search-field', [])
  .filter('searchField', ['$parse', function ($parse) {
    return function (collection) {

      var get, field;

      collection = isObject(collection) ? toArray(collection) : collection;

      var args = Array.prototype.slice.call(arguments, 1);

      if(!isArray(collection) || !args.length) {
        return collection;
      }

      return collection.map(function(member) {

        field = args.map(function(field) {
          get = $parse(field);
          return get(member);
        }).join(' ');

        return extend(member, { searchField: field });
      });
    }
  }]);

/**
 * @ngdoc filter
 * @name toArray
 * @kind function
 *
 * @description
 * Convert objects into stable arrays.
 * if addKey set to true,the filter also attaches a new property
 * $key to the value containing the original key that was used in
 * the object we are iterating over to reference the property
 */
angular.module('a8m.to-array', [])
  .filter('toArray', function() {
    return function (collection, addKey) {

      if(!isObject(collection)) {
        return collection;
      }

      return !addKey
        ? toArray(collection)
        : Object.keys(collection).map(function (key) {
            return extend(collection[key], { $key: key });
          });
    }
  });

/**
 * @ngdoc filter
 * @name unique/uniq
 * @kind function
 *
 * @description
 * get collection and filter duplicate members
 * if uniqueFilter get a property(nested to) as argument it's
 * filter by this property as unique identifier
 */

angular.module('a8m.unique', [])
  .filter({
      unique: ['$parse', uniqFilter],
      uniq: ['$parse', uniqFilter]
    });

function uniqFilter($parse) {
    return function (collection, property) {

      collection = isObject(collection) ? toArray(collection) : collection;

      if (!isArray(collection)) {
        return collection;
      }

      //store all unique identifiers
      var uniqueItems = [],
          get = $parse(property);

      return (isUndefined(property))
        //if it's kind of primitive array
        ? collection.filter(function (elm, pos, self) {
          return self.indexOf(elm) === pos;
        })
        //else compare with equals
        : collection.filter(function (elm) {
          var prop = get(elm);
          if(some(uniqueItems, prop)) {
            return false;
          }
          uniqueItems.push(prop);
          return true;
      });

      //checked if the unique identifier is already exist
      function some(array, member) {
        if(isUndefined(member)) {
          return false;
        }
        return array.some(function(el) {
          return equals(el, member);
        });
      }
    }
}

/**
 * @ngdoc filter
 * @name where
 * @kind function
 *
 * @description
 * of each element in a collection to the given properties object,
 * returning an array of all elements that have equivalent property values.
 *
 */
angular.module('a8m.where', [])
  .filter('where', function() {
    return function (collection, object) {
      if(isUndefined(object)) return collection;
      collection = isObject(collection)
        ? toArray(collection)
        : collection;

      return collection.filter(function (elm) {
        return objectContains(object, elm);
      });
    }
  });

/**
 * @ngdoc filter
 * @name xor
 * @kind function
 *
 * @description
 * Exclusive or filter by expression
 */

angular.module('a8m.xor', [])

  .filter('xor', ['$parse', function($parse) {
    return function (col1, col2, expression) {

      expression = expression || false;

      col1 = isObject(col1) ? toArray(col1) : col1;
      col2 = isObject(col2) ? toArray(col2) : col2;

      if(!isArray(col1) || !isArray(col2)) return col1;

      return col1.concat(col2)
        .filter(function(elm) {
          return !(some(elm, col1) && some(elm, col2));
        });

      function some(el, col) {
        var getter = $parse(expression);
        return col.some(function(dElm) {
          return expression
            ? equals(getter(dElm), getter(el))
            : equals(dElm, el);
        });
      }
    }
  }]);

/**
 * @ngdoc filter
 * @name formatBytes
 * @kind function
 *
 * @description
 * Convert bytes into appropriate display
 * 1024 bytes => 1 KB
 */
angular.module('a8m.math.byteFmt', ['a8m.math'])
  .filter('byteFmt', ['$math', function ($math) {
    return function (bytes, decimal) {

      if(isNumber(decimal) && isFinite(decimal) && decimal%1===0 && decimal >= 0 &&
        isNumber(bytes) && isFinite(bytes)) {
        if(bytes < 1024) { // within 1 KB so B
          return convertToDecimal(bytes, decimal, $math) + ' B';
        } else if(bytes < 1048576) { // within 1 MB so KB
          return convertToDecimal((bytes / 1024), decimal, $math) + ' KB';
        } else if(bytes < 1073741824){ // within 1 GB so MB
          return convertToDecimal((bytes / 1048576), decimal, $math) + ' MB';
        } else { // GB or more
          return convertToDecimal((bytes / 1073741824), decimal, $math) + ' GB';
        }

      }
      return "NaN";
    }
  }]);
/**
 * @ngdoc filter
 * @name degrees
 * @kind function
 *
 * @description
 * Convert angle from radians to degrees
 */
angular.module('a8m.math.degrees', ['a8m.math'])
  .filter('degrees', ['$math', function ($math) {
    return function (radians, decimal) {
      // if decimal is not an integer greater than -1, we cannot do. quit with error "NaN"
      // if degrees is not a real number, we cannot do also. quit with error "NaN"
      if(isNumber(decimal) && isFinite(decimal) && decimal%1===0 && decimal >= 0 &&
        isNumber(radians) && isFinite(radians)) {
        var degrees = (radians * 180) / $math.PI;
        return $math.round(degrees * $math.pow(10,decimal)) / ($math.pow(10,decimal));
      } else {
        return "NaN";
      }
    }
  }]);



/**
 * @ngdoc filter
 * @name formatBytes
 * @kind function
 *
 * @description
 * Convert bytes into appropriate display
 * 1024 kilobytes => 1 MB
 */
angular.module('a8m.math.kbFmt', ['a8m.math'])
  .filter('kbFmt', ['$math', function ($math) {
    return function (bytes, decimal) {

      if(isNumber(decimal) && isFinite(decimal) && decimal%1===0 && decimal >= 0 &&
        isNumber(bytes) && isFinite(bytes)) {
        if(bytes < 1024) { // within 1 MB so KB
          return convertToDecimal(bytes, decimal, $math) + ' KB';
        } else if(bytes < 1048576) { // within 1 GB so MB
          return convertToDecimal((bytes / 1024), decimal, $math) + ' MB';
        } else {
          return convertToDecimal((bytes / 1048576), decimal, $math) + ' GB';
        }
      }
      return "NaN";
    }
  }]);
/**
 * @ngdoc module
 * @name math
 * @description
 * reference to global Math object
 */
angular.module('a8m.math', [])
  .factory('$math', ['$window', function ($window) {
    return $window.Math;
  }]);

/**
 * @ngdoc filter
 * @name max
 * @kind function
 *
 * @description
 * Math.max will get an array and return the max value. if an expression
 * is provided, will return max value by expression.
 */
angular.module('a8m.math.max', ['a8m.math'])
  .filter('max', ['$math', '$parse', function ($math, $parse) {
    return function (input, expression) {

      if(!isArray(input)) {
        return input;
      }
      return isUndefined(expression)
        ? $math.max.apply($math, input)
        : input[indexByMax(input, expression)];
    };

    /**
     * @private
     * @param array
     * @param exp
     * @returns {number|*|Number}
     */
    function indexByMax(array, exp) {
      var mappedArray = array.map(function(elm){
        return $parse(exp)(elm);
      });
      return mappedArray.indexOf($math.max.apply($math, mappedArray));
    }
  }]);
/**
 * @ngdoc filter
 * @name min
 * @kind function
 *
 * @description
 * Math.min will get an array and return the min value. if an expression
 * is provided, will return min value by expression.
 */
angular.module('a8m.math.min', ['a8m.math'])
  .filter('min', ['$math', '$parse', function ($math, $parse) {
    return function (input, expression) {

      if(!isArray(input)) {
        return input;
      }
      return isUndefined(expression)
        ? $math.min.apply($math, input)
        : input[indexByMin(input, expression)];
    };

    /**
     * @private
     * @param array
     * @param exp
     * @returns {number|*|Number}
     */
    function indexByMin(array, exp) {
      var mappedArray = array.map(function(elm){
        return $parse(exp)(elm);
      });
      return mappedArray.indexOf($math.min.apply($math, mappedArray));
    }
  }]);
/**
 * @ngdoc filter
 * @name Percent
 * @kind function
 *
 * @description
 * percentage between two numbers
 */
angular.module('a8m.math.percent', ['a8m.math'])
  .filter('percent', ['$math', '$window', function ($math, $window) {
    return function (input, divided, round) {

      var divider = isString(input) ? $window.Number(input) : input;
      divided = divided || 100;
      round = round || false;

      if (!isNumber(divider) || $window.isNaN(divider)) return input;

      return round
        ? $math.round((divider / divided) * 100)
        : (divider / divided) * 100;
    }
  }]);

/**
 * @ngdoc filter
 * @name toRadians
 * @kind function
 *
 * @description
 * Convert angle from degrees to radians
 */
angular.module('a8m.math.radians', ['a8m.math'])
  .filter('radians', ['$math', function ($math) {
    return function (degrees, decimal) {
      // if decimal is not an integer greater than -1, we cannot do. quit with error "NaN"
      // if degrees is not a real number, we cannot do also. quit with error "NaN"
      if(isNumber(decimal) && isFinite(decimal) && decimal%1===0 && decimal >= 0 &&
        isNumber(degrees) && isFinite(degrees)) {
        var radians = (degrees * 3.14159265359) / 180;
        return $math.round(radians * $math.pow(10,decimal)) / ($math.pow(10,decimal));
      }
      return "NaN";
    }
  }]);



/**
 * @ngdoc filter
 * @name Radix
 * @kind function
 *
 * @description
 * converting decimal numbers to different bases(radix)
 */
angular.module('a8m.math.radix', [])
  .filter('radix', function () {
    return function (input, radix) {
      var RANGE = /^[2-9]$|^[1-2]\d$|^3[0-6]$/;

      if(!isNumber(input) || !RANGE.test(radix)) {
        return input;
      }

      return input.toString(radix).toUpperCase();
    }
  });

/**
 * @ngdoc filter
 * @name formatBytes
 * @kind function
 *
 * @description
 * Convert number into abbreviations.
 * i.e: K for one thousand, M for Million, B for billion
 * e.g: number of users:235,221, decimal:1 => 235.2 K
 */
angular.module('a8m.math.shortFmt', ['a8m.math'])
  .filter('shortFmt', ['$math', function ($math) {
    return function (number, decimal) {
      if(isNumber(decimal) && isFinite(decimal) && decimal%1===0 && decimal >= 0 &&
        isNumber(number) && isFinite(number)){
        if(number < 1e3) {
          return number;
        } else if(number < 1e6) {
          return convertToDecimal((number / 1e3), decimal, $math) + ' K';
        } else if(number < 1e9){
          return convertToDecimal((number / 1e6), decimal, $math) + ' M';
        } else {
          return convertToDecimal((number / 1e9), decimal, $math) + ' B';
        }

      }
      return "NaN";
    }
  }]);
/**
 * @ngdoc filter
 * @name sum
 * @kind function
 *
 * @description
 * Sum up all values within an array
 */
angular.module('a8m.math.sum', [])
  .filter('sum', function () {
    return function (input, initial) {
      return !isArray(input)
        ? input
        : input.reduce(function(prev, curr) {
          return prev + curr;
        }, initial || 0);
    }
  });

/**
 * @ngdoc filter
 * @name endsWith
 * @kind function
 *
 * @description
 * checks whether string ends with the ends parameter.
 */
angular.module('a8m.ends-with', [])

  .filter('endsWith', function () {
    return function (input, ends, csensitive) {

      var sensitive = csensitive || false,
        position;

      if(!isString(input) || isUndefined(ends)) {
        return input;
      }

      input = (sensitive) ? input : input.toLowerCase();
      position = input.length - ends.length;

      return input.indexOf((sensitive) ? ends : ends.toLowerCase(), position) !== -1;
    }
  });

/**
 * @ngdoc filter
 * @name latinize
 * @kind function
 *
 * @description
 * remove accents/diacritics from a string
 */
angular.module('a8m.latinize', [])
  .filter('latinize',[ function () {
    var defaultDiacriticsRemovalap = [
      {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
      {'base':'AA','letters':'\uA732'},
      {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
      {'base':'AO','letters':'\uA734'},
      {'base':'AU','letters':'\uA736'},
      {'base':'AV','letters':'\uA738\uA73A'},
      {'base':'AY','letters':'\uA73C'},
      {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
      {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
      {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779'},
      {'base':'DZ','letters':'\u01F1\u01C4'},
      {'base':'Dz','letters':'\u01F2\u01C5'},
      {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
      {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
      {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
      {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
      {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
      {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
      {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
      {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
      {'base':'LJ','letters':'\u01C7'},
      {'base':'Lj','letters':'\u01C8'},
      {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
      {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
      {'base':'NJ','letters':'\u01CA'},
      {'base':'Nj','letters':'\u01CB'},
      {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
      {'base':'OI','letters':'\u01A2'},
      {'base':'OO','letters':'\uA74E'},
      {'base':'OU','letters':'\u0222'},
      {'base':'OE','letters':'\u008C\u0152'},
      {'base':'oe','letters':'\u009C\u0153'},
      {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
      {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
      {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
      {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
      {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
      {'base':'TZ','letters':'\uA728'},
      {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
      {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
      {'base':'VY','letters':'\uA760'},
      {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
      {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
      {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
      {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
      {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
      {'base':'aa','letters':'\uA733'},
      {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
      {'base':'ao','letters':'\uA735'},
      {'base':'au','letters':'\uA737'},
      {'base':'av','letters':'\uA739\uA73B'},
      {'base':'ay','letters':'\uA73D'},
      {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
      {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
      {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
      {'base':'dz','letters':'\u01F3\u01C6'},
      {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
      {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
      {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
      {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
      {'base':'hv','letters':'\u0195'},
      {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
      {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
      {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
      {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
      {'base':'lj','letters':'\u01C9'},
      {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
      {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
      {'base':'nj','letters':'\u01CC'},
      {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
      {'base':'oi','letters':'\u01A3'},
      {'base':'ou','letters':'\u0223'},
      {'base':'oo','letters':'\uA74F'},
      {'base':'p','letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
      {'base':'q','letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
      {'base':'r','letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
      {'base':'s','letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
      {'base':'t','letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
      {'base':'tz','letters':'\uA729'},
      {'base':'u','letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
      {'base':'v','letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
      {'base':'vy','letters':'\uA761'},
      {'base':'w','letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
      {'base':'x','letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
      {'base':'y','letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
      {'base':'z','letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
    ];

    var diacriticsMap = {};
    for (var i = 0; i < defaultDiacriticsRemovalap.length; i++) {
      var letters = defaultDiacriticsRemovalap[i].letters.split("");
      for (var j = 0; j < letters.length ; j++){
        diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
      }
    }

    // "what?" version ... http://jsperf.com/diacritics/12
    function removeDiacritics (str) {
      return str.replace(/[^\u0000-\u007E]/g, function(a){
        return diacriticsMap[a] || a;
      });
    }

    return function (input) {

      return isString(input)
        ? removeDiacritics(input)
        : input;
    }
  }]);

/**
 * @ngdoc filter
 * @name ltrim
 * @kind function
 *
 * @description
 * Left trim. Similar to trimFilter, but only for left side.
 */
angular.module('a8m.ltrim', [])
  .filter('ltrim', function () {
    return function(input, chars) {

      var trim = chars || '\\s';

      return isString(input)
        ? input.replace(new RegExp('^' + trim + '+'), '')
        : input;
    }
  });

/**
 * @ngdoc filter
 * @name match
 * @kind function
 *
 * @description
 * Return the matched pattern in a string.
 */
angular.module('a8m.match', [])
  .filter('match', function () {
    return function (input, pattern, flag) {

      var reg = new RegExp(pattern, flag);

      return isString(input)
        ? input.match(reg)
        : null;
    }
  });

/**
 * @ngdoc filter
 * @name repeat
 * @kind function
 *
 * @description
 * Repeats a string n times
 */
angular.module('a8m.repeat', [])
  .filter('repeat',[ function () {
    return function (input, n, separator) {

      var times = ~~n;

      if(!isString(input)) {
        return input;
      }

      return !times
        ? input
        : strRepeat(input, --n, separator || '');
    }
  }]);

/**
 * Repeats a string n times with given separator
 * @param str string to repeat
 * @param n number of times
 * @param sep separator
 * @returns {*}
 */
function strRepeat(str, n, sep) {
  if(!n) {
    return str;
  }
  return str + sep + strRepeat(str, --n, sep);
}
/**
* @ngdoc filter
* @name rtrim
* @kind function
*
* @description
* Right trim. Similar to trimFilter, but only for right side.
*/
angular.module('a8m.rtrim', [])
  .filter('rtrim', function () {
    return function(input, chars) {

      var trim = chars || '\\s';

      return isString(input)
        ? input.replace(new RegExp(trim + '+$'), '')
        : input;
    }
  });

/**
 * @ngdoc filter
 * @name slugify
 * @kind function
 *
 * @description
 * remove spaces from string, replace with "-" or given argument
 */
angular.module('a8m.slugify', [])
  .filter('slugify',[ function () {
    return function (input, sub) {

      var replace = (isUndefined(sub)) ? '-' : sub;

      return isString(input)
        ? input.toLowerCase().replace(/\s+/g, replace)
        : input;
    }
  }]);

/**
 * @ngdoc filter
 * @name startWith
 * @kind function
 *
 * @description
 * checks whether string starts with the starts parameter.
 */
angular.module('a8m.starts-with', [])
  .filter('startsWith', function () {
    return function (input, start, csensitive) {

      var sensitive = csensitive || false;

      if(!isString(input) || isUndefined(start)) {
        return input;
      }

      input = (sensitive) ? input : input.toLowerCase();

      return !input.indexOf((sensitive) ? start : start.toLowerCase());
    }
  });

/**
 * @ngdoc filter
 * @name stringular
 * @kind function
 *
 * @description
 * get string with {n} and replace match with enumeration values
 */
angular.module('a8m.stringular', [])
  .filter('stringular', function () {
    return function(input) {

      var args = Array.prototype.slice.call(arguments, 1);

      return input.replace(/{(\d+)}/g, function (match, number) {
        return isUndefined(args[number]) ? match : args[number];
      });
    }
  });

/**
 * @ngdoc filter
 * @name stripTags
 * @kind function
 *
 * @description
 * strip html tags from string
 */
angular.module('a8m.strip-tags', [])
  .filter('stripTags', function () {
    return function(input) {
      return isString(input)
        ? input.replace(/<\S[^><]*>/g, '')
        : input;
    }
  });

/**
 * @ngdoc filter
 * @name test
 * @kind function
 *
 * @description
 * test if a string match a pattern.
 */
angular.module('a8m.test', [])
  .filter('test', function () {
    return function (input, pattern, flag) {

      var reg = new RegExp(pattern, flag);

      return isString(input)
        ? reg.test(input)
        : input;
    }
  });

/**
 * @ngdoc filter
 * @name trim
 * @kind function
 *
 * @description
 *  Strip whitespace (or other characters) from the beginning and end of a string
 */
angular.module('a8m.trim', [])
  .filter('trim', function () {
    return function(input, chars) {

      var trim = chars || '\\s';

      return isString(input)
        ? input.replace(new RegExp('^' + trim + '+|' + trim + '+$', 'g'), '')
        : input;
    }
  });

/**
 * @ngdoc filter
 * @name truncate
 * @kind function
 *
 * @description
 * truncates a string given a specified length, providing a custom string to denote an omission.
 */
angular.module('a8m.truncate', [])
  .filter('truncate', function () {
    return function(input, length, suffix, preserve) {

      length = isUndefined(length) ? input.length : length;
      preserve = preserve || false;
      suffix = suffix || '';

      if(!isString(input) || (input.length <= length)) return input;

      return input.substring(0, (preserve)
        ? ((input.indexOf(' ', length) === -1) ? input.length : input.indexOf(' ', length))
        : length) + suffix;
    };
  });

/**
 * @ngdoc filter
 * @name ucfirst
 * @kind function
 *
 * @description
 * ucfirst
 */
angular.module('a8m.ucfirst', [])
  .filter('ucfirst', [function() {
    return function(input) {
      return isString(input)
        ? input
            .split(' ')
            .map(function (ch) {
              return ch.charAt(0).toUpperCase() + ch.substring(1);
            })
            .join(' ')
        : input;
    }
  }]);

/**
 * @ngdoc filter
 * @name uriComponentEncode
 * @kind function
 *
 * @description
 * get string as parameter and return encoded string
 */
angular.module('a8m.uri-component-encode', [])
  .filter('uriComponentEncode',['$window', function ($window) {
      return function (input) {
        return isString(input)
          ? $window.encodeURIComponent(input)
          : input;
      }
    }]);

/**
 * @ngdoc filter
 * @name uriEncode
 * @kind function
 *
 * @description
 * get string as parameter and return encoded string
 */
angular.module('a8m.uri-encode', [])
  .filter('uriEncode',['$window', function ($window) {
      return function (input) {
        return isString(input)
          ? $window.encodeURI(input)
          : input;
      }
    }]);

/**
 * @ngdoc filter
 * @name wrap
 * @kind function
 *
 * @description
 * Wrap a string with another string
 */
angular.module('a8m.wrap', [])
  .filter('wrap', function () {
    return function(input, wrap, ends) {
      return isString(input) && isDefined(wrap)
        ? [wrap, input, ends || wrap].join('')
        : input;
    }
  });

/**
 * @ngdoc provider
 * @name filterWatcher
 * @kind function
 *
 * @description
 * store specific filters result in $$cache, based on scope life time(avoid memory leak).
 * on scope.$destroy remove it's cache from $$cache container
 */

angular.module('a8m.filter-watcher', [])
  .provider('filterWatcher', function() {

    this.$get = ['$window', '$rootScope', function($window, $rootScope) {

      /**
       * Cache storing
       * @type {Object}
       */
      var $$cache = {};

      /**
       * Scope listeners container
       * scope.$destroy => remove all cache keys
       * bind to current scope.
       * @type {Object}
       */
      var $$listeners = {};

      /**
       * $timeout without triggering the digest cycle
       * @type {function}
       */
      var $$timeout = $window.setTimeout;

      /**
       * @description
       * get `HashKey` string based on the given arguments.
       * @param fName
       * @param args
       * @returns {string}
       */
      function getHashKey(fName, args) {
        function replacerFactory() {
          var cache = [];
          return function(key, val) {
            if(isObject(val) && !isNull(val)) {
              if (~cache.indexOf(val)) return '[Circular]';
              cache.push(val)
            }
            if($window == val) return '$WINDOW';
            if($window.document == val) return '$DOCUMENT';
            if(isScope(val)) return '$SCOPE';
            return val;
          }
        }
        return [fName, JSON.stringify(args, replacerFactory())]
          .join('#')
          .replace(/"/g,'');
      }

      /**
       * @description
       * fir on $scope.$destroy,
       * remove cache based scope from `$$cache`,
       * and remove itself from `$$listeners`
       * @param event
       */
      function removeCache(event) {
        var id = event.targetScope.$id;
        forEach($$listeners[id], function(key) {
          delete $$cache[key];
        });
        delete $$listeners[id];
      }

      /**
       * @description
       * for angular version that greater than v.1.3.0
       * it clear cache when the digest cycle is end.
       */
      function cleanStateless() {
        $$timeout(function() {
          if(!$rootScope.$$phase)
            $$cache = {};
        }, 2000);
      }

      /**
       * @description
       * Store hashKeys in $$listeners container
       * on scope.$destroy, remove them all(bind an event).
       * @param scope
       * @param hashKey
       * @returns {*}
       */
      function addListener(scope, hashKey) {
        var id = scope.$id;
        if(isUndefined($$listeners[id])) {
          scope.$on('$destroy', removeCache);
          $$listeners[id] = [];
        }
        return $$listeners[id].push(hashKey);
      }

      /**
       * @description
       * return the `cacheKey` or undefined.
       * @param filterName
       * @param args
       * @returns {*}
       */
      function $$isMemoized(filterName, args) {
        var hashKey = getHashKey(filterName, args);
        return $$cache[hashKey];
      }

      /**
       * @description
       * store `result` in `$$cache` container, based on the hashKey.
       * add $destroy listener and return result
       * @param filterName
       * @param args
       * @param scope
       * @param result
       * @returns {*}
       */
      function $$memoize(filterName, args, scope, result) {
        var hashKey = getHashKey(filterName, args);
        //store result in `$$cache` container
        $$cache[hashKey] = result;
        // for angular versions that less than 1.3
        // add to `$destroy` listener, a cleaner callback
        if(isScope(scope)) {
          addListener(scope, hashKey);
        } else {
          cleanStateless();
        }
        return result;
      }

      return {
        isMemoized: $$isMemoized,
        memoize: $$memoize
      }
    }];
  });


/**
 * @ngdoc module
 * @name angular.filters
 * @description
 * Bunch of useful filters for angularJS
 */

angular.module('angular.filter', [

  'a8m.ucfirst',
  'a8m.uri-encode',
  'a8m.uri-component-encode',
  'a8m.slugify',
  'a8m.latinize',
  'a8m.strip-tags',
  'a8m.stringular',
  'a8m.truncate',
  'a8m.starts-with',
  'a8m.ends-with',
  'a8m.wrap',
  'a8m.trim',
  'a8m.ltrim',
  'a8m.rtrim',
  'a8m.repeat',
  'a8m.test',
  'a8m.match',

  'a8m.to-array',
  'a8m.concat',
  'a8m.contains',
  'a8m.unique',
  'a8m.is-empty',
  'a8m.after',
  'a8m.after-where',
  'a8m.before',
  'a8m.before-where',
  'a8m.defaults',
  'a8m.where',
  'a8m.reverse',
  'a8m.remove',
  'a8m.remove-with',
  'a8m.group-by',
  'a8m.count-by',
  'a8m.chunk-by',
  'a8m.search-field',
  'a8m.fuzzy-by',
  'a8m.fuzzy',
  'a8m.omit',
  'a8m.pick',
  'a8m.every',
  'a8m.filter-by',
  'a8m.xor',
  'a8m.map',
  'a8m.first',
  'a8m.last',
  'a8m.flatten',
  'a8m.join',
  'a8m.range',

  'a8m.math',
  'a8m.math.max',
  'a8m.math.min',
  'a8m.math.percent',
  'a8m.math.radix',
  'a8m.math.sum',
  'a8m.math.degrees',
  'a8m.math.radians',
  'a8m.math.byteFmt',
  'a8m.math.kbFmt',
  'a8m.math.shortFmt',

  'a8m.angular',
  'a8m.conditions',
  'a8m.is-null',

  'a8m.filter-watcher'
]);
})( window, window.angular );
angular.module("uiSwitch",[]).directive("switch",function(){return{restrict:"AE",replace:!0,transclude:!0,template:function(n,e){var s="";return s+="<span",s+=' class="switch'+(e.class?" "+e.class:"")+'"',s+=e.ngModel?' ng-click="'+e.disabled+" ? "+e.ngModel+" : "+e.ngModel+"=!"+e.ngModel+(e.ngChange?"; "+e.ngChange+'()"':'"'):"",s+=' ng-class="{ checked:'+e.ngModel+", disabled:"+e.disabled+' }"',s+=">",s+="<small></small>",s+='<input type="checkbox"',s+=e.id?' id="'+e.id+'"':"",s+=e.name?' name="'+e.name+'"':"",s+=e.ngModel?' ng-model="'+e.ngModel+'"':"",s+=' style="display:none" />',s+='<span class="switch-text">',s+=e.on?'<span class="on">'+e.on+"</span>":"",s+=e.off?'<span class="off">'+e.off+"</span>":" ",s+="</span>"}}});
/*************************
 * Croppie
 * Copyright 2016
 * Foliotek
 * Version: 2.3.0
 *************************/
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['exports'], factory);
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
        // CommonJS
        factory(exports);
    } else {
        // Browser globals
        factory((root.commonJsStrict = {}));
    }
}(this, function (exports) {

    /* Polyfills */
    if (typeof Promise !== 'function') {
        /*! promise-polyfill 3.1.0 */
        !function(a){function b(a,b){return function(){a.apply(b,arguments)}}function c(a){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof a)throw new TypeError("not a function");this._state=null,this._value=null,this._deferreds=[],i(a,b(e,this),b(f,this))}function d(a){var b=this;return null===this._state?void this._deferreds.push(a):void k(function(){var c=b._state?a.onFulfilled:a.onRejected;if(null===c)return void(b._state?a.resolve:a.reject)(b._value);var d;try{d=c(b._value)}catch(e){return void a.reject(e)}a.resolve(d)})}function e(a){try{if(a===this)throw new TypeError("A promise cannot be resolved with itself.");if(a&&("object"==typeof a||"function"==typeof a)){var c=a.then;if("function"==typeof c)return void i(b(c,a),b(e,this),b(f,this))}this._state=!0,this._value=a,g.call(this)}catch(d){f.call(this,d)}}function f(a){this._state=!1,this._value=a,g.call(this)}function g(){for(var a=0,b=this._deferreds.length;b>a;a++)d.call(this,this._deferreds[a]);this._deferreds=null}function h(a,b,c,d){this.onFulfilled="function"==typeof a?a:null,this.onRejected="function"==typeof b?b:null,this.resolve=c,this.reject=d}function i(a,b,c){var d=!1;try{a(function(a){d||(d=!0,b(a))},function(a){d||(d=!0,c(a))})}catch(e){if(d)return;d=!0,c(e)}}var j=setTimeout,k="function"==typeof setImmediate&&setImmediate||function(a){j(a,1)},l=Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)};c.prototype["catch"]=function(a){return this.then(null,a)},c.prototype.then=function(a,b){var e=this;return new c(function(c,f){d.call(e,new h(a,b,c,f))})},c.all=function(){var a=Array.prototype.slice.call(1===arguments.length&&l(arguments[0])?arguments[0]:arguments);return new c(function(b,c){function d(f,g){try{if(g&&("object"==typeof g||"function"==typeof g)){var h=g.then;if("function"==typeof h)return void h.call(g,function(a){d(f,a)},c)}a[f]=g,0===--e&&b(a)}catch(i){c(i)}}if(0===a.length)return b([]);for(var e=a.length,f=0;f<a.length;f++)d(f,a[f])})},c.resolve=function(a){return a&&"object"==typeof a&&a.constructor===c?a:new c(function(b){b(a)})},c.reject=function(a){return new c(function(b,c){c(a)})},c.race=function(a){return new c(function(b,c){for(var d=0,e=a.length;e>d;d++)a[d].then(b,c)})},c._setImmediateFn=function(a){k=a},"undefined"!=typeof module&&module.exports?module.exports=c:a.Promise||(a.Promise=c)}(this);
    }

    if ( typeof window.CustomEvent !== "function" ) {
        (function(){
            function CustomEvent ( event, params ) {
                params = params || { bubbles: false, cancelable: false, detail: undefined };
                var evt = document.createEvent( 'CustomEvent' );
                evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
                return evt;
            }
            CustomEvent.prototype = window.Event.prototype;
            window.CustomEvent = CustomEvent;
        }());
    }
    /* End Polyfills */

    var cssPrefixes = ['Webkit', 'Moz', 'ms'],
        emptyStyles = document.createElement('div').style,
        CSS_TRANS_ORG,
        CSS_TRANSFORM,
        CSS_USERSELECT;

    function vendorPrefix(prop) {
        if (prop in emptyStyles) {
            return prop;
        }

        var capProp = prop[0].toUpperCase() + prop.slice(1),
            i = cssPrefixes.length;

        while (i--) {
            prop = cssPrefixes[i] + capProp;
            if (prop in emptyStyles) {
                return prop;
            }
        }
    }

    CSS_TRANSFORM = vendorPrefix('transform');
    CSS_TRANS_ORG = vendorPrefix('transformOrigin');
    CSS_USERSELECT = vendorPrefix('userSelect');

    // Credits to : Andrew Dupont - http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
    function deepExtend(destination, source) {
        destination = destination || {};
        for (var property in source) {
            if (source[property] && source[property].constructor && source[property].constructor === Object) {
                destination[property] = destination[property] || {};
                deepExtend(destination[property], source[property]);
            } else {
                destination[property] = source[property];
            }
        }
        return destination;
    }

    function debounce(func, wait, immediate) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    function dispatchChange(element) {
        if ("createEvent" in document) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent("change", false, true);
            element.dispatchEvent(evt);
        }
        else {
            element.fireEvent("onchange");
        }
    }

    //http://jsperf.com/vanilla-css
    function css(el, styles, val) {
        if (typeof (styles) === 'string') {
            var tmp = styles;
            styles = {};
            styles[tmp] = val;
        }

        for (var prop in styles) {
            el.style[prop] = styles[prop];
        }
    }

    function addClass(el, c) {
        if (el.classList) {
            el.classList.add(c);
        }
        else {
            el.className += ' ' + c;
        }
    }

    function removeClass(el, c) {
        if (el.classList) {
            el.classList.remove(c);
        }
        else {
            el.className = el.className.replace(c, '');
        }
    }

    /* Utilities */
    function loadImage(src, imageEl) {
        var img = imageEl || new Image(),
            prom;

        if (img.src === src) {
            // If image source hasn't changed, return a promise that resolves immediately
            prom = new Promise(function (resolve, reject) {
                resolve(img);
            });
        } else {
            prom = new Promise(function (resolve, reject) {
                if (src.substring(0,4).toLowerCase() === 'http') {
                    img.setAttribute('crossOrigin', 'anonymous');
                }
                img.onload = function () {
                    setTimeout(function () {
                        resolve(img);
                    }, 1);
                };
            });

            img.src = src;
        }

        img.style.opacity = 100;

        return prom;
    }

    /* CSS Transform Prototype */
    var _TRANSLATE = 'translate3d',
        _TRANSLATE_SUFFIX = ', 0px';
    var Transform = function (x, y, scale) {
        this.x = parseFloat(x);
        this.y = parseFloat(y);
        this.scale = parseFloat(scale);
    };

    Transform.parse = function (v) {
        if (v.style) {
            return Transform.parse(v.style[CSS_TRANSFORM]);
        }
        else if (v.indexOf('matrix') > -1 || v.indexOf('none') > -1) {
            return Transform.fromMatrix(v);
        }
        else {
            return Transform.fromString(v);
        }
    };

    Transform.fromMatrix = function (v) {
        var vals = v.substring(7).split(',');
        if (!vals.length || v === 'none') {
            vals = [1, 0, 0, 1, 0, 0];
        }

        return new Transform(parseInt(vals[4], 10), parseInt(vals[5], 10), parseFloat(vals[0]));
    };

    Transform.fromString = function (v) {
        var values = v.split(') '),
            translate = values[0].substring(_TRANSLATE.length + 1).split(','),
            scale = values.length > 1 ? values[1].substring(6) : 1,
            x = translate.length > 1 ? translate[0] : 0,
            y = translate.length > 1 ? translate[1] : 0;

        return new Transform(x, y, scale);
    };

    Transform.prototype.toString = function () {
        return _TRANSLATE + '(' + this.x + 'px, ' + this.y + 'px' + _TRANSLATE_SUFFIX + ') scale(' + this.scale + ')';
    };

    var TransformOrigin = function (el) {
        if (!el || !el.style[CSS_TRANS_ORG]) {
            this.x = 0;
            this.y = 0;
            return;
        }
        var css = el.style[CSS_TRANS_ORG].split(' ');
        this.x = parseFloat(css[0]);
        this.y = parseFloat(css[1]);
    };

    TransformOrigin.prototype.toString = function () {
        return this.x + 'px ' + this.y + 'px';
    };

    function getExifOrientation (img, cb) {
        if (!window.EXIF) {
            cb(0);
        }

        EXIF.getData(img, function () {
            var orientation = EXIF.getTag(this, 'Orientation');
            cb(orientation);
        });
    }

    function drawCanvas(canvas, img, orientation) {
        var width = img.width,
            height = img.height,
            ctx = canvas.getContext('2d');

        canvas.width = img.width;
        canvas.height = img.height;

        ctx.save();
        switch (orientation) {
          case 2:
             ctx.translate(width, 0);
             ctx.scale(-1, 1);
             break;

          case 3:
              ctx.translate(width, height);
              ctx.rotate(180*Math.PI/180);
              break;

          case 4:
              ctx.translate(0, height);
              ctx.scale(1, -1);
              break;

          case 5:
              canvas.width = height;
              canvas.height = width;
              ctx.rotate(90*Math.PI/180);
              ctx.scale(1, -1);
              break;

          case 6:
              canvas.width = height;
              canvas.height = width;
              ctx.rotate(90*Math.PI/180);
              ctx.translate(0, -height);
              break;

          case 7:
              canvas.width = height;
              canvas.height = width;
              ctx.rotate(-90*Math.PI/180);
              ctx.translate(-width, height);
              ctx.scale(1, -1);
              break;

          case 8:
              canvas.width = height;
              canvas.height = width;
              ctx.translate(0, width);
              ctx.rotate(-90*Math.PI/180);
              break;
        }
        ctx.drawImage(img, 0,0, width, height);
        ctx.restore();
    }

    /* Private Methods */
    function _create() {
        var self = this,
            contClass = 'croppie-container',
            customViewportClass = self.options.viewport.type ? 'cr-vp-' + self.options.viewport.type : null,
            boundary, img, viewport, overlay, canvas;

        self.options.useCanvas = self.options.enableOrientation || _hasExif.call(self);
        // Properties on class
        self.data = {};
        self.elements = {};

        // Generating Markup
        boundary = self.elements.boundary = document.createElement('div');
        viewport = self.elements.viewport = document.createElement('div');
        img = self.elements.img = document.createElement('img');
        overlay = self.elements.overlay = document.createElement('div');

        if (self.options.useCanvas) {
            self.elements.canvas = document.createElement('canvas');
            self.elements.preview = self.elements.canvas;
        }
        else {
            self.elements.preview = self.elements.img;
        }

        addClass(boundary, 'cr-boundary');
        css(boundary, {
            width: self.options.boundary.width + 'px',
            height: self.options.boundary.height + 'px'
        });

        addClass(viewport, 'cr-viewport');
        if (customViewportClass) {
            addClass(viewport, customViewportClass);
        }
        css(viewport, {
            width: self.options.viewport.width + 'px',
            height: self.options.viewport.height + 'px'
        });
        viewport.setAttribute('tabindex', 0);

        addClass(self.elements.preview, 'cr-image');
        addClass(overlay, 'cr-overlay');

        self.element.appendChild(boundary);
        boundary.appendChild(self.elements.preview);
        boundary.appendChild(viewport);
        boundary.appendChild(overlay);

        addClass(self.element, contClass);
        if (self.options.customClass) {
            addClass(self.element, self.options.customClass);
        }

        // Initialize drag & zoom
        _initDraggable.call(this);

        if (self.options.enableZoom) {
            _initializeZoom.call(self);
        }

        // if (self.options.enableOrientation) {
        //     _initRotationControls.call(self);
        // }
    }

    function _initRotationControls () {
        // TODO - Not a fan of these controls
        return;
        var self = this,
            wrap, btnLeft, btnRight, iLeft, iRight;

        wrap = document.createElement('div');
        self.elements.orientationBtnLeft = btnLeft = document.createElement('button');
        self.elements.orientationBtnRight = btnRight = document.createElement('button');

        wrap.appendChild(btnLeft);
        wrap.appendChild(btnRight);

        iLeft = document.createElement('i');
        iRight = document.createElement('i');
        btnLeft.appendChild(iLeft);
        btnRight.appendChild(iRight);

        addClass(wrap, 'cr-rotate-controls');
        addClass(btnLeft, 'cr-rotate-l');
        addClass(btnRight, 'cr-rotate-r');

        self.elements.boundary.appendChild(wrap);

        btnLeft.addEventListener('click', function () {
            self.rotate(-90);
        });
        btnRight.addEventListener('click', function () {
            self.rotate(90);
        });
    }

    function _hasExif() {
        // todo - remove options.exif after deprecation
        return this.options.enableExif && window.EXIF;
    }

    function _setZoomerVal(v) {
        if (this.options.enableZoom) {
            var z = this.elements.zoomer,
                val = fix(v, 4);

            z.value = Math.max(z.min, Math.min(z.max, val));
        }
    }

    function _initializeZoom() {
        var self = this,
            wrap = self.elements.zoomerWrap = document.createElement('div'),
            zoomer = self.elements.zoomer = document.createElement('input'),
            cropIcon = self.elements.cBtn = document.createElement('div'),
            cropBtn = self.elements.cIcon = document.createElement('div');

		cropBtn.addEventListener("click", function(){
			console.log(self.options);
			self.options.cropBtnCB();
		});
		var CropAction = function(){

		}

        addClass(wrap, 'cr-slider-wrap');
        addClass(zoomer, 'cr-slider');
        addClass(zoomer, 'item');

        addClass(cropIcon, 'cr-crop-icon');
        addClass(cropIcon, 'item');
        cropIcon.innerHTML = '<span class="fa-stack"> <i class="fa fa-crop fa-stack-1x fa-inverse"></i> </span>';

        addClass(cropBtn, 'cr-crop-btn');
        addClass(cropBtn, 'item');
        addClass(cropBtn, 'item');
        addClass(cropBtn, 'cr-hide');
        cropBtn.innerHTML = '<input type="button" value="Save" class="btn btn-success btn-sm">';



        zoomer.type = 'range';
        zoomer.step = '0.0001';
        zoomer.value = 1;
        zoomer.style.display = self.options.showZoomer ? '' : 'none';

        self.element.appendChild(wrap);
        wrap.appendChild(zoomer);
        wrap.appendChild(cropBtn);
        wrap.appendChild(cropIcon);

        self._currentZoom = 1;

        function change() {

            _onZoom.call(self, {
                value: parseFloat(zoomer.value),
                origin: new TransformOrigin(self.elements.preview),
                viewportRect: self.elements.viewport.getBoundingClientRect(),
                transform: Transform.parse(self.elements.preview)
            });
            if(parseFloat(zoomer.value) > zoomer.min ){
				addClass(cropIcon, 'cr-hide');
				removeClass(cropBtn, 'cr-hide');
			}else{
				removeClass(cropIcon, 'cr-hide');
				addClass(cropBtn, 'cr-hide');
			}
        }

        function scroll(ev) {
            var delta, targetZoom;

            if (ev.wheelDelta) {
                delta = ev.wheelDelta / 1200; //wheelDelta min: -120 max: 120 // max x 10 x 2
            } else if (ev.deltaY) {
                delta = ev.deltaY / 1060; //deltaY min: -53 max: 53 // max x 10 x 2
            } else if (ev.detail) {
                delta = ev.detail / -60; //delta min: -3 max: 3 // max x 10 x 2
            } else {
                delta = 0;
            }

            targetZoom = self._currentZoom + delta;

            ev.preventDefault();
            _setZoomerVal.call(self, targetZoom);
            change.call(self);
        }

        self.elements.zoomer.addEventListener('input', change);// this is being fired twice on keypress
        self.elements.zoomer.addEventListener('change', change);

        if (self.options.mouseWheelZoom) {
            self.elements.boundary.addEventListener('mousewheel', scroll);
            self.elements.boundary.addEventListener('DOMMouseScroll', scroll);
        }
    }

    function _onZoom(ui) {
        var self = this,
            transform = ui ? ui.transform : Transform.parse(self.elements.preview),
            vpRect = ui ? ui.viewportRect : self.elements.viewport.getBoundingClientRect(),
            origin = ui ? ui.origin : new TransformOrigin(self.elements.preview),
            transCss = {};

        function applyCss() {
            var transCss = {};
            transCss[CSS_TRANSFORM] = transform.toString();
            transCss[CSS_TRANS_ORG] = origin.toString();
            css(self.elements.preview, transCss);
        }

        self._currentZoom = ui ? ui.value : self._currentZoom;
        transform.scale = self._currentZoom;
        applyCss();


        if (self.options.enforceBoundary) {
            var boundaries = _getVirtualBoundaries.call(self, vpRect),
                transBoundaries = boundaries.translate,
                oBoundaries = boundaries.origin;

            if (transform.x >= transBoundaries.maxX) {
                origin.x = oBoundaries.minX;
                transform.x = transBoundaries.maxX;
            }

            if (transform.x <= transBoundaries.minX) {
                origin.x = oBoundaries.maxX;
                transform.x = transBoundaries.minX;
            }

            if (transform.y >= transBoundaries.maxY) {
                origin.y = oBoundaries.minY;
                transform.y = transBoundaries.maxY;
            }

            if (transform.y <= transBoundaries.minY) {
                origin.y = oBoundaries.maxY;
                transform.y = transBoundaries.minY;
            }
        }
        applyCss();
        _debouncedOverlay.call(self);
        _triggerUpdate.call(self);
    }

    function _getVirtualBoundaries(viewport) {
        var self = this,
            scale = self._currentZoom,
            vpWidth = viewport.width,
            vpHeight = viewport.height,
            centerFromBoundaryX = self.options.boundary.width / 2,
            centerFromBoundaryY = self.options.boundary.height / 2,
            imgRect = self.elements.preview.getBoundingClientRect(),
            curImgWidth = imgRect.width,
            curImgHeight = imgRect.height,
            halfWidth = vpWidth / 2,
            halfHeight = vpHeight / 2;

        var maxX = ((halfWidth / scale) - centerFromBoundaryX) * -1;
        var minX = maxX - ((curImgWidth * (1 / scale)) - (vpWidth * (1 / scale)));

        var maxY = ((halfHeight / scale) - centerFromBoundaryY) * -1;
        var minY = maxY - ((curImgHeight * (1 / scale)) - (vpHeight * (1 / scale)));

        var originMinX = (1 / scale) * halfWidth;
        var originMaxX = (curImgWidth * (1 / scale)) - originMinX;

        var originMinY = (1 / scale) * halfHeight;
        var originMaxY = (curImgHeight * (1 / scale)) - originMinY;

        return {
            translate: {
                maxX: maxX,
                minX: minX,
                maxY: maxY,
                minY: minY
            },
            origin: {
                maxX: originMaxX,
                minX: originMinX,
                maxY: originMaxY,
                minY: originMinY
            }
        };
    }

    function _updateCenterPoint() {
        var self = this,
            scale = self._currentZoom,
            data = self.elements.preview.getBoundingClientRect(),
            vpData = self.elements.viewport.getBoundingClientRect(),
            transform = Transform.parse(self.elements.preview.style[CSS_TRANSFORM]),
            pc = new TransformOrigin(self.elements.preview),
            top = (vpData.top - data.top) + (vpData.height / 2),
            left = (vpData.left - data.left) + (vpData.width / 2),
            center = {},
            adj = {};

        center.y = top / scale;
        center.x = left / scale;

        adj.y = (center.y - pc.y) * (1 - scale);
        adj.x = (center.x - pc.x) * (1 - scale);

        transform.x -= adj.x;
        transform.y -= adj.y;

        var newCss = {};
        newCss[CSS_TRANS_ORG] = center.x + 'px ' + center.y + 'px';
        newCss[CSS_TRANSFORM] = transform.toString();
        css(self.elements.preview, newCss);
    }

    function _initDraggable() {


        var self = this,
            isDragging = false,
            originalX,
            originalY,
            originalDistance,
            vpRect,
            transform;

        function assignTransformCoordinates(deltaX, deltaY) {

            var imgRect = self.elements.preview.getBoundingClientRect(),
                top = transform.y + deltaY,
                left = transform.x + deltaX;

            if (self.options.enforceBoundary) {
                if (vpRect.top > imgRect.top + deltaY && vpRect.bottom < imgRect.bottom + deltaY) {
                    transform.y = top;
                }

                if (vpRect.left > imgRect.left + deltaX && vpRect.right < imgRect.right + deltaX) {
                    transform.x = left;
                }
            }
            else {
                transform.y = top;
                transform.x = left;
            }
        }

        function keyDown(ev) {
            var LEFT_ARROW  = 37,
                UP_ARROW    = 38,
                RIGHT_ARROW = 39,
                DOWN_ARROW  = 40;

            if (ev.shiftKey && (ev.keyCode == UP_ARROW || ev.keyCode == DOWN_ARROW)) {
                var zoom = 0.0;
                if (ev.keyCode == UP_ARROW) {
                    zoom = parseFloat(self.elements.zoomer.value, 10) + parseFloat(self.elements.zoomer.step, 10)
                }
                else {
                    zoom = parseFloat(self.elements.zoomer.value, 10) - parseFloat(self.elements.zoomer.step, 10)
                }
                self.setZoom(zoom);
            }
            else if (ev.keyCode >= 37 && ev.keyCode <= 40) {
                ev.preventDefault();
                var movement = parseKeyDown(ev.keyCode);

                transform = Transform.parse(self.elements.preview);
                document.body.style[CSS_USERSELECT] = 'none';
                vpRect = self.elements.viewport.getBoundingClientRect();
                keyMove(movement);
            };

            function parseKeyDown(key) {
                switch (key) {
                    case LEFT_ARROW:
                        return [1, 0];
                    case UP_ARROW:
                        return [0, 1];
                    case RIGHT_ARROW:
                        return [-1, 0];
                    case DOWN_ARROW:
                        return [0, -1];
                };
            };
        }

        function keyMove(movement) {
            var deltaX = movement[0],
                deltaY = movement[1],
                newCss = {};

            assignTransformCoordinates(deltaX, deltaY);

            newCss[CSS_TRANSFORM] = transform.toString();
            css(self.elements.preview, newCss);
            _updateOverlay.call(self);
            document.body.style[CSS_USERSELECT] = '';
            _updateCenterPoint.call(self);
            _triggerUpdate.call(self);
            originalDistance = 0;
        }

        function mouseDown(ev) {

            ev.preventDefault();
            if (isDragging) return;
            isDragging = true;
            originalX = ev.pageX;
            originalY = ev.pageY;

            if (ev.touches) {
                var touches = ev.touches[0];
                originalX = touches.pageX;
                originalY = touches.pageY;
            }

            transform = Transform.parse(self.elements.preview);
            window.addEventListener('mousemove', mouseMove);
            window.addEventListener('touchmove', mouseMove);
            window.addEventListener('mouseup', mouseUp);
            window.addEventListener('touchend', mouseUp);
            document.body.style[CSS_USERSELECT] = 'none';
            vpRect = self.elements.viewport.getBoundingClientRect();
        }

        function mouseMove(ev) {
            ev.preventDefault();
            var pageX = ev.pageX,
                pageY = ev.pageY;

            if (ev.touches) {
                var touches = ev.touches[0];
                pageX = touches.pageX;
                pageY = touches.pageY;
            }

            var deltaX = pageX - originalX,
                deltaY = pageY - originalY,
                newCss = {};

            if (ev.type == 'touchmove') {
                if (ev.touches.length > 1) {
                    var touch1 = ev.touches[0];
                    var touch2 = ev.touches[1];
                    var dist = Math.sqrt((touch1.pageX - touch2.pageX) * (touch1.pageX - touch2.pageX) + (touch1.pageY - touch2.pageY) * (touch1.pageY - touch2.pageY));

                    if (!originalDistance) {
                        originalDistance = dist / self._currentZoom;
                    }

                    var scale = dist / originalDistance;

                    _setZoomerVal.call(self, scale);
                    dispatchChange(self.elements.zoomer);
                    return;
                }
            }

            assignTransformCoordinates(deltaX, deltaY);

            newCss[CSS_TRANSFORM] = transform.toString();
            css(self.elements.preview, newCss);
            _updateOverlay.call(self);
            originalY = pageY;
            originalX = pageX;
        }

        function mouseUp() {
            isDragging = false;
            window.removeEventListener('mousemove', mouseMove);
            window.removeEventListener('touchmove', mouseMove);
            window.removeEventListener('mouseup', mouseUp);
            window.removeEventListener('touchend', mouseUp);
            document.body.style[CSS_USERSELECT] = '';
            _updateCenterPoint.call(self);
            _triggerUpdate.call(self);
            originalDistance = 0;
        }

        self.elements.overlay.addEventListener('mousedown', mouseDown);
        self.elements.viewport.addEventListener('keydown', keyDown);
        self.elements.overlay.addEventListener('touchstart', mouseDown);
    }

    function _updateOverlay() {
        var self = this,
            boundRect = self.elements.boundary.getBoundingClientRect(),
            imgData = self.elements.preview.getBoundingClientRect();

        css(self.elements.overlay, {
            width: imgData.width + 'px',
            height: imgData.height + 'px',
            top: (imgData.top - boundRect.top) + 'px',
            left: (imgData.left - boundRect.left) + 'px'
        });
    }
    var _debouncedOverlay = debounce(_updateOverlay, 500);

    function _triggerUpdate() {

        var self = this,
            data = self.get(),
            ev;

        if (!_isVisible.call(self)) {
            return;
        }

        self.options.update.call(self, data);
        if (self.$) {
            self.$(self.element).trigger('update', data)
        }
        else {
            var ev;
            if (window.CustomEvent) {
                ev = new CustomEvent('update', { detail: data });
            } else {
                ev = document.createEvent('CustomEvent');
                ev.initCustomEvent('update', true, true, data);
            }

            self.element.dispatchEvent(ev);
        }
    }

    function _isVisible() {
        return this.elements.preview.offsetHeight > 0 && this.elements.preview.offsetWidth > 0;
    }

    function _updatePropertiesFromImage() {
        var self = this,
            minZoom = 0,
            maxZoom = 1.5,
            initialZoom = 1,
            cssReset = {},
            img = self.elements.preview,
            zoomer = self.elements.zoomer,
            transformReset = new Transform(0, 0, initialZoom),
            originReset = new TransformOrigin(),
            isVisible = _isVisible.call(self),
            imgData,
            vpData,
            boundaryData,
            minW,
            minH;

        if (!isVisible || self.data.bound) {
            // if the croppie isn't visible or it doesn't need binding
            return;
        }

        self.data.bound = true;
        cssReset[CSS_TRANSFORM] = transformReset.toString();
        cssReset[CSS_TRANS_ORG] = originReset.toString();
        cssReset['opacity'] = 1;
        css(img, cssReset);

        imgData = img.getBoundingClientRect();
        vpData = self.elements.viewport.getBoundingClientRect();
        boundaryData = self.elements.boundary.getBoundingClientRect();
        self._originalImageWidth = imgData.width;
        self._originalImageHeight = imgData.height;

        if (self.options.enableZoom) {
            if (self.options.enforceBoundary) {
                minW = vpData.width / imgData.width;
                minH = vpData.height / imgData.height;
                minZoom = Math.max(minW, minH);
            }

            if (minZoom >= maxZoom) {
                maxZoom = minZoom + 1;
            }

            zoomer.min = fix(minZoom, 4);
            zoomer.max = fix(maxZoom, 4);
            var defaultInitialZoom = Math.max((boundaryData.width / imgData.width), (boundaryData.height / imgData.height));
            initialZoom = self.data.boundZoom !== null ? self.data.boundZoom : defaultInitialZoom;
            _setZoomerVal.call(self, initialZoom);
            dispatchChange(zoomer);
        }
        else {
            self._currentZoom = initialZoom;
        }

        transformReset.scale = self._currentZoom;
        cssReset[CSS_TRANSFORM] = transformReset.toString();
        css(img, cssReset);

        if (self.data.points.length) {
            _bindPoints.call(self, self.data.points);
        }
        else {
            _centerImage.call(self);
        }

        _updateCenterPoint.call(self);
        _updateOverlay.call(self);
    }

    function _bindPoints(points) {
        if (points.length != 4) {
            throw "Croppie - Invalid number of points supplied: " + points;
        }
        var self = this,
            pointsWidth = points[2] - points[0],
            // pointsHeight = points[3] - points[1],
            vpData = self.elements.viewport.getBoundingClientRect(),
            boundRect = self.elements.boundary.getBoundingClientRect(),
            vpOffset = {
                left: vpData.left - boundRect.left,
                top: vpData.top - boundRect.top
            },
            scale = vpData.width / pointsWidth,
            originTop = points[1],
            originLeft = points[0],
            transformTop = (-1 * points[1]) + vpOffset.top,
            transformLeft = (-1 * points[0]) + vpOffset.left,
            newCss = {};

        newCss[CSS_TRANS_ORG] = originLeft + 'px ' + originTop + 'px';
        newCss[CSS_TRANSFORM] = new Transform(transformLeft, transformTop, scale).toString();
        css(self.elements.preview, newCss);

        _setZoomerVal.call(self, scale);
        self._currentZoom = scale;
    }

    function _centerImage() {
        var self = this,
            imgDim = self.elements.preview.getBoundingClientRect(),
            vpDim = self.elements.viewport.getBoundingClientRect(),
            boundDim = self.elements.boundary.getBoundingClientRect(),
            vpLeft = vpDim.left - boundDim.left,
            vpTop = vpDim.top - boundDim.top,
            w = vpLeft - ((imgDim.width - vpDim.width) / 2),
            h = vpTop - ((imgDim.height - vpDim.height) / 2),
            transform = new Transform(w, h, self._currentZoom);

        css(self.elements.preview, CSS_TRANSFORM, transform.toString());
    }

    function _transferImageToCanvas(customOrientation) {
        var self = this,
            canvas = self.elements.canvas,
            img = self.elements.img,
            ctx = canvas.getContext('2d'),
            exif = _hasExif.call(self),
            customOrientation = self.options.enableOrientation && customOrientation;

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        canvas.width = img.width;
        canvas.height = img.height;

        if (exif) {
            getExifOrientation(img, function (orientation) {
                drawCanvas(canvas, img, parseInt(orientation));
                if (customOrientation) {
                    drawCanvas(canvas, img, customOrientation);
                }
            });
        } else if (customOrientation) {
            drawCanvas(canvas, img, customOrientation);
        }
    }

    function _getHtmlResult(data) {
        var points = data.points,
            div = document.createElement('div'),
            img = document.createElement('img'),
            width = points[2] - points[0],
            height = points[3] - points[1];

        addClass(div, 'croppie-result');
        div.appendChild(img);
        css(img, {
            left: (-1 * points[0]) + 'px',
            top: (-1 * points[1]) + 'px'
        });
        img.src = data.url;
        css(div, {
            width: width + 'px',
            height: height + 'px'
        });

        return div;
    }

    function _getCanvasResult(img, data) {
        var points = data.points,
            left = points[0],
            top = points[1],
            width = (points[2] - points[0]),
            height = (points[3] - points[1]),
            circle = data.circle,
            canvas = document.createElement('canvas'),
            ctx = canvas.getContext('2d'),
            outWidth = width,
            outHeight = height;

        if (data.outputWidth && data.outputHeight) {
            outWidth = data.outputWidth;
            outHeight = data.outputHeight;
        }

        canvas.width = outWidth;
        canvas.height = outHeight;

        if (data.backgroundColor) {
            ctx.fillStyle = data.backgroundColor;
            ctx.fillRect(0, 0, outWidth, outHeight);
        }
        ctx.drawImage(img, left, top, width, height, 0, 0, outWidth, outHeight);
        if (circle) {
            ctx.fillStyle = '#fff';
            ctx.globalCompositeOperation = 'destination-in';
            ctx.beginPath();
            ctx.arc(outWidth / 2, outHeight / 2, outWidth / 2, 0, Math.PI * 2, true);
            ctx.closePath();
            ctx.fill();
        }
        return canvas.toDataURL(data.format, data.quality);
    }

    function _bind(options, cb) {
        var self = this,
            url,
            points = [],
            zoom = null;

        if (typeof (options) === 'string') {
            url = options;
            options = {};
        }
        else if (Array.isArray(options)) {
            points = options.slice();
        }
        else if (typeof (options) == 'undefined' && self.data.url) { //refreshing
            _updatePropertiesFromImage.call(self);
            _triggerUpdate.call(self);
            return null;
        }
        else {
            url = options.url;
            points = options.points || [];
            zoom = typeof(options.zoom) === 'undefined' ? null : options.zoom;
        }

        self.data.bound = false;
        self.data.url = url || self.data.url;
        self.data.points = (points || self.data.points).map(function (p) {
            return parseFloat(p);
        });
        self.data.boundZoom = zoom;
        var prom = loadImage(url, self.elements.img);
        prom.then(function () {
            if (self.options.useCanvas) {
                self.elements.img.exifdata = null;
                _transferImageToCanvas.call(self, options.orientation || 1);
            }
            _updatePropertiesFromImage.call(self);
            _triggerUpdate.call(self);
            if (cb) {
                cb();
            }
        });
        return prom;
    }

    function fix(v, decimalPoints) {
        return parseFloat(v).toFixed(decimalPoints || 0);
    }

    function _get() {
        var self = this,
            imgData = self.elements.preview.getBoundingClientRect(),
            vpData = self.elements.viewport.getBoundingClientRect(),
            x1 = vpData.left - imgData.left,
            y1 = vpData.top - imgData.top,
            widthDiff = (vpData.width - self.elements.viewport.offsetWidth) / 2,
            heightDiff = (vpData.height - self.elements.viewport.offsetHeight) / 2,
            x2 = x1 + self.elements.viewport.offsetWidth + widthDiff,
            y2 = y1 + self.elements.viewport.offsetHeight + heightDiff,
            scale = self._currentZoom;

        if (scale === Infinity || isNaN(scale)) {
            scale = 1;
        }

        var max = self.options.enforceBoundary ? 0 : Number.NEGATIVE_INFINITY;
        x1 = Math.max(max, x1 / scale);
        y1 = Math.max(max, y1 / scale);
        x2 = Math.max(max, x2 / scale);
        y2 = Math.max(max, y2 / scale);

        return {
            points: [fix(x1), fix(y1), fix(x2), fix(y2)],
            zoom: scale
        };
    }

    var RESULT_DEFAULTS = {
            type: 'canvas',
            format: 'png',
            quality: 1
        },
        RESULT_FORMATS = ['jpeg', 'webp', 'png'];

    function _result(options) {
        var self = this,
            data = _get.call(self),
            opts = deepExtend(RESULT_DEFAULTS, deepExtend({}, options)),
            type = (typeof (options) === 'string' ? options : (opts.type || 'viewport')),
            size = opts.size,
            format = opts.format,
            quality = opts.quality,
            backgroundColor = opts.backgroundColor,
            circle = typeof opts.circle === 'boolean' ? opts.circle : (self.options.viewport.type === 'circle'),
            vpRect = self.elements.viewport.getBoundingClientRect(),
            ratio = vpRect.width / vpRect.height,
            prom;

        if (size === 'viewport') {
            data.outputWidth = vpRect.width;
            data.outputHeight = vpRect.height;
        } else if (typeof size === 'object') {
            if (size.width && size.height) {
                data.outputWidth = size.width;
                data.outputHeight = size.height;
            } else if (size.width) {
                data.outputWidth = size.width;
                data.outputHeight = size.width / ratio;
            } else if (size.height) {
                data.outputWidth = size.height * ratio;
                data.outputHeight = size.height;
            }
        }

        if (RESULT_FORMATS.indexOf(format) > -1) {
            data.format = 'image/' + format;
            data.quality = quality;
        }

        data.circle = circle;
        data.url = self.data.url;
        data.backgroundColor = backgroundColor;

        prom = new Promise(function (resolve, reject) {
            if (type === 'canvas') {
                resolve(_getCanvasResult.call(self, self.elements.preview, data));
            }
            else {
                resolve(_getHtmlResult.call(self, data));
            }
        });
        return prom;
    }

    function _refresh() {
        _updatePropertiesFromImage.call(this);
    }

    function _rotate(deg) {
        if (!this.options.useCanvas) {
            throw 'Croppie: Cannot rotate without enableOrientation';
        }

        var self = this,
            canvas = self.elements.canvas,
            img = self.elements.img,
            copy = document.createElement('canvas'),
            ornt = 1;

        copy.width = canvas.width;
        copy.height = canvas.height;
        var ctx = copy.getContext('2d');
        ctx.drawImage(canvas, 0, 0);

        if (deg === 90 || deg === -270) ornt = 6;
        if (deg === -90 || deg === 270) ornt = 8;
        if (deg === 180 || deg === -180) ornt = 3;

        drawCanvas(canvas, copy, ornt);
        _onZoom.call(self);
    }

    function _destroy() {
        var self = this;
        self.element.removeChild(self.elements.boundary);
        removeClass(self.element, 'croppie-container');
        if (self.options.enableZoom) {
            self.element.removeChild(self.elements.zoomerWrap);
        }
        delete self.elements;
    }

    if (window.jQuery) {
        var $ = window.jQuery;
        $.fn.croppie = function (opts) {
            var ot = typeof opts;

            if (ot === 'string') {
                var args = Array.prototype.slice.call(arguments, 1);
                var singleInst = $(this).data('croppie');

                if (opts === 'get') {
                    return singleInst.get();
                }
                else if (opts === 'result') {
                    return singleInst.result.apply(singleInst, args);
                }
                else if (opts === 'bind') {
                    return singleInst.bind.apply(singleInst, args);
                }

                return this.each(function () {
                    var i = $(this).data('croppie');
                    if (!i) return;

                    var method = i[opts];
                    if ($.isFunction(method)) {
                        method.apply(i, args);
                        if (opts === 'destroy') {
                            $(this).removeData('croppie');
                        }
                    }
                    else {
                        throw 'Croppie ' + opts + ' method not found';
                    }
                });
            }
            else {
                return this.each(function () {
                    var i = new Croppie(this, opts);
                    i.$ = $;
                    $(this).data('croppie', i);
                });
            }
        };
    }

    function Croppie(element, opts) {
        this.element = element;
        this.options = deepExtend(deepExtend({}, Croppie.defaults), opts);

        _create.call(this);
        if (this.options.url) {
            var bindOpts = {
                url: this.options.url,
                points: this.options.points
            };
            delete this.options['url'];
            delete this.options['points'];
            _bind.call(this, bindOpts);
        }
    }

    Croppie.defaults = {
        viewport: {
            width: 100,
            height: 100,
            type: 'square'
        },
        boundary: {
            width: 300,
            height: 300
        },
        orientationControls: {
            enabled: true,
            leftClass: '',
            rightClass: ''
        },
        customClass: '',
        cropBtnCB: function () { },
        showZoomer: true,
        enableZoom: true,
        mouseWheelZoom: true,
        enableExif: false,
        enforceBoundary: true,
        enableOrientation: false,
        update: function () { }
    };

    deepExtend(Croppie.prototype, {
        bind: function (options, cb) {
            return _bind.call(this, options, cb);
        },
        get: function () {
            return _get.call(this);
        },
        result: function (type) {
            return _result.call(this, type);
        },
        refresh: function () {
            return _refresh.call(this);
        },
        setZoom: function (v) {
            _setZoomerVal.call(this, v);
            dispatchChange(this.elements.zoomer);
        },
        rotate: function (deg) {
            _rotate.call(this, deg);
        },
        destroy: function () {
            return _destroy.call(this);
        }
    });

    exports.Croppie = window.Croppie = Croppie;

    if (typeof module === 'object' && !!module.exports) {
        module.exports = Croppie;
    }
}));

'use strict';
/* All services used in Both Admin side and Client Side */


var zentieraServices = angular.module('zentieraServices', []);


//For Pagination Blog List
zentieraServices.service('Paginator', function ($rootScope) {

    this.page = 0;
    this.rowsPerPage = 1;
    this.itemCount = 0;
    this.limitPerPage = 5;

    console.log("Service Page Limit =====");

    this.setPage = function (page) {
        if (page > this.pageCount()) {
            return;
        }

        this.page = page;
    };

    this.nextPage = function () {
        if (this.isLastPage()) {
            return;
        }

        this.page++;
    };

    this.perviousPage = function () {
        if (this.isFirstPage()) {
            return;
        }

        this.page--;
    };

    this.firstPage = function () {
        this.page = 0;
    };

    this.lastPage = function () {
        this.page = this.pageCount() - 1;
    };

    this.isFirstPage = function () {
        return this.page == 0;
    };

    this.isLastPage = function () {
        return this.page == this.pageCount() - 1;
    };

    this.pageCount = function () {
        return Math.ceil(parseInt(this.itemCount) / parseInt(this.rowsPerPage));
    };

    this.lowerLimit = function () {
        var pageCountLimitPerPageDiff = this.pageCount() - this.limitPerPage;

        if (pageCountLimitPerPageDiff < 0) {
            return 0;
        }

        if (this.page > pageCountLimitPerPageDiff + 1) {
            return pageCountLimitPerPageDiff;
        }

        var low = this.page - (Math.ceil(this.limitPerPage / 2) - 1);

        return Math.max(low, 0);
    };
});


zentieraServices.service('fileUpload', ['$http','$location','$timeout', function ($http,$location,$timeout) {
    this.uploadFileToUrl = function (file, formExtraData, uploadUrl, callbackFn)
    {
        var fd = new FormData();
        for (var key in formExtraData) {
            if (formExtraData.hasOwnProperty(key)) {
              fd.append(formExtraData[key].field,formExtraData[key].value);
              console.log(formExtraData[key].field +'--'+ formExtraData[key].value );
            }
        }

		$timeout(function(){
			console.log(uploadUrl);
			fd.append('file',file);
			$http.post(uploadUrl, fd,
			{
				transformRequest: angular.identity,
				headers: { 'Content-Type': undefined }
			}).success(function (data, status, headers, config) {
				callbackFn(data, status, headers, config);
			}).error(function (err) {
				console.log("_failure");
			});
		},1000);

        }

}]);
//**** service for displaying advertisements  sulthan
//*** service for Top advertisement
zentieraServices.service('NavBannerServiceTop', ['$http', '$q', function ($http, $q,$rootScope) {
    var deferred = $q.defer();
    var service = {};

    service.getImage = function (imagePosition) {
        var params={
            position:imagePosition
        };

        $http.post(Config.STATIC_URL + 'users/getadvertisement',params).success(function (data) {
                deferred.resolve(data);
              // deferred.resolve(data);
        }).error(function () {

             deferred.reject('some error');
        });

        return deferred.promise;
    };
    return service;
}]);
///*** sevice for Bottom advertisement
zentieraServices.service('NavBannerServiceBottom', ['$http', '$q', function ($http, $q,$rootScope) {
    var deferred = $q.defer();
    var service = {};
    service.getImage = function (position) {
        var params={
            position:position

        };

        $http.post(Config.STATIC_URL + 'users/getadvertisement',params).success(function (data) {
              deferred.resolve(data);
        }).error(function () {
            // deferred.reject('some error');
        });

        return deferred.promise;
    };
    return service;
}]);

////**** service for left side advertisement

zentieraServices.service('NavBannerServiceLeftSide', ['$http', '$q', function ($http, $q,$rootScope) {
    var deferred = $q.defer();
    var service = {};
      service.getImage = function (position) {
        var params={
            position:position
        };
        $http.post(Config.STATIC_URL + 'users/getadvertisement',params).success(function (data) {
              deferred.resolve(data);
        }).error(function () {
            // deferred.reject('some error');
        });

        return deferred.promise;
    };
    return service;
}]);
////*** service for right side advertisement
zentieraServices.service('NavBannerServiceRightSide', ['$http', '$q', function ($http, $q,$rootScope) {
    var deferred = $q.defer();
    var service = {};
     service.getImage = function (position) {
        var params={
            position:position
        };

        $http.post(Config.STATIC_URL + 'users/getadvertisement',params).success(function (data) {
              deferred.resolve(data);
        }).error(function () {
            // deferred.reject('some error');
        });

        return deferred.promise;
    };
    return service;
}]);
zentieraServices.service('ScrollTo', ['$window', 'ngScrollToOptions', function($window, ngScrollToOptions) {

    this.idOrName = function (idOrName, offset, focus) {//find element with the given id or name and scroll to the first element it finds
        var document = $window.document;

        if(!idOrName) {//move to top if idOrName is not provided
          $window.scrollTo(0, 0);
        }

        if(focus === undefined) { //set default action to focus element
            focus = true;
        }

        //check if an element can be found with id attribute
        var el = document.getElementById(idOrName);
        if(!el) {//check if an element can be found with name attribute if there is no such id
          el = document.getElementsByName(idOrName);

          if(el && el.length)
            el = el[0];
          else
            el = null;
        }

        if(el) { //if an element is found, scroll to the element
          if (focus) {
              el.focus();
          }

          ngScrollToOptions.handler(el, offset);
        }

        //otherwise, ignore
      }

  }]);
zentieraServices.provider("ngScrollToOptions", function() {
    this.options = {
      handler : function(el, offset) {
        if (offset) {
          var top = $(el).offset().top - offset;
          window.scrollTo(0, top);
        }
        else {
          el.scrollIntoView();
        }
      }
    };
    this.$get = function() {
      return this.options;
    };
    this.extend = function(options) {
      this.options = angular.extend(this.options, options);
    };
  });
